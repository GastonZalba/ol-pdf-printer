{"version":3,"file":"ol-pdf-printer.min.js","sources":["../node_modules/ol/events/Event.js","../node_modules/ol/ObjectEventType.js","../node_modules/ol/Disposable.js","../node_modules/ol/array.js","../node_modules/ol/functions.js","../node_modules/ol/obj.js","../node_modules/ol/events/Target.js","../node_modules/ol/events/EventType.js","../node_modules/ol/events.js","../node_modules/ol/Observable.js","../node_modules/ol/util.js","../node_modules/ol/Object.js","../node_modules/ol/MapEventType.js","../node_modules/ol/has.js","../node_modules/ol/dom.js","../node_modules/ol/control/Control.js","../node_modules/ol/TileState.js","../node_modules/ol/easing.js","../node_modules/ol/Tile.js","../node_modules/ol/ImageState.js","../node_modules/ol/extent/Relationship.js","../node_modules/ol/AssertionError.js","../node_modules/ol/asserts.js","../node_modules/ol/extent.js","../node_modules/ol/ImageTile.js","../node_modules/ol/Image.js","../node_modules/ol/reproj/common.js","../node_modules/ol/proj/Units.js","../node_modules/ol/proj/Projection.js","../node_modules/ol/proj/epsg3857.js","../node_modules/ol/proj/epsg4326.js","../node_modules/ol/proj/projections.js","../node_modules/ol/proj/transforms.js","../node_modules/ol/math.js","../node_modules/ol/coordinate.js","../node_modules/ol/sphere.js","../node_modules/ol/console.js","../node_modules/ol/proj.js","../node_modules/ol/reproj/Triangulation.js","../node_modules/ol/reproj.js","../node_modules/ol/reproj/Tile.js","../node_modules/ol/structs/LRUCache.js","../node_modules/ol/tilecoord.js","../node_modules/ol/TileCache.js","../node_modules/ol/source/TileEventType.js","../node_modules/ol/source/Source.js","../node_modules/ol/TileRange.js","../node_modules/ol/tilegrid/common.js","../node_modules/ol/geom/flat/contains.js","../node_modules/ol/geom/flat/intersectsextent.js","../node_modules/ol/geom/flat/segments.js","../node_modules/ol/size.js","../node_modules/ol/tilegrid/TileGrid.js","../node_modules/ol/tilegrid.js","../node_modules/ol/source/Tile.js","../node_modules/ol/tileurlfunction.js","../node_modules/ol/source/UrlTile.js","../node_modules/ol/source/TileImage.js","../node_modules/ol/source/wms.js","../node_modules/ol/uri.js","../node_modules/ol/source/TileWMS.js","../node_modules/ol/string.js","../node_modules/ol/layer/Property.js","../node_modules/ol/layer/Base.js","../node_modules/ol/render/EventType.js","../node_modules/ol/ViewHint.js","../node_modules/ol/ViewProperty.js","../node_modules/ol/centerconstraint.js","../node_modules/ol/resolutionconstraint.js","../node_modules/ol/rotationconstraint.js","../node_modules/ol/transform.js","../node_modules/ol/geom/Geometry.js","../node_modules/ol/geom/flat/transform.js","../node_modules/ol/geom/SimpleGeometry.js","../node_modules/ol/geom/flat/closest.js","../node_modules/ol/geom/flat/deflate.js","../node_modules/ol/geom/flat/simplify.js","../node_modules/ol/geom/flat/inflate.js","../node_modules/ol/geom/flat/area.js","../node_modules/ol/geom/LinearRing.js","../node_modules/ol/geom/Point.js","../node_modules/ol/geom/flat/reverse.js","../node_modules/ol/geom/flat/orient.js","../node_modules/ol/geom/Polygon.js","../node_modules/ol/geom/flat/interiorpoint.js","../node_modules/ol/View.js","../node_modules/ol/layer/Layer.js","../node_modules/ol/layer/TileProperty.js","../node_modules/ol/layer/BaseTile.js","../node_modules/ol/renderer/Layer.js","../node_modules/ol/render/Event.js","../node_modules/ol/color.js","../node_modules/ol/renderer/canvas/Layer.js","../node_modules/ol/renderer/canvas/TileLayer.js","../node_modules/ol/layer/Tile.js","../node_modules/dom-to-image-improved/src/dom-to-image-improved.js","../src/myPragma.js","../src/components/Pdf.tsx","../node_modules/modal-vanilla/lib/modal.js","../src/components/SettingsModal.tsx","../src/components/Helpers.ts","../src/components/ProcessingModal.ts","../src/components/i18n/en.ts","../src/components/i18n/es.ts","../src/ol-pdf-printer.ts"],"sourcesContent":["/**\n * @module ol/events/Event\n */\n\n/**\n * @classdesc\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\n *\n * This implementation only provides `type` and `target` properties, and\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\n * for higher level events defined in the library, and works with\n * {@link module:ol/events/Target~Target}.\n */\nclass BaseEvent {\n  /**\n   * @param {string} type Type.\n   */\n  constructor(type) {\n    /**\n     * @type {boolean}\n     */\n    this.propagationStopped;\n\n    /**\n     * @type {boolean}\n     */\n    this.defaultPrevented;\n\n    /**\n     * The event type.\n     * @type {string}\n     * @api\n     */\n    this.type = type;\n\n    /**\n     * The event target.\n     * @type {Object}\n     * @api\n     */\n    this.target = null;\n  }\n\n  /**\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\n   * will be fired.\n   * @api\n   */\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n  /**\n   * Stop event propagation.\n   * @api\n   */\n  stopPropagation() {\n    this.propagationStopped = true;\n  }\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function stopPropagation(evt) {\n  evt.stopPropagation();\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function preventDefault(evt) {\n  evt.preventDefault();\n}\n\nexport default BaseEvent;\n","/**\n * @module ol/ObjectEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */\n  PROPERTYCHANGE: 'propertychange',\n};\n\n/**\n * @typedef {'propertychange'} Types\n */\n","/**\n * @module ol/Disposable\n */\n\n/**\n * @classdesc\n * Objects that need to clean up after themselves.\n */\nclass Disposable {\n  constructor() {\n    /**\n     * The object has already been disposed.\n     * @type {boolean}\n     * @protected\n     */\n    this.disposed = false;\n  }\n\n  /**\n   * Clean up.\n   */\n  dispose() {\n    if (!this.disposed) {\n      this.disposed = true;\n      this.disposeInternal();\n    }\n  }\n\n  /**\n   * Extension point for disposable objects.\n   * @protected\n   */\n  disposeInternal() {}\n}\n\nexport default Disposable;\n","/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, comparator) {\n  let mid, cmp;\n  comparator = comparator || ascending;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + ((high - low) >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n}\n\n/**\n * Compare function sorting arrays in ascending order.  Safe to use for numeric values.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function ascending(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  const n = arr.length;\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  }\n  let i;\n  if (direction > 0) {\n    for (i = 1; i < n; ++i) {\n      if (arr[i] < target) {\n        return i - 1;\n      }\n    }\n  } else if (direction < 0) {\n    for (i = 1; i < n; ++i) {\n      if (arr[i] <= target) {\n        return i;\n      }\n    }\n  } else {\n    for (i = 1; i < n; ++i) {\n      if (arr[i] == target) {\n        return i;\n      } else if (arr[i] < target) {\n        if (typeof direction === 'function') {\n          if (direction(target, arr[i - 1], arr[i]) > 0) {\n            return i - 1;\n          }\n          return i;\n        } else if (arr[i - 1] - target < target - arr[i]) {\n          return i - 1;\n        }\n        return i;\n      }\n    }\n  }\n  return n - 1;\n}\n\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [func] Comparison function.\n * @param {boolean} [strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, func, strict) {\n  const compare = func || ascending;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || (strict && res === 0));\n  });\n}\n","/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  let called = false;\n\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>} */\n  let lastArgs;\n\n  let lastThis;\n\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}\n","/**\n * @module ol/obj\n */\n\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\nexport function clear(object) {\n  for (const property in object) {\n    delete object[property];\n  }\n}\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n  let property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n","/**\n * @module ol/events/Target\n */\nimport Disposable from '../Disposable.js';\nimport Event from './Event.js';\nimport {VOID} from '../functions.js';\nimport {clear} from '../obj.js';\n\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */\n\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */\nclass Target extends Disposable {\n  /**\n   * @param {*} [target] Default event target for dispatched events.\n   */\n  constructor(target) {\n    super();\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.eventTarget_ = target;\n\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.pendingRemovals_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.dispatching_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>}\n     */\n    this.listeners_ = null;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  addEventListener(type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n    const listeners = this.listeners_ || (this.listeners_ = {});\n    const listenersForType = listeners[type] || (listeners[type] = []);\n    if (!listenersForType.includes(listener)) {\n      listenersForType.push(listener);\n    }\n  }\n\n  /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */\n  dispatchEvent(event) {\n    const isString = typeof event === 'string';\n    const type = isString ? event : event.type;\n    const listeners = this.listeners_ && this.listeners_[type];\n    if (!listeners) {\n      return;\n    }\n\n    const evt = isString ? new Event(event) : /** @type {Event} */ (event);\n    if (!evt.target) {\n      evt.target = this.eventTarget_ || this;\n    }\n    const dispatching = this.dispatching_ || (this.dispatching_ = {});\n    const pendingRemovals =\n      this.pendingRemovals_ || (this.pendingRemovals_ = {});\n    if (!(type in dispatching)) {\n      dispatching[type] = 0;\n      pendingRemovals[type] = 0;\n    }\n    ++dispatching[type];\n    let propagate;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      if ('handleEvent' in listeners[i]) {\n        propagate = /** @type {import(\"../events.js\").ListenerObject} */ (\n          listeners[i]\n        ).handleEvent(evt);\n      } else {\n        propagate = /** @type {import(\"../events.js\").ListenerFunction} */ (\n          listeners[i]\n        ).call(this, evt);\n      }\n      if (propagate === false || evt.propagationStopped) {\n        propagate = false;\n        break;\n      }\n    }\n    if (--dispatching[type] === 0) {\n      let pr = pendingRemovals[type];\n      delete pendingRemovals[type];\n      while (pr--) {\n        this.removeEventListener(type, VOID);\n      }\n      delete dispatching[type];\n    }\n    return propagate;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.listeners_ && clear(this.listeners_);\n  }\n\n  /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\n   */\n  getListeners(type) {\n    return (this.listeners_ && this.listeners_[type]) || undefined;\n  }\n\n  /**\n   * @param {string} [type] Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */\n  hasListener(type) {\n    if (!this.listeners_) {\n      return false;\n    }\n    return type\n      ? type in this.listeners_\n      : Object.keys(this.listeners_).length > 0;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  removeEventListener(type, listener) {\n    const listeners = this.listeners_ && this.listeners_[type];\n    if (listeners) {\n      const index = listeners.indexOf(listener);\n      if (index !== -1) {\n        if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n          // make listener a no-op, and remove later in #dispatchEvent()\n          listeners[index] = VOID;\n          ++this.pendingRemovals_[type];\n        } else {\n          listeners.splice(index, 1);\n          if (listeners.length === 0) {\n            delete this.listeners_[type];\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default Target;\n","/**\n * @module ol/events/EventType\n */\n\n/**\n * @enum {string}\n * @const\n */\nexport default {\n  /**\n   * Generic change event. Triggered when the revision counter is increased.\n   * @event module:ol/events/Event~BaseEvent#change\n   * @api\n   */\n  CHANGE: 'change',\n\n  /**\n   * Generic error event. Triggered when an error occurs.\n   * @event module:ol/events/Event~BaseEvent#error\n   * @api\n   */\n  ERROR: 'error',\n\n  BLUR: 'blur',\n  CLEAR: 'clear',\n  CONTEXTMENU: 'contextmenu',\n  CLICK: 'click',\n  DBLCLICK: 'dblclick',\n  DRAGENTER: 'dragenter',\n  DRAGOVER: 'dragover',\n  DROP: 'drop',\n  FOCUS: 'focus',\n  KEYDOWN: 'keydown',\n  KEYPRESS: 'keypress',\n  LOAD: 'load',\n  RESIZE: 'resize',\n  TOUCHMOVE: 'touchmove',\n  WHEEL: 'wheel',\n};\n","/**\n * @module ol/events\n */\nimport {clear} from './obj.js';\n\n/**\n * Key to use with {@link module:ol/Observable.unByKey}.\n * @typedef {Object} EventsKey\n * @property {ListenerFunction} listener Listener.\n * @property {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @property {string} type Type.\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n/**\n * @typedef {Object} ListenerObject\n * @property {ListenerFunction} handleEvent HandleEvent listener function.\n */\n\n/**\n * @typedef {ListenerFunction|ListenerObject} Listener\n */\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events.unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean} [once] If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, thisArg, once) {\n  if (thisArg && thisArg !== target) {\n    listener = listener.bind(thisArg);\n  }\n  if (once) {\n    const originalListener = listener;\n    listener = function () {\n      target.removeEventListener(type, listener);\n      originalListener.apply(this, arguments);\n    };\n  }\n  const eventsKey = {\n    target: target,\n    type: type,\n    listener: listener,\n  };\n  target.addEventListener(type, listener);\n  return eventsKey;\n}\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events.unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events.listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, thisArg) {\n  return listen(target, type, listener, thisArg, true);\n}\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.listener);\n    clear(key);\n  }\n}\n","/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {listen, listenOnce, unlistenByKey} from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n\n    this.on =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onInternal\n      );\n\n    this.once =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onceInternal\n      );\n\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    }\n    return listen(this, /** @type {string} */ (type), listener);\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onceInternal(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */ (type), listener);\n    }\n    /** @type {Object} */ (listener).ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n  unInternal(type, listener) {\n    const key = /** @type {Object} */ (listener).ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\nexport default Observable;\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '7.3.0';\n","/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport {getUid} from './util.js';\nimport {isEmpty} from './obj.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n  /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */\n  constructor(values) {\n    super();\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    this.un;\n\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    this.values_ = null;\n\n    if (values !== undefined) {\n      this.setProperties(values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return (this.values_ && Object.keys(this.values_)) || [];\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return (this.values_ && Object.assign({}, this.values_)) || {};\n  }\n\n  /**\n   * @return {boolean} The object has properties.\n   */\n  hasProperties() {\n    return !!this.values_;\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = `change:${key}`;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  addChangeListener(key, listener) {\n    this.addEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  removeChangeListener(key, listener) {\n    this.removeEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  set(key, value, silent) {\n    const values = this.values_ || (this.values_ = {});\n    if (silent) {\n      values[key] = value;\n    } else {\n      const oldValue = values[key];\n      values[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  setProperties(values, silent) {\n    for (const key in values) {\n      this.set(key, values[key], silent);\n    }\n  }\n\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n  applyProperties(source) {\n    if (!source.values_) {\n      return;\n    }\n    Object.assign(this.values_ || (this.values_ = {}), source.values_);\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [silent] Unset without triggering an event.\n   * @api\n   */\n  unset(key, silent) {\n    if (this.values_ && key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n      if (!silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\nexport default BaseObject;\n","/**\n * @module ol/MapEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered after a map frame is rendered.\n   * @event module:ol/MapEvent~MapEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered when the map starts moving.\n   * @event module:ol/MapEvent~MapEvent#movestart\n   * @api\n   */\n  MOVESTART: 'movestart',\n\n  /**\n   * Triggered after the map is moved.\n   * @event module:ol/MapEvent~MapEvent#moveend\n   * @api\n   */\n  MOVEEND: 'moveend',\n\n  /**\n   * Triggered when loading of additional map data (tiles, images, features) starts.\n   * @event module:ol/MapEvent~MapEvent#loadstart\n   * @api\n   */\n  LOADSTART: 'loadstart',\n\n  /**\n   * Triggered when loading of additional map data has completed.\n   * @event module:ol/MapEvent~MapEvent#loadend\n   * @api\n   */\n  LOADEND: 'loadend',\n};\n\n/***\n * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types\n */\n","/**\n * @module ol/has\n */\n\nconst ua =\n  typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'\n    ? navigator.userAgent.toLowerCase()\n    : '';\n\n/**\n * User agent string says we are dealing with Firefox as browser.\n * @type {boolean}\n */\nexport const FIREFOX = ua.includes('firefox');\n\n/**\n * User agent string says we are dealing with Safari as browser.\n * @type {boolean}\n */\nexport const SAFARI = ua.includes('safari') && !ua.includes('chrom');\n\n/**\n * https://bugs.webkit.org/show_bug.cgi?id=237906\n * @type {boolean}\n */\nexport const SAFARI_BUG_237906 =\n  SAFARI &&\n  (ua.includes('version/15.4') ||\n    /cpu (os|iphone os) 15_4 like mac os x/.test(ua));\n\n/**\n * User agent string says we are dealing with a WebKit engine.\n * @type {boolean}\n */\nexport const WEBKIT = ua.includes('webkit') && !ua.includes('edge');\n\n/**\n * User agent string says we are dealing with a Mac as platform.\n * @type {boolean}\n */\nexport const MAC = ua.includes('macintosh');\n\n/**\n * The ratio between physical pixels and device-independent pixels\n * (dips) on the device (`window.devicePixelRatio`).\n * @const\n * @type {number}\n * @api\n */\nexport const DEVICE_PIXEL_RATIO =\n  typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;\n\n/**\n * The execution context is a worker with OffscreenCanvas available.\n * @const\n * @type {boolean}\n */\nexport const WORKER_OFFSCREEN_CANVAS =\n  typeof WorkerGlobalScope !== 'undefined' &&\n  typeof OffscreenCanvas !== 'undefined' &&\n  self instanceof WorkerGlobalScope; //eslint-disable-line\n\n/**\n * Image.prototype.decode() is supported.\n * @type {boolean}\n */\nexport const IMAGE_DECODE =\n  typeof Image !== 'undefined' && Image.prototype.decode;\n\n/**\n * @type {boolean}\n */\nexport const PASSIVE_EVENT_LISTENERS = (function () {\n  let passive = false;\n  try {\n    const options = Object.defineProperty({}, 'passive', {\n      get: function () {\n        passive = true;\n      },\n    });\n\n    window.addEventListener('_', null, options);\n    window.removeEventListener('_', null, options);\n  } catch (error) {\n    // passive not supported\n  }\n  return passive;\n})();\n","import {WORKER_OFFSCREEN_CANVAS} from './has.js';\n\n/**\n * @module ol/dom\n */\n\n//FIXME Move this function to the canvas module\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number} [width] Canvas width.\n * @param {number} [height] Canvas height.\n * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.\n * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(width, height, canvasPool, settings) {\n  /** @type {HTMLCanvasElement|OffscreenCanvas} */\n  let canvas;\n  if (canvasPool && canvasPool.length) {\n    canvas = canvasPool.shift();\n  } else if (WORKER_OFFSCREEN_CANVAS) {\n    canvas = new OffscreenCanvas(width || 300, height || 300);\n  } else {\n    canvas = document.createElement('canvas');\n  }\n  if (width) {\n    canvas.width = width;\n  }\n  if (height) {\n    canvas.height = height;\n  }\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n  return /** @type {CanvasRenderingContext2D} */ (\n    canvas.getContext('2d', settings)\n  );\n}\n\n/**\n * Releases canvas memory to avoid exceeding memory limits in Safari.\n * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/\n * @param {CanvasRenderingContext2D} context Context.\n */\nexport function releaseCanvas(context) {\n  const canvas = context.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n  context.clearRect(0, 0, 1, 1);\n}\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  let width = element.offsetWidth;\n  const style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n\n  return width;\n}\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  let height = element.offsetHeight;\n  const style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  const parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove.\n * @return {Node|null} The node that was removed or null.\n */\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}\n\n/**\n * Transform the children of a parent node so they match the\n * provided list of children.  This function aims to efficiently\n * remove, add, and reorder child nodes while maintaining a simple\n * implementation (it is not guaranteed to minimize DOM operations).\n * @param {Node} node The parent node whose children need reworking.\n * @param {Array<Node>} children The desired children.\n */\nexport function replaceChildren(node, children) {\n  const oldChildren = node.childNodes;\n\n  for (let i = 0; true; ++i) {\n    const oldChild = oldChildren[i];\n    const newChild = children[i];\n\n    // check if our work is done\n    if (!oldChild && !newChild) {\n      break;\n    }\n\n    // check if children match\n    if (oldChild === newChild) {\n      continue;\n    }\n\n    // check if a new child needs to be added\n    if (!oldChild) {\n      node.appendChild(newChild);\n      continue;\n    }\n\n    // check if an old child needs to be removed\n    if (!newChild) {\n      node.removeChild(oldChild);\n      --i;\n      continue;\n    }\n\n    // reorder\n    node.insertBefore(newChild, oldChild);\n  }\n}\n","/**\n * @module ol/control/Control\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport {VOID} from '../functions.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {removeNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * const myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nclass Control extends BaseObject {\n  /**\n   * @param {Options} options Control options.\n   */\n  constructor(options) {\n    super();\n\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    this.listenerKeys = [];\n\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    removeNode(this.element);\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      const target = this.target_\n        ? this.target_\n        : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n      if (this.render !== VOID) {\n        this.listenerKeys.push(\n          listen(map, MapEventType.POSTRENDER, this.render, this)\n        );\n      }\n      map.render();\n    }\n  }\n\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  render(mapEvent) {}\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  setTarget(target) {\n    this.target_ =\n      typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\n\nexport default Control;\n","/**\n * @module ol/TileState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  /**\n   * Indicates that tile loading failed\n   * @type {number}\n   */\n  ERROR: 3,\n  EMPTY: 4,\n};\n","/**\n * @module ol/easing\n */\n\n/**\n * Start slow and speed up.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeIn(t) {\n  return Math.pow(t, 3);\n}\n\n/**\n * Start fast and slow down.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeOut(t) {\n  return 1 - easeIn(1 - t);\n}\n\n/**\n * Start slow, speed up, and then slow down again.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function inAndOut(t) {\n  return 3 * t * t - 2 * t * t * t;\n}\n\n/**\n * Maintain a constant speed over time.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function linear(t) {\n  return t;\n}\n\n/**\n * Start slow, speed up, and at the very end slow down again.  This has the\n * same general behavior as {@link module:ol/easing.inAndOut}, but the final\n * slowdown is delayed.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function upAndDown(t) {\n  if (t < 0.5) {\n    return inAndOut(2 * t);\n  }\n  return 1 - inAndOut(2 * (t - 0.5));\n}\n","/**\n * @module ol/Tile\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport TileState from './TileState.js';\nimport {abstract} from './util.js';\nimport {easeIn} from './easing.js';\n\n/**\n * A function that takes an {@link module:ol/Tile~Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState.js';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   const xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     const data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */\nclass Tile extends EventTarget {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {Options} [options] Tile options.\n   */\n  constructor(tileCoord, state, options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    this.tileCoord = tileCoord;\n\n    /**\n     * @protected\n     * @type {import(\"./TileState.js\").default}\n     */\n    this.state = state;\n\n    /**\n     * An \"interim\" tile for this tile. The interim tile may be used while this\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\n     * on the source.\n     * @type {Tile}\n     */\n    this.interimTile = null;\n\n    /**\n     * A key assigned to the tile. This is used by the tile source to determine\n     * if this tile can effectively be used, or if a new tile should be created\n     * and this one be used as an interim tile for this new tile.\n     * @type {string}\n     */\n    this.key = '';\n\n    /**\n     * The duration for the opacity transition.\n     * @type {number}\n     */\n    this.transition_ =\n      options.transition === undefined ? 250 : options.transition;\n\n    /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @type {Object<string, number>}\n     */\n    this.transitionStarts_ = {};\n\n    /**\n     * @type {boolean}\n     */\n    this.interpolate = !!options.interpolate;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Called by the tile cache when the tile is removed from the cache due to expiry\n   */\n  release() {\n    if (this.state === TileState.ERROR) {\n      // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`\n      this.setState(TileState.EMPTY);\n    }\n  }\n\n  /**\n   * @return {string} Key.\n   */\n  getKey() {\n    return this.key + '/' + this.tileCoord;\n  }\n\n  /**\n   * Get the interim tile most suitable for rendering using the chain of interim\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\n   * such tile exists, the original tile is returned.\n   * @return {!Tile} Best tile for rendering.\n   */\n  getInterimTile() {\n    if (!this.interimTile) {\n      //empty chain\n      return this;\n    }\n    let tile = this.interimTile;\n\n    // find the first loaded tile and return it. Since the chain is sorted in\n    // decreasing order of creation time, there is no need to search the remainder\n    // of the list (all those tiles correspond to older requests and will be\n    // cleaned up by refreshInterimChain)\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        // Show tile immediately instead of fading it in after loading, because\n        // the interim tile is in place already\n        this.transition_ = 0;\n        return tile;\n      }\n      tile = tile.interimTile;\n    } while (tile);\n\n    // we can not find a better tile\n    return this;\n  }\n\n  /**\n   * Goes through the chain of interim tiles and discards sections of the chain\n   * that are no longer relevant.\n   */\n  refreshInterimChain() {\n    if (!this.interimTile) {\n      return;\n    }\n\n    let tile = this.interimTile;\n\n    /**\n     * @type {Tile}\n     */\n    let prev = this;\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        //we have a loaded tile, we can discard the rest of the list\n        //we would could abort any LOADING tile request\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\n        tile.interimTile = null;\n        break;\n      } else if (tile.getState() == TileState.LOADING) {\n        //keep this LOADING tile any loaded tiles later in the chain are\n        //older than this tile, so we're still interested in the request\n        prev = tile;\n      } else if (tile.getState() == TileState.IDLE) {\n        //the head of the list is the most current tile, we don't need\n        //to start any other requests for this chain\n        prev.interimTile = tile.interimTile;\n      } else {\n        prev = tile;\n      }\n      tile = prev.interimTile;\n    } while (tile);\n  }\n\n  /**\n   * Get the tile coordinate for this tile.\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n   * @api\n   */\n  getTileCoord() {\n    return this.tileCoord;\n  }\n\n  /**\n   * @return {import(\"./TileState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n   * the tile queue and will block other requests.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @api\n   */\n  setState(state) {\n    if (this.state !== TileState.ERROR && this.state > state) {\n      throw new Error('Tile load sequence violation');\n    }\n    this.state = state;\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */\n  load() {\n    abstract();\n  }\n\n  /**\n   * Get the alpha value for rendering.\n   * @param {string} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */\n  getAlpha(id, time) {\n    if (!this.transition_) {\n      return 1;\n    }\n\n    let start = this.transitionStarts_[id];\n    if (!start) {\n      start = time;\n      this.transitionStarts_[id] = start;\n    } else if (start === -1) {\n      return 1;\n    }\n\n    const delta = time - start + 1000 / 60; // avoid rendering at 0\n    if (delta >= this.transition_) {\n      return 1;\n    }\n    return easeIn(delta / this.transition_);\n  }\n\n  /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {string} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */\n  inTransition(id) {\n    if (!this.transition_) {\n      return false;\n    }\n    return this.transitionStarts_[id] !== -1;\n  }\n\n  /**\n   * Mark a transition as complete.\n   * @param {string} id An id for the renderer.\n   */\n  endTransition(id) {\n    if (this.transition_) {\n      this.transitionStarts_[id] = -1;\n    }\n  }\n}\n\nexport default Tile;\n","/**\n * @module ol/ImageState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  ERROR: 3,\n  EMPTY: 4,\n};\n","/**\n * @module ol/extent/Relationship\n */\n\n/**\n * Relationship to an extent.\n * @enum {number}\n */\nexport default {\n  UNKNOWN: 0,\n  INTERSECTING: 1,\n  ABOVE: 2,\n  RIGHT: 4,\n  BELOW: 8,\n  LEFT: 16,\n};\n","/**\n * @module ol/AssertionError\n */\n\n/** @type {Object<number, string>} */\nconst messages = {\n  1: 'The view center is not defined',\n  2: 'The view resolution is not defined',\n  3: 'The view rotation is not defined',\n  4: '`image` and `src` cannot be provided at the same time',\n  5: '`imgSize` must be set when `image` is provided',\n  7: '`format` must be set when `url` is set',\n  8: 'Unknown `serverType` configured',\n  9: '`url` must be configured or set using `#setUrl()`',\n  10: 'The default `geometryFunction` can only handle `Point` geometries',\n  11: '`options.featureTypes` must be an Array',\n  12: '`options.geometryName` must also be provided when `options.bbox` is set',\n  13: 'Invalid corner',\n  14: 'Invalid color',\n  15: 'Tried to get a value for a key that does not exist in the cache',\n  16: 'Tried to set a value for a key that is used already',\n  17: '`resolutions` must be sorted in descending order',\n  18: 'Either `origin` or `origins` must be configured, never both',\n  19: 'Number of `tileSizes` and `resolutions` must be equal',\n  20: 'Number of `origins` and `resolutions` must be equal',\n  22: 'Either `tileSize` or `tileSizes` must be configured, never both',\n  24: 'Invalid extent or geometry provided as `geometry`',\n  25: 'Cannot fit empty extent provided as `geometry`',\n  26: 'Features must have an id set',\n  27: 'Features must have an id set',\n  28: '`renderMode` must be `\"hybrid\"` or `\"vector\"`',\n  30: 'The passed `feature` was already added to the source',\n  31: 'Tried to enqueue an `element` that was already added to the queue',\n  32: 'Transformation matrix cannot be inverted',\n  33: 'Invalid units',\n  34: 'Invalid geometry layout',\n  36: 'Unknown SRS type',\n  37: 'Unknown geometry type found',\n  38: '`styleMapValue` has an unknown type',\n  39: 'Unknown geometry type',\n  40: 'Expected `feature` to have a geometry',\n  41: 'Expected an `ol/style/Style` or an array of `ol/style/Style.js`',\n  42: 'Question unknown, the answer is 42',\n  43: 'Expected `layers` to be an array or a `Collection`',\n  47: 'Expected `controls` to be an array or an `ol/Collection`',\n  48: 'Expected `interactions` to be an array or an `ol/Collection`',\n  49: 'Expected `overlays` to be an array or an `ol/Collection`',\n  50: '`options.featureTypes` should be an Array',\n  51: 'Either `url` or `tileJSON` options must be provided',\n  52: 'Unknown `serverType` configured',\n  53: 'Unknown `tierSizeCalculation` configured',\n  55: 'The {-y} placeholder requires a tile grid with extent',\n  56: 'mapBrowserEvent must originate from a pointer event',\n  57: 'At least 2 conditions are required',\n  59: 'Invalid command found in the PBF',\n  60: 'Missing or invalid `size`',\n  61: 'Cannot determine IIIF Image API version from provided image information JSON',\n  62: 'A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`',\n  64: 'Layer opacity must be a number',\n  66: '`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`',\n  67: 'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both',\n  68: 'A VectorTile source can only be rendered if it has a projection compatible with the view projection',\n  69: '`width` or `height` cannot be provided together with `scale`',\n};\n\n/**\n * Error object thrown when an assertion failed. This is an ECMA-262 Error,\n * extended with a `code` property.\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error.\n */\nclass AssertionError extends Error {\n  /**\n   * @param {number} code Error code.\n   */\n  constructor(code) {\n    const message = messages[code];\n\n    super(message);\n\n    /**\n     * Error code. The meaning of the code can be found on\n     * https://openlayers.org/en/latest/doc/errors/ (replace `latest` with\n     * the version found in the OpenLayers script's header comment if a version\n     * other than the latest is used).\n     * @type {number}\n     * @deprecated ol/AssertionError and error codes will be removed in v8.0\n     * @api\n     */\n    this.code = code;\n\n    /**\n     * @type {string}\n     */\n    this.name = 'AssertionError';\n\n    // Re-assign message, see https://github.com/Rich-Harris/buble/issues/40\n    this.message = message;\n  }\n}\n\nexport default AssertionError;\n","/**\n * @module ol/asserts\n */\nimport AssertionError from './AssertionError.js';\n\n/**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {number} errorCode Error code.\n */\nexport function assert(assertion, errorCode) {\n  if (!assertion) {\n    throw new AssertionError(errorCode);\n  }\n}\n","/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\nimport {assert} from './asserts.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  }\n  return [\n    extent[0] - value,\n    extent[1] - value,\n    extent[2] + value,\n    extent[3] + value,\n  ];\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent.slice();\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[0] &&\n    extent2[2] <= extent1[2] &&\n    extent1[1] <= extent2[1] &&\n    extent2[3] <= extent1[3]\n  );\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  }\n  return [minX, minY, maxX, maxY];\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  dest\n) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return (\n    extent1[0] == extent2[0] &&\n    extent1[2] == extent2[2] &&\n    extent1[1] == extent2[1] &&\n    extent1[3] == extent2[3]\n  );\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return (\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\n    Math.abs(extent1[3] - extent2[3]) < tolerance\n  );\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(\n  extent,\n  flatCoordinates,\n  offset,\n  end,\n  stride\n) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    assert(false, 13); // Invalid corner\n  }\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\n    center,\n    resolution,\n    rotation,\n    size\n  );\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3),\n    Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3),\n    Math.max(y0, y1, y2, y3),\n    dest\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = (resolution * size[0]) / 2;\n  const dy = (resolution * size[1]) / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [\n    x - xCos + ySin,\n    y - xSin - yCos,\n    x - xCos - ySin,\n    y - xSin + yCos,\n    x + xCos - ySin,\n    y + xSin + yCos,\n    x + xCos + ySin,\n    y + xSin - yCos,\n    x - xCos + ySin,\n    y - xSin - yCos,\n  ];\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[2] &&\n    extent1[2] >= extent2[0] &&\n    extent1[1] <= extent2[3] &&\n    extent1[3] >= extent2[1]\n  );\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (\n    startRel === Relationship.INTERSECTING ||\n    endRel === Relationship.INTERSECTING\n  ) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.RIGHT) &&\n      !(startRel & Relationship.RIGHT)\n    ) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.BELOW) &&\n      !(startRel & Relationship.BELOW)\n    ) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.LEFT) &&\n      !(startRel & Relationship.LEFT)\n    ) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, dest, stops) {\n  let coordinates = [];\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(\n        extent[0] + (width * i) / stops,\n        extent[1],\n        extent[2],\n        extent[1] + (height * i) / stops,\n        extent[2] - (width * i) / stops,\n        extent[3],\n        extent[0],\n        extent[3] - (height * i) / stops\n      );\n    }\n  } else {\n    coordinates = [\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, dest);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (\n    projection.canWrapX() &&\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\n  ) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor(\n      (center[0] - projectionExtent[0]) / worldWidth\n    );\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n\n    if (getWidth(extent) > worldWidth) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    } else if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\n      ];\n    } else if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\n      ];\n    }\n  }\n\n  return [extent];\n}\n","/**\n * @module ol/ImageTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\nimport {listenImage} from './Image.js';\n\nclass ImageTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\n   */\n  constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\n    super(tileCoord, state, options);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = crossOrigin;\n\n    /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    this.key = src;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n  }\n\n  /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\n   */\n  setImage(element) {\n    this.image_ = element;\n    this.state = TileState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = TileState.ERROR;\n    this.unlistenImage_();\n    this.image_ = getBlankImage();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    const image = /** @type {HTMLImageElement} */ (this.image_);\n    if (image.naturalWidth && image.naturalHeight) {\n      this.state = TileState.LOADED;\n    } else {\n      this.state = TileState.EMPTY;\n    }\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   *\n   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\n   * that checks for error status codes and reloads only when the status code is\n   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\n   * made already:\n   *\n   * ```js\n   * const retryCodes = [408, 429, 500, 502, 503, 504];\n   * const retries = {};\n   * source.setTileLoadFunction((tile, src) => {\n   *   const image = tile.getImage();\n   *   fetch(src)\n   *     .then((response) => {\n   *       if (retryCodes.includes(response.status)) {\n   *         retries[src] = (retries[src] || 0) + 1;\n   *         if (retries[src] <= 3) {\n   *           setTimeout(() => tile.load(), retries[src] * 1000);\n   *         }\n   *         return Promise.reject();\n   *       }\n   *       return response.blob();\n   *     })\n   *     .then((blob) => {\n   *       const imageUrl = URL.createObjectURL(blob);\n   *       image.src = imageUrl;\n   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\n   *     })\n   *     .catch(() => tile.setState(3)); // error\n   * });\n   * ```\n   *\n   * @api\n   */\n  load() {\n    if (this.state == TileState.ERROR) {\n      this.state = TileState.IDLE;\n      this.image_ = new Image();\n      if (this.crossOrigin_ !== null) {\n        this.image_.crossOrigin = this.crossOrigin_;\n      }\n    }\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      this.tileLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\nfunction getBlankImage() {\n  const ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\n\nexport default ImageTile;\n","/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport {IMAGE_DECODE} from './has.js';\nimport {getHeight} from './extent.js';\nimport {listenOnce, unlistenByKey} from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\n\nclass ImageWrapper extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   * @param {CanvasRenderingContext2D} [context] Canvas context. When provided, the image will be\n   *    drawn into the context's canvas, and `getImage()` will return the canvas once the image\n   *    has finished loading.\n   */\n  constructor(\n    extent,\n    resolution,\n    pixelRatio,\n    src,\n    crossOrigin,\n    imageLoadFunction,\n    context\n  ) {\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    if (\n      this.state == ImageState.LOADED &&\n      this.context_ &&\n      !(this.image_ instanceof HTMLCanvasElement)\n    ) {\n      const canvas = this.context_.canvas;\n      canvas.width = this.image_.width;\n      canvas.height = this.image_.height;\n      this.context_.drawImage(this.image_, 0, 0);\n      this.image_ = this.context_.canvas;\n    }\n    return this.image_;\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  setImage(image) {\n    this.image_ = image;\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, function () {\n      loaded = true;\n      if (!decoding) {\n        loadHandler();\n      }\n    }),\n  ];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img\n      .decode()\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          if (loaded) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\nexport default ImageWrapper;\n","/**\n * @module ol/reproj/common\n */\n\n/**\n * Default maximum allowed threshold  (in pixels) for reprojection\n * triangulation.\n * @type {number}\n */\nexport const ERROR_THRESHOLD = 0.5;\n","/**\n * @module ol/proj/Units\n */\n\n/**\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\n * Projection units.\n */\n\n/**\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\n * @type {Object<number, Units>}\n */\nconst unitByCode = {\n  '9001': 'm',\n  '9002': 'ft',\n  '9003': 'us-ft',\n  '9101': 'radians',\n  '9102': 'degrees',\n};\n\n/**\n * @param {number} code Unit code.\n * @return {Units} Units.\n */\nexport function fromCode(code) {\n  return unitByCode[code];\n}\n\n/**\n * @typedef {Object} MetersPerUnitLookup\n * @property {number} radians Radians\n * @property {number} degrees Degrees\n * @property {number} ft  Feet\n * @property {number} m Meters\n * @property {number} us-ft US feet\n */\n\n/**\n * Meters per unit lookup table.\n * @const\n * @type {MetersPerUnitLookup}\n * @api\n */\nexport const METERS_PER_UNIT = {\n  // use the radius of the Normal sphere\n  'radians': 6370997 / (2 * Math.PI),\n  'degrees': (2 * Math.PI * 6370997) / 360,\n  'ft': 0.3048,\n  'm': 1,\n  'us-ft': 1200 / 3937,\n};\n","/**\n * @module ol/proj/Projection\n */\nimport {METERS_PER_UNIT} from './Units.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */\nclass Projection {\n  /**\n   * @param {Options} options Projection options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {string}\n     */\n    this.code_ = options.code;\n\n    /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */\n    this.units_ = /** @type {import(\"./Units.js\").Units} */ (options.units);\n\n    /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = options.extent !== undefined ? options.extent : null;\n\n    /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.worldExtent_ =\n      options.worldExtent !== undefined ? options.worldExtent : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.axisOrientation_ =\n      options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.global_ = options.global !== undefined ? options.global : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.canWrapX_ = !!(this.global_ && this.extent_);\n\n    /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */\n    this.getPointResolutionFunc_ = options.getPointResolution;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.defaultTileGrid_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.metersPerUnit_ = options.metersPerUnit;\n  }\n\n  /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */\n  canWrapX() {\n    return this.canWrapX_;\n  }\n\n  /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */\n  getCode() {\n    return this.code_;\n  }\n\n  /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */\n  getUnits() {\n    return this.units_;\n  }\n\n  /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */\n  getMetersPerUnit() {\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n  }\n\n  /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getWorldExtent() {\n    return this.worldExtent_;\n  }\n\n  /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */\n  getAxisOrientation() {\n    return this.axisOrientation_;\n  }\n\n  /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */\n  isGlobal() {\n    return this.global_;\n  }\n\n  /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */\n  setGlobal(global) {\n    this.global_ = global;\n    this.canWrapX_ = !!(global && this.extent_);\n  }\n\n  /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */\n  getDefaultTileGrid() {\n    return this.defaultTileGrid_;\n  }\n\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */\n  setDefaultTileGrid(tileGrid) {\n    this.defaultTileGrid_ = tileGrid;\n  }\n\n  /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  setExtent(extent) {\n    this.extent_ = extent;\n    this.canWrapX_ = !!(this.global_ && extent);\n  }\n\n  /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */\n  setWorldExtent(worldExtent) {\n    this.worldExtent_ = worldExtent;\n  }\n\n  /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */\n  setGetPointResolution(func) {\n    this.getPointResolutionFunc_ = func;\n  }\n\n  /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */\n  getPointResolutionFunc() {\n    return this.getPointResolutionFunc_;\n  }\n}\n\nexport default Projection;\n","/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      },\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (HALF_SIZE * input[i]) / 180;\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (180 * input[i]) / HALF_SIZE;\n    output[i + 1] =\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n  }\n  return output;\n}\n","/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-180, -90, 180, 90];\n\n/**\n * @const\n * @type {number}\n */\nexport const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nclass EPSG4326Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */\n  constructor(code, axisOrientation) {\n    super({\n      code: code,\n      units: 'degrees',\n      extent: EXTENT,\n      axisOrientation: axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT,\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG4326Projection('CRS:84'),\n  new EPSG4326Projection('EPSG:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),\n];\n","/**\n * @module ol/proj/projections\n */\n\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nlet cache = {};\n\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n  cache = {};\n}\n\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */\nexport function get(code) {\n  return (\n    cache[code] ||\n    cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n    null\n  );\n}\n\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n  cache[code] = projection;\n}\n","/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  let transform;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n}\n","/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}\n","/**\n * @module ol/coordinate\n */\nimport {getWidth} from './extent.js';\nimport {modulo, toFixed} from './math.js';\nimport {padNumber} from './string.js';\n\n/**\n * An array of numbers representing an xy coordinate. Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  const d = Math.sqrt(dx * dx + dy * dy);\n\n  const x = x0 + (r * dx) / d;\n  const y = y0 + (r * dy) / d;\n\n  return [x, y];\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along =\n    dx === 0 && dy === 0\n      ? 0\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  let x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY();\n *     const out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY(2);\n *     const out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, fractionDigits);\n    }\n  );\n}\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const decimals = fractionDigits || 0;\n\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  let hdms = deg + '\\u00b0';\n  if (min !== 0 || sec !== 0) {\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\n  }\n  if (sec !== 0) {\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\n  }\n  if (normalizedDegrees !== 0) {\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n  }\n\n  return hdms;\n}\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(fractionDigits));\n  }\n  return '';\n}\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, fractionDigits) {\n  if (coordinate) {\n    return (\n      degreesToStringHDMS('NS', coordinate[1], fractionDigits) +\n      ' ' +\n      degreesToStringHDMS('EW', coordinate[0], fractionDigits)\n    );\n  }\n  return '';\n}\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, fractionDigits) {\n  return format(coordinate, '{x}, {y}', fractionDigits);\n}\n\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    const worldWidth = getWidth(projection.getExtent());\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\n  const projectionExtent = projection.getExtent();\n  let worldsAway = 0;\n  if (\n    projection.canWrapX() &&\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\n  ) {\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor(\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth\n    );\n  }\n  return worldsAway;\n}\n","/**\n * @module ol/sphere\n */\nimport {toDegrees, toRadians} from './math.js';\n\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport const DEFAULT_RADIUS = 6371008.8;\n\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lat2 = toRadians(c2[1]);\n  const deltaLatBy2 = (lat2 - lat1) / 2;\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  const a =\n    Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n    Math.sin(deltaLonBy2) *\n      Math.sin(deltaLonBy2) *\n      Math.cos(lat1) *\n      Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n  let length = 0;\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n}\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let length = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint': {\n      break;\n    }\n    case 'LineString':\n    case 'LinearRing': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      length = getLengthInternal(coordinates, radius);\n      break;\n    }\n    case 'MultiLineString':\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        length += getLengthInternal(coordinates[i], radius);\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        for (j = 0, jj = coords.length; j < jj; ++j) {\n          length += getLengthInternal(coords[j], radius);\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        length += getLength(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return length;\n}\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area +=\n      toRadians(x2 - x1) *\n      (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return (area * radius * radius) / 2.0;\n}\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let area = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n    case 'LinearRing': {\n      break;\n    }\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        area += Math.abs(getAreaInternal(coords[0], radius));\n        for (j = 1, jj = coords.length; j < jj; ++j) {\n          area -= Math.abs(getAreaInternal(coords[j], radius));\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        area += getArea(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return area;\n}\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lon1 = toRadians(c1[0]);\n  const dByR = distance / radius;\n  const lat = Math.asin(\n    Math.sin(lat1) * Math.cos(dByR) +\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing)\n  );\n  const lon =\n    lon1 +\n    Math.atan2(\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat)\n    );\n  return [toDegrees(lon), toDegrees(lat)];\n}\n","/**\n * @module ol/console\n */\n\n/**\n * @typedef {'info'|'warn'|'error'|'none'} Level\n */\n\n/**\n * @type {Object<Level, number>}\n */\nconst levels = {\n  info: 1,\n  warn: 2,\n  error: 3,\n  none: 4,\n};\n\n/**\n * @type {number}\n */\nlet level = levels.info;\n\n/**\n * Set the logging level.  By default, the level is set to 'info' and all\n * messages will be logged.  Set to 'warn' to only display warnings and errors.\n * Set to 'error' to only display errors.  Set to 'none' to silence all messages.\n *\n * @param {Level} l The new level.\n */\nexport function setLevel(l) {\n  level = levels[l];\n}\n\nexport function log(...args) {\n  if (level > levels.info) {\n    return;\n  }\n  console.log(...args); // eslint-disable-line no-console\n}\n\nexport function warn(...args) {\n  if (level > levels.warn) {\n    return;\n  }\n  console.warn(...args); // eslint-disable-line no-console\n}\n\nexport function error(...args) {\n  if (level > levels.error) {\n    return;\n  }\n  console.error(...args); // eslint-disable-line no-console\n}\n","/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport {\n  PROJECTIONS as EPSG3857_PROJECTIONS,\n  fromEPSG4326,\n  toEPSG4326,\n} from './proj/epsg3857.js';\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\nimport {METERS_PER_UNIT} from './proj/Units.js';\nimport {\n  add as addProj,\n  clear as clearProj,\n  get as getProj,\n} from './proj/projections.js';\nimport {\n  add as addTransformFunc,\n  clear as clearTransformFuncs,\n  get as getTransformFunc,\n} from './proj/transforms.js';\nimport {applyTransform, getWidth} from './extent.js';\nimport {clamp, modulo} from './math.js';\nimport {equals, getWorldsAway} from './coordinate.js';\nimport {getDistance} from './sphere.js';\nimport {warn} from './console.js';\n\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\n\nexport {METERS_PER_UNIT};\n\nexport {Projection};\n\nlet showCoordinateWarning = true;\n\n/**\n * @param {boolean} [disable = true] Disable console info about `useGeographic()`\n */\nexport function disableCoordinateWarning(disable) {\n  const hide = disable === undefined ? true : disable;\n  showCoordinateWarning = !hide;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, output) {\n  if (output !== undefined) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    output = output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, output) {\n  if (output !== undefined && input !== output) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    input = output;\n  }\n  return input;\n}\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string'\n    ? getProj(/** @type {string} */ (projectionLike))\n    : /** @type {Projection} */ (projectionLike) || null;\n}\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, units) {\n  projection = get(projection);\n  let pointResolution;\n  const getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n    if (units && units !== projection.getUnits()) {\n      const metersPerUnit = projection.getMetersPerUnit();\n      if (metersPerUnit) {\n        pointResolution =\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[units];\n      }\n    }\n  } else {\n    const projUnits = projection.getUnits();\n    if ((projUnits == 'degrees' && !units) || units == 'degrees') {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      const toEPSG4326 = getTransformFromProjections(\n        projection,\n        get('EPSG:4326')\n      );\n      if (toEPSG4326 === identityTransform && projUnits !== 'degrees') {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        let vertices = [\n          point[0] - resolution / 2,\n          point[1],\n          point[0] + resolution / 2,\n          point[1],\n          point[0],\n          point[1] - resolution / 2,\n          point[0],\n          point[1] + resolution / 2,\n        ];\n        vertices = toEPSG4326(vertices, vertices, 2);\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n      const metersPerUnit = units\n        ? METERS_PER_UNIT[units]\n        : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(\n  projections1,\n  projections2,\n  forwardTransform,\n  inverseTransform\n) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  } else if (typeof projection === 'string') {\n    return get(projection);\n  }\n  return /** @type {Projection} */ (projection);\n}\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [output] Output.\n     * @param {number} [dimension] Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, output, dimension) {\n      const length = input.length;\n      dimension = dimension !== undefined ? dimension : 2;\n      output = output !== undefined ? output : new Array(length);\n      for (let i = 0; i < length; i += dimension) {\n        const point = coordTransform(input.slice(i, i + dimension));\n        const pointLength = point.length;\n        for (let j = 0, jj = dimension; j < jj; ++j) {\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n      }\n      return output;\n    }\n  );\n}\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\n *     source.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  const sourceProj = get(source);\n  const destProj = get(destination);\n  addTransformFunc(\n    sourceProj,\n    destProj,\n    createTransformFromCoordinateTransform(forward)\n  );\n  addTransformFunc(\n    destProj,\n    sourceProj,\n    createTransformFromCoordinateTransform(inverse)\n  );\n}\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, projection) {\n  disableCoordinateWarning();\n  return transform(\n    coordinate,\n    'EPSG:4326',\n    projection !== undefined ? projection : 'EPSG:3857'\n  );\n}\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, projection) {\n  const lonLat = transform(\n    coordinate,\n    projection !== undefined ? projection : 'EPSG:3857',\n    'EPSG:4326'\n  );\n  const lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  }\n  const transformFunc = getTransformFromProjections(projection1, projection2);\n  return transformFunc === cloneTransform && equalUnits;\n}\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(\n  sourceProjection,\n  destinationProjection\n) {\n  const sourceCode = sourceProjection.getCode();\n  const destinationCode = destinationProjection.getCode();\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n  return transformFunc;\n}\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  const sourceProjection = get(source);\n  const destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, stops) {\n  const transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, stops);\n}\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(\n  point,\n  sourceProjection,\n  destinationProjection\n) {\n  const transformFunc = getTransformFromProjections(\n    sourceProjection,\n    destinationProjection\n  );\n  return transformFunc(point);\n}\n\n/**\n * @type {Projection|null}\n */\nlet userProjection = null;\n\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n\n/**\n * Clear the user projection if set.\n * @api\n */\nexport function clearUserProjection() {\n  userProjection = null;\n}\n\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */\nexport function getUserProjection() {\n  return userProjection;\n}\n\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.  This includes all API\n * methods except for those interacting with tile grids.\n * @api\n */\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, sourceProjection, userProjection);\n}\n\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    if (\n      showCoordinateWarning &&\n      !equals(coordinate, [0, 0]) &&\n      coordinate[0] >= -180 &&\n      coordinate[0] <= 180 &&\n      coordinate[1] >= -90 &&\n      coordinate[1] <= 90\n    ) {\n      showCoordinateWarning = false;\n      warn(\n        'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.'\n      );\n    }\n    return coordinate;\n  }\n  return transform(coordinate, userProjection, destProjection);\n}\n\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, userProjection, destProjection);\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */\nexport function toUserResolution(resolution, sourceProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceUnits = get(sourceProjection).getUnits();\n  const userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits\n    ? (resolution * METERS_PER_UNIT[sourceUnits]) / METERS_PER_UNIT[userUnits]\n    : resolution;\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */\nexport function fromUserResolution(resolution, destProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceUnits = get(destProjection).getUnits();\n  const userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits\n    ? (resolution * METERS_PER_UNIT[userUnits]) / METERS_PER_UNIT[sourceUnits]\n    : resolution;\n}\n\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destiation).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destiation).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    let transformed, worldsAway;\n    if (sourceProj.canWrapX()) {\n      const sourceExtent = sourceProj.getExtent();\n      const sourceExtentWidth = getWidth(sourceExtent);\n      coord = coord.slice(0);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n      if (worldsAway) {\n        // Move x to the real world\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n      }\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\n      transformed = transform(coord);\n    } else {\n      transformed = transform(coord);\n    }\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n    return transformed;\n  };\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(\n    EPSG4326_PROJECTIONS,\n    EPSG3857_PROJECTIONS,\n    fromEPSG4326,\n    toEPSG4326\n  );\n}\n\naddCommon();\n","/**\n * @module ol/reproj/Triangulation\n */\nimport {\n  boundingExtent,\n  createEmpty,\n  extendCoordinate,\n  getArea,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n  getWidth,\n  intersects,\n} from '../extent.js';\nimport {getTransform} from '../proj.js';\nimport {modulo} from '../math.js';\n\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\n */\n\n/**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */\nconst MAX_SUBDIVISION = 10;\n\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */\nconst MAX_TRIANGLE_WIDTH = 0.25;\n\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */\nclass Triangulation {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n   * @param {number} errorThreshold Acceptable error (in source units).\n   * @param {?number} destinationResolution The (optional) resolution of the destination.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    maxSourceExtent,\n    errorThreshold,\n    destinationResolution\n  ) {\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.sourceProj_ = sourceProj;\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.targetProj_ = targetProj;\n\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\n    let transformInvCache = {};\n    const transformInv = getTransform(this.targetProj_, this.sourceProj_);\n\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n     * @private\n     */\n    this.transformInv_ = function (c) {\n      const key = c[0] + '/' + c[1];\n      if (!transformInvCache[key]) {\n        transformInvCache[key] = transformInv(c);\n      }\n      return transformInvCache[key];\n    };\n\n    /**\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n\n    /**\n     * @type {Array<Triangle>}\n     * @private\n     */\n    this.triangles_ = [];\n\n    /**\n     * Indicates that the triangulation crosses edge of the source projection.\n     * @type {boolean}\n     * @private\n     */\n    this.wrapsXInSource_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.canWrapXInSource_ =\n      this.sourceProj_.canWrapX() &&\n      !!maxSourceExtent &&\n      !!this.sourceProj_.getExtent() &&\n      getWidth(maxSourceExtent) == getWidth(this.sourceProj_.getExtent());\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent()\n      ? getWidth(this.sourceProj_.getExtent())\n      : null;\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.targetWorldWidth_ = this.targetProj_.getExtent()\n      ? getWidth(this.targetProj_.getExtent())\n      : null;\n\n    const destinationTopLeft = getTopLeft(targetExtent);\n    const destinationTopRight = getTopRight(targetExtent);\n    const destinationBottomRight = getBottomRight(targetExtent);\n    const destinationBottomLeft = getBottomLeft(targetExtent);\n    const sourceTopLeft = this.transformInv_(destinationTopLeft);\n    const sourceTopRight = this.transformInv_(destinationTopRight);\n    const sourceBottomRight = this.transformInv_(destinationBottomRight);\n    const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n\n    /*\n     * The maxSubdivision controls how many splittings of the target area can\n     * be done. The idea here is to do a linear mapping of the target areas\n     * but the actual overal reprojection (can be) extremely non-linear. The\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\n     * tile size. However this function is also called to remap canvas rendered\n     * layers which can be much larger. This calculation increases the maxSubdivision\n     * value by the right factor so that each 256x256 pixel area has\n     * MAX_SUBDIVISION divisions.\n     */\n    const maxSubdivision =\n      MAX_SUBDIVISION +\n      (destinationResolution\n        ? Math.max(\n            0,\n            Math.ceil(\n              Math.log2(\n                getArea(targetExtent) /\n                  (destinationResolution * destinationResolution * 256 * 256)\n              )\n            )\n          )\n        : 0);\n\n    this.addQuad_(\n      destinationTopLeft,\n      destinationTopRight,\n      destinationBottomRight,\n      destinationBottomLeft,\n      sourceTopLeft,\n      sourceTopRight,\n      sourceBottomRight,\n      sourceBottomLeft,\n      maxSubdivision\n    );\n\n    if (this.wrapsXInSource_) {\n      let leftBound = Infinity;\n      this.triangles_.forEach(function (triangle, i, arr) {\n        leftBound = Math.min(\n          leftBound,\n          triangle.source[0][0],\n          triangle.source[1][0],\n          triangle.source[2][0]\n        );\n      });\n\n      // Shift triangles to be as close to `leftBound` as possible\n      // (if the distance is more than `worldWidth / 2` it can be closer.\n      this.triangles_.forEach((triangle) => {\n        if (\n          Math.max(\n            triangle.source[0][0],\n            triangle.source[1][0],\n            triangle.source[2][0]\n          ) -\n            leftBound >\n          this.sourceWorldWidth_ / 2\n        ) {\n          const newTriangle = [\n            [triangle.source[0][0], triangle.source[0][1]],\n            [triangle.source[1][0], triangle.source[1][1]],\n            [triangle.source[2][0], triangle.source[2][1]],\n          ];\n          if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {\n            newTriangle[0][0] -= this.sourceWorldWidth_;\n          }\n          if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {\n            newTriangle[1][0] -= this.sourceWorldWidth_;\n          }\n          if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {\n            newTriangle[2][0] -= this.sourceWorldWidth_;\n          }\n\n          // Rarely (if the extent contains both the dateline and prime meridian)\n          // the shift can in turn break some triangles.\n          // Detect this here and don't shift in such cases.\n          const minX = Math.min(\n            newTriangle[0][0],\n            newTriangle[1][0],\n            newTriangle[2][0]\n          );\n          const maxX = Math.max(\n            newTriangle[0][0],\n            newTriangle[1][0],\n            newTriangle[2][0]\n          );\n          if (maxX - minX < this.sourceWorldWidth_ / 2) {\n            triangle.source = newTriangle;\n          }\n        }\n      });\n    }\n\n    transformInvCache = {};\n  }\n\n  /**\n   * Adds triangle to the triangulation.\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @private\n   */\n  addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\n    this.triangles_.push({\n      source: [aSrc, bSrc, cSrc],\n      target: [a, b, c],\n    });\n  }\n\n  /**\n   * Adds quad (points in clock-wise order) to the triangulation\n   * (and reprojects the vertices) if valid.\n   * Performs quad subdivision if needed to increase precision.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n   * @private\n   */\n  addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n    const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\n    const sourceCoverageX = this.sourceWorldWidth_\n      ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_\n      : null;\n    const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);\n\n    // when the quad is wrapped in the source projection\n    // it covers most of the projection extent, but not fully\n    const wrapsX =\n      this.sourceProj_.canWrapX() &&\n      sourceCoverageX > 0.5 &&\n      sourceCoverageX < 1;\n\n    let needsSubdivision = false;\n\n    if (maxSubdivision > 0) {\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n        const targetQuadExtent = boundingExtent([a, b, c, d]);\n        const targetCoverageX =\n          getWidth(targetQuadExtent) / this.targetWorldWidth_;\n        needsSubdivision =\n          targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\n        needsSubdivision =\n          sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n    }\n\n    if (!needsSubdivision && this.maxSourceExtent_) {\n      if (\n        isFinite(sourceQuadExtent[0]) &&\n        isFinite(sourceQuadExtent[1]) &&\n        isFinite(sourceQuadExtent[2]) &&\n        isFinite(sourceQuadExtent[3])\n      ) {\n        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\n          // whole quad outside source projection extent -> ignore\n          return;\n        }\n      }\n    }\n\n    let isNotFinite = 0;\n\n    if (!needsSubdivision) {\n      if (\n        !isFinite(aSrc[0]) ||\n        !isFinite(aSrc[1]) ||\n        !isFinite(bSrc[0]) ||\n        !isFinite(bSrc[1]) ||\n        !isFinite(cSrc[0]) ||\n        !isFinite(cSrc[1]) ||\n        !isFinite(dSrc[0]) ||\n        !isFinite(dSrc[1])\n      ) {\n        if (maxSubdivision > 0) {\n          needsSubdivision = true;\n        } else {\n          // It might be the case that only 1 of the points is infinite. In this case\n          // we can draw a single triangle with the other three points\n          isNotFinite =\n            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +\n            (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +\n            (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +\n            (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n          if (\n            isNotFinite != 1 &&\n            isNotFinite != 2 &&\n            isNotFinite != 4 &&\n            isNotFinite != 8\n          ) {\n            return;\n          }\n        }\n      }\n    }\n\n    if (maxSubdivision > 0) {\n      if (!needsSubdivision) {\n        const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\n        const centerSrc = this.transformInv_(center);\n\n        let dx;\n        if (wrapsX) {\n          const centerSrcEstimX =\n            (modulo(aSrc[0], sourceWorldWidth) +\n              modulo(cSrc[0], sourceWorldWidth)) /\n            2;\n          dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\n        } else {\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n        }\n        const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n        const centerSrcErrorSquared = dx * dx + dy * dy;\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n      }\n      if (needsSubdivision) {\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n          // split horizontally (top & bottom)\n          const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\n          const bcSrc = this.transformInv_(bc);\n          const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\n          const daSrc = this.transformInv_(da);\n\n          this.addQuad_(\n            a,\n            b,\n            bc,\n            da,\n            aSrc,\n            bSrc,\n            bcSrc,\n            daSrc,\n            maxSubdivision - 1\n          );\n          this.addQuad_(\n            da,\n            bc,\n            c,\n            d,\n            daSrc,\n            bcSrc,\n            cSrc,\n            dSrc,\n            maxSubdivision - 1\n          );\n        } else {\n          // split vertically (left & right)\n          const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\n          const abSrc = this.transformInv_(ab);\n          const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\n          const cdSrc = this.transformInv_(cd);\n\n          this.addQuad_(\n            a,\n            ab,\n            cd,\n            d,\n            aSrc,\n            abSrc,\n            cdSrc,\n            dSrc,\n            maxSubdivision - 1\n          );\n          this.addQuad_(\n            ab,\n            b,\n            c,\n            cd,\n            abSrc,\n            bSrc,\n            cSrc,\n            cdSrc,\n            maxSubdivision - 1\n          );\n        }\n        return;\n      }\n    }\n\n    if (wrapsX) {\n      if (!this.canWrapXInSource_) {\n        return;\n      }\n      this.wrapsXInSource_ = true;\n    }\n\n    // Exactly zero or one of *Src is not finite\n    // The triangles must have the diagonal line as the first side\n    // This is to allow easy code in reproj.s to make it straight for broken\n    // browsers that can't handle diagonal clipping\n    if ((isNotFinite & 0xb) == 0) {\n      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n    }\n    if ((isNotFinite & 0xe) == 0) {\n      this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n    }\n    if (isNotFinite) {\n      // Try the other two triangles\n      if ((isNotFinite & 0xd) == 0) {\n        this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n      }\n      if ((isNotFinite & 0x7) == 0) {\n        this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n      }\n    }\n  }\n\n  /**\n   * Calculates extent of the `source` coordinates from all the triangles.\n   *\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\n   */\n  calculateSourceExtent() {\n    const extent = createEmpty();\n\n    this.triangles_.forEach(function (triangle, i, arr) {\n      const src = triangle.source;\n      extendCoordinate(extent, src[0]);\n      extendCoordinate(extent, src[1]);\n      extendCoordinate(extent, src[2]);\n    });\n\n    return extent;\n  }\n\n  /**\n   * @return {Array<Triangle>} Array of the calculated triangles.\n   */\n  getTriangles() {\n    return this.triangles_;\n  }\n}\n\nexport default Triangulation;\n","/**\n * @module ol/reproj\n */\nimport {\n  containsCoordinate,\n  createEmpty,\n  extend,\n  forEachCorner,\n  getCenter,\n  getHeight,\n  getTopLeft,\n  getWidth,\n} from './extent.js';\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\nimport {getPointResolution, transform} from './proj.js';\nimport {solveLinearSystem} from './math.js';\n\nlet brokenDiagonalRendering_;\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return (\n    Math.abs(data[offset * 4] - 210) > 2 ||\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\n  );\n}\n\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ =\n      verifyBrokenDiagonalRendering(data, 0) ||\n      verifyBrokenDiagonalRendering(data, 4) ||\n      verifyBrokenDiagonalRendering(data, 8);\n    releaseCanvas(ctx);\n    canvasPool.push(ctx.canvas);\n  }\n\n  return brokenDiagonalRendering_;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(\n  sourceProj,\n  targetProj,\n  targetCenter,\n  targetResolution\n) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\n\n  // calculate the ideal resolution of the source data\n  let sourceResolution = getPointResolution(\n    targetProj,\n    targetResolution,\n    targetCenter\n  );\n\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  }\n\n  // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n  const sourceExtent = sourceProj.getExtent();\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor =\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\n      sourceResolution;\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(\n  sourceProj,\n  targetProj,\n  targetExtent,\n  targetResolution\n) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(\n    sourceProj,\n    targetProj,\n    targetCenter,\n    targetResolution\n  );\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(\n        sourceProj,\n        targetProj,\n        corner,\n        targetResolution\n      );\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [renderEdges] Render reprojection edges.\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(\n  width,\n  height,\n  pixelRatio,\n  sourceResolution,\n  sourceExtent,\n  targetResolution,\n  targetExtent,\n  triangulation,\n  sources,\n  gutter,\n  renderEdges,\n  interpolate\n) {\n  const context = createCanvasContext2D(\n    Math.round(pixelRatio * width),\n    Math.round(pixelRatio * height),\n    canvasPool\n  );\n\n  if (!interpolate) {\n    context.imageSmoothingEnabled = false;\n  }\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n\n  const canvasWidthInUnits = getWidth(sourceDataExtent);\n  const canvasHeightInUnits = getHeight(sourceDataExtent);\n  const stitchContext = createCanvasContext2D(\n    Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution),\n    Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution),\n    canvasPool\n  );\n\n  if (!interpolate) {\n    stitchContext.imageSmoothingEnabled = false;\n  }\n\n  const stitchScale = pixelRatio / sourceResolution;\n\n  sources.forEach(function (src, i, arr) {\n    const xPos = src.extent[0] - sourceDataExtent[0];\n    const yPos = -(src.extent[3] - sourceDataExtent[3]);\n    const srcWidth = getWidth(src.extent);\n    const srcHeight = getHeight(src.extent);\n\n    // This test should never fail -- but it does. Need to find a fix the upstream condition\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(\n        src.image,\n        gutter,\n        gutter,\n        src.image.width - 2 * gutter,\n        src.image.height - 2 * gutter,\n        xPos * stitchScale,\n        yPos * stitchScale,\n        srcWidth * stitchScale,\n        srcHeight * stitchScale\n      );\n    }\n  });\n\n  const targetTopLeft = getTopLeft(targetExtent);\n\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n      y0 = source[0][1];\n    let x1 = source[1][0],\n      y1 = source[1][1];\n    let x2 = source[2][0],\n      y2 = source[2][1];\n    // Make sure that everything is on pixel boundaries\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(\n      -(target[0][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(\n      -(target[1][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(\n      -(target[2][1] - targetTopLeft[1]) / targetResolution\n    );\n\n    // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n\n    const augmentedMatrix = [\n      [x1, y1, 0, 0, u1 - u0],\n      [x2, y2, 0, 0, u2 - u0],\n      [0, 0, x1, y1, v1 - v0],\n      [0, 0, x2, y2, v2 - v0],\n    ];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || !interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1);\n      // This is the diagonal line. Do it in 4 steps\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(\n          u1 + pixelRound(((step + 1) * ud) / steps),\n          v1 + pixelRound((step * vd) / (steps - 1))\n        );\n        // Go vertically\n        if (step != steps - 1) {\n          context.lineTo(\n            u1 + pixelRound(((step + 1) * ud) / steps),\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1))\n          );\n        }\n      }\n      // We are almost at u0r, v0r\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n\n    context.transform(\n      affineCoefs[0],\n      affineCoefs[2],\n      affineCoefs[1],\n      affineCoefs[3],\n      u0,\n      v0\n    );\n\n    context.translate(\n      sourceDataExtent[0] - sourceNumericalShiftX,\n      sourceDataExtent[3] - sourceNumericalShiftY\n    );\n\n    context.scale(\n      sourceResolution / pixelRatio,\n      -sourceResolution / pixelRatio\n    );\n\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n\n  releaseCanvas(stitchContext);\n  canvasPool.push(stitchContext.canvas);\n\n  if (renderEdges) {\n    context.save();\n\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n\n    context.restore();\n  }\n  return context.canvas;\n}\n","/**\n * @module ol/reproj/Tile\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceExtentResolution,\n  canvasPool,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {clamp} from '../math.js';\nimport {getArea, getIntersection} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {releaseCanvas} from '../dom.js';\n\n/**\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\nclass ReprojTile extends Tile {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [renderEdges] Render reprojection edges.\n   * @param {boolean} [interpolate] Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    sourceTileGrid,\n    targetProj,\n    targetTileGrid,\n    tileCoord,\n    wrappedTileCoord,\n    pixelRatio,\n    gutter,\n    getTileFunction,\n    errorThreshold,\n    renderEdges,\n    interpolate\n  ) {\n    super(tileCoord, TileState.IDLE, {interpolate: !!interpolate});\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = gutter;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<import(\"../ImageTile.js\").default>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    const targetExtent = targetTileGrid.getTileCoordExtent(\n      this.wrappedTileCoord_\n    );\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const sourceProjExtent = sourceProj.getExtent();\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = targetTileGrid.getResolution(\n      this.wrappedTileCoord_[0]\n    );\n\n    const sourceResolution = calculateSourceExtentResolution(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      targetResolution\n    );\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels =\n      errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(\n          sourceExtent[1],\n          maxSourceExtent[1],\n          maxSourceExtent[3]\n        );\n        sourceExtent[3] = clamp(\n          sourceExtent[3],\n          maxSourceExtent[1],\n          maxSourceExtent[3]\n        );\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\n        sourceExtent,\n        this.sourceZ_\n      );\n\n      for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n        for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n          const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n          if (tile) {\n            this.sourceTiles_.push(tile);\n          }\n        }\n      }\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sources = [];\n    this.sourceTiles_.forEach((tile) => {\n      if (tile && tile.getState() == TileState.LOADED) {\n        sources.push({\n          extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\n          image: tile.getImage(),\n        });\n      }\n    });\n    this.sourceTiles_.length = 0;\n\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const width = typeof size === 'number' ? size : size[0];\n      const height = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(\n        this.sourceZ_\n      );\n\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n        this.wrappedTileCoord_\n      );\n\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.pixelRatio_,\n        sourceResolution,\n        this.sourceTileGrid_.getExtent(),\n        targetResolution,\n        targetExtent,\n        this.triangulation_,\n        sources,\n        this.gutter_,\n        this.renderEdges_,\n        this.interpolate\n      );\n\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n\n      let leftToLoad = 0;\n\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach((tile) => {\n        const state = tile.getState();\n        if (state == TileState.IDLE || state == TileState.LOADING) {\n          leftToLoad++;\n\n          const sourceListenKey = listen(\n            tile,\n            EventType.CHANGE,\n            function (e) {\n              const state = tile.getState();\n              if (\n                state == TileState.LOADED ||\n                state == TileState.ERROR ||\n                state == TileState.EMPTY\n              ) {\n                unlistenByKey(sourceListenKey);\n                leftToLoad--;\n                if (leftToLoad === 0) {\n                  this.unlistenSources_();\n                  this.reproject_();\n                }\n              }\n            },\n            this\n          );\n          this.sourcesListenerKeys_.push(sourceListenKey);\n        }\n      });\n\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      } else {\n        this.sourceTiles_.forEach(function (tile, i, arr) {\n          const state = tile.getState();\n          if (state == TileState.IDLE) {\n            tile.load();\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n\n  /**\n   * Remove from the cache due to expiry\n   */\n  release() {\n    if (this.canvas_) {\n      releaseCanvas(this.canvas_.getContext('2d'));\n      canvasPool.push(this.canvas_);\n      this.canvas_ = null;\n    }\n    super.release();\n  }\n}\n\nexport default ReprojTile;\n","/**\n * @module ol/structs/LRUCache\n */\n\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * Expire the cache.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n  peek(key) {\n    if (!this.containsKey(key)) {\n      return undefined;\n    }\n    return this.entries_[key].value_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n","/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n","/**\n * @module ol/TileCache\n */\nimport LRUCache from './structs/LRUCache.js';\nimport {fromKey, getKey} from './tilecoord.js';\n\nclass TileCache extends LRUCache {\n  clear() {\n    while (this.getCount() > 0) {\n      this.pop().release();\n    }\n    super.clear();\n  }\n\n  /**\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(usedTiles) {\n    while (this.canExpireCache()) {\n      const tile = this.peekLast();\n      if (tile.getKey() in usedTiles) {\n        break;\n      } else {\n        this.pop().release();\n      }\n    }\n  }\n\n  /**\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\n   */\n  pruneExceptNewestZ() {\n    if (this.getCount() === 0) {\n      return;\n    }\n    const key = this.peekFirstKey();\n    const tileCoord = fromKey(key);\n    const z = tileCoord[0];\n    this.forEach((tile) => {\n      if (tile.tileCoord[0] !== z) {\n        this.remove(getKey(tile.tileCoord));\n        tile.release();\n      }\n    });\n  }\n}\n\nexport default TileCache;\n","/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link import(\"../View.js\").ViewStateAndExtent} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../View.js\").ViewStateAndExtent): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.attributionsCollapsible_ =\n      options.attributionsCollapsible !== undefined\n        ? options.attributionsCollapsible\n        : true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    this.viewRejector = null;\n\n    const self = this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions(projection) {\n    return null;\n  }\n\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n  getView() {\n    return this.viewPromise_;\n  }\n\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n  getInterpolate() {\n    return this.interpolate_;\n  }\n\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;\n","/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  }\n  return new TileRange(minX, maxX, minY, maxY);\n}\n\nexport default TileRange;\n","/**\n * @module ol/tilegrid/common\n */\n\n/**\n * Default maximum zoom for default tile grids.\n * @type {number}\n */\nexport const DEFAULT_MAX_ZOOM = 42;\n\n/**\n * Default tile size.\n * @type {number}\n */\nexport const DEFAULT_TILE_SIZE = 256;\n","/**\n * @module ol/geom/flat/contains\n */\nimport {forEachCorner} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\nexport function linearRingContainsExtent(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  const outside = forEachCorner(\n    extent,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */\n    function (coordinate) {\n      return !linearRingContainsXY(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        coordinate[0],\n        coordinate[1]\n      );\n    }\n  );\n  return !outside;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingContainsXY(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  x,\n  y\n) {\n  // https://geomalgorithms.com/a03-_inclusion.html\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\n  // This code may be freely used and modified for any purpose\n  // providing that this copyright notice is included with it.\n  // SoftSurfer makes no warranty for this code, and cannot be held\n  // liable for any real or imagined damage resulting from its use.\n  // Users of this code must verify correctness for their application.\n  let wn = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    if (y1 <= y) {\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n        wn++;\n      }\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n      wn--;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return wn !== 0;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingsContainsXY(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  x,\n  y\n) {\n  if (ends.length === 0) {\n    return false;\n  }\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n    return false;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingssContainsXY(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  x,\n  y\n) {\n  if (endss.length === 0) {\n    return false;\n  }\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/intersectsextent\n */\nimport {\n  containsExtent,\n  createEmpty,\n  extendFlatCoordinates,\n  intersects,\n  intersectsSegment,\n} from '../../extent.js';\nimport {forEach as forEachSegment} from './segments.js';\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  const coordinatesExtent = extendFlatCoordinates(\n    createEmpty(),\n    flatCoordinates,\n    offset,\n    end,\n    stride\n  );\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n      return intersectsSegment(extent, point1, point2);\n    }\n  );\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    if (\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsExtent(\n        flatCoordinates,\n        ends[i - 1],\n        ends[i],\n        stride,\n        extent\n      )\n    ) {\n      if (\n        !intersectsLineString(\n          flatCoordinates,\n          ends[i - 1],\n          ends[i],\n          stride,\n          extent\n        )\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  let ret;\n  offset += stride;\n  for (; offset < end; offset += stride) {\n    ret = callback(\n      flatCoordinates.slice(offset - stride, offset),\n      flatCoordinates.slice(offset, offset + stride)\n    );\n    if (ret) {\n      return ret;\n    }\n  }\n  return false;\n}\n","/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = (size[0] * ratio + 0.5) | 0;\n  dest[1] = (size[1] * ratio + 0.5) | 0;\n  return dest;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  }\n  if (dest === undefined) {\n    dest = [size, size];\n  } else {\n    dest[0] = size;\n    dest[1] = size;\n  }\n  return dest;\n}\n","/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, {\n  createOrUpdate as createOrUpdateTileRange,\n} from '../TileRange.js';\nimport {DEFAULT_TILE_SIZE} from './common.js';\nimport {assert} from '../asserts.js';\nimport {ceil, clamp, floor} from '../math.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\nimport {intersectsLinearRing} from '../geom/flat/intersectsextent.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {toSize} from '../size.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 5;\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nclass TileGrid {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  constructor(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(\n      isSorted(\n        this.resolutions_,\n        function (a, b) {\n          return b - a;\n        },\n        true\n      ),\n      17\n    ); // `resolutions` must be sorted in descending order\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    const extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n      18\n    ); // Either `origin` or `origins` must be configured, never both\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ =\n      options.tileSize !== undefined\n        ? options.tileSize\n        : !this.tileSizes_\n        ? DEFAULT_TILE_SIZE\n        : null;\n    assert(\n      (!this.tileSize_ && this.tileSizes_) ||\n        (this.tileSize_ && !this.tileSizes_),\n      22\n    ); // Either `tileSize` or `tileSizes` must be configured, never both\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        const tileRange = new TileRange(\n          Math.min(0, size[0]),\n          Math.max(size[0] - 1, -1),\n          Math.min(0, size[1]),\n          Math.max(size[1] - 1, -1)\n        );\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  forEachTileCoordParentTileRange(\n    tileCoord,\n    callback,\n    tempTileRange,\n    tempExtent\n  ) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n    }\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(\n          tileCoordExtent,\n          z,\n          tempTileRange\n        );\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    return this.origins_[z];\n  }\n\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(\n          minX,\n          minX + 1,\n          minY,\n          minY + 1,\n          tempTileRange\n        );\n      }\n      const tileCoordExtent = this.getTileCoordExtent(\n        tileCoord,\n        tempExtent || this.tmpExtent_\n      );\n      return this.getTileRangeForExtentAndZ(\n        tileCoordExtent,\n        tileCoord[0] + 1,\n        tempTileRange\n      );\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(\n        tileCoordX,\n        tileCoordY,\n        tileCoordX,\n        tileCoordY,\n        tempTileRange\n      );\n    }\n\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\n      }\n\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n    }\n\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n  }\n\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getTileRangeExtent(z, tileRange, tempExtent) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n  }\n\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\n    const minX = tmpTileCoord[1];\n    const minY = tmpTileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\n    const maxX = tmpTileCoord[1];\n    const maxY = tmpTileCoord[2];\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n    ];\n  }\n\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getTileCoordExtent(tileCoord, tempExtent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n  }\n\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(\n      coordinate[0],\n      coordinate[1],\n      resolution,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndResolution_(\n    x,\n    y,\n    resolution,\n    reverseIntersectionPolicy,\n    opt_tileCoord\n  ) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(\n      coordinate[0],\n      coordinate[1],\n      z,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    return this.tileSizes_[z];\n  }\n\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\n        : null;\n    }\n    return this.fullTileRanges_[z];\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(\n      this.resolutions_,\n      resolution,\n      opt_direction || 0\n    );\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\n   * The tile with the provided tile coordinate intersects the given viewport.\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n   */\n  tileCoordIntersectsViewport(tileCoord, viewport) {\n    return intersectsLinearRing(\n      viewport,\n      0,\n      viewport.length,\n      2,\n      this.getTileCoordExtent(tileCoord)\n    );\n  }\n\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\n\nexport default TileGrid;\n","/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {toSize} from './size.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  }\n  return tileCoord;\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  maxResolution =\n    maxResolution > 0\n      ? maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n","/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {equivalent} from '../proj.js';\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\nimport {\n  getForProjection as getTileGridForProjection,\n  wrapX,\n} from '../tilegrid.js';\nimport {scale as scaleSize, toSize} from '../size.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate,\n    });\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ =\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    const tileSize = [256, 256];\n    if (this.tileGrid) {\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    this.tileCache = new TileCache(options.cacheSize || 0);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    };\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.tileCache.canExpireCache();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  forEachLoadedTile(projection, z, tileRange, callback) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n\n    let covered = true;\n    let tile, tileCoordKey, loaded;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */ (\n            tileCache.get(tileCoordKey)\n          );\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    return this.opaque_;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions(projection) {\n    const tileGrid = projection\n      ? this.getTileGridForProjection(projection)\n      : this.tileGrid;\n    if (!tileGrid) {\n      return null;\n    }\n    return tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    }\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n  getTileCacheForProjection(projection) {\n    const sourceProjection = this.getProjection();\n    assert(\n      sourceProjection === null || equivalent(sourceProjection, projection),\n      68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n    );\n    return this.tileCache;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    }\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\n    projection = projection !== undefined ? projection : this.getProjection();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */\n  clear() {\n    this.tileCache.clear();\n  }\n\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  updateCacheSize(tileCount, projection) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  useTile(z, x, y, projection) {}\n}\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n  }\n}\n\nexport default TileSource;\n","/**\n * @module ol/tileurlfunction\n */\nimport {assert} from './asserts.js';\nimport {modulo} from './math.js';\nimport {hash as tileCoordHash} from './tilecoord.js';\n\n/**\n * @param {string} template Template.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplate(template, tileGrid) {\n  const zRegEx = /\\{z\\}/g;\n  const xRegEx = /\\{x\\}/g;\n  const yRegEx = /\\{y\\}/g;\n  const dashYRegEx = /\\{-y\\}/g;\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      return template\n        .replace(zRegEx, tileCoord[0].toString())\n        .replace(xRegEx, tileCoord[1].toString())\n        .replace(yRegEx, tileCoord[2].toString())\n        .replace(dashYRegEx, function () {\n          const z = tileCoord[0];\n          const range = tileGrid.getFullTileRange(z);\n          assert(range, 55); // The {-y} placeholder requires a tile grid with extent\n          const y = range.getHeight() - tileCoord[2] - 1;\n          return y.toString();\n        });\n    }\n  );\n}\n\n/**\n * @param {Array<string>} templates Templates.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplates(templates, tileGrid) {\n  const len = templates.length;\n  const tileUrlFunctions = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n  }\n  return createFromTileUrlFunctions(tileUrlFunctions);\n}\n\n/**\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      const h = tileCoordHash(tileCoord);\n      const index = modulo(h, tileUrlFunctions.length);\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    }\n  );\n}\n\n/**\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {string|undefined} Tile URL.\n */\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n  return undefined;\n}\n\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}\n","/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {createFromTemplates, expandUrl} from '../tileurlfunction.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n          ? TileEventType.TILELOADEND\n          : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UrlTile;\n","/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    }\n    for (const key in this.tileCacheForProjection) {\n      if (this.tileCacheForProjection[key].canExpireCache()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(\n      this.tileCache == usedTileCache ? usedTiles : {}\n    );\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return false;\n    }\n    return super.getOpaque(projection);\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileCacheForProjection)) {\n      this.tileCacheForProjection[projKey] = new TileCache(\n        this.tileCache.highWaterMark\n      );\n    }\n    return this.tileCacheForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection\n      );\n    }\n    const cache = this.getTileCacheForProjection(projection);\n    const tileCoord = [z, x, y];\n    let tile;\n    const tileCoordKey = getKey(tileCoord);\n    if (cache.containsKey(tileCoordKey)) {\n      tile = cache.get(tileCoordKey);\n    }\n    const key = this.getKey();\n    if (tile && tile.key == key) {\n      return tile;\n    }\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const newTile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.getInterpolate()\n    );\n    newTile.key = key;\n\n    if (tile) {\n      newTile.interimTile = tile;\n      newTile.refreshInterimChain();\n      cache.replace(tileCoordKey, newTile);\n    } else {\n      cache.set(tileCoordKey, newTile);\n    }\n    return newTile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n\n  clear() {\n    super.clear();\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/source/wms\n */\n\n/**\n * Default WMS version.\n * @type {string}\n */\nexport const DEFAULT_VERSION = '1.3.0';\n\n/**\n * @api\n * @typedef {'carmentaserver' | 'geoserver' | 'mapserver' | 'qgis'} ServerType\n * Set the server type to use implementation-specific parameters beyond the WMS specification.\n *  - `'carmentaserver'`: HiDPI support for [Carmenta Server](https://www.carmenta.com/en/products/carmenta-server)\n *  - `'geoserver'`: HiDPI support for [GeoServer](https://geoserver.org/)\n *  - `'mapserver'`: HiDPI support for [MapServer](https://mapserver.org/)\n *  - `'qgis'`: HiDPI support for [QGIS](https://qgis.org/)\n */\n","/**\n * @module ol/uri\n */\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n","/**\n * @module ol/source/TileWMS\n */\n\nimport TileImage from './TileImage.js';\nimport {DEFAULT_VERSION} from './wms.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {buffer as bufferSize, scale as scaleSize, toSize} from '../size.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See https://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"./wms.js\").ServerType} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver`, `carmentaserver`, or `qgis`.\n * Only needed if `hidpi` is `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options} [options] Tile WMS options.\n   */\n  constructor(options) {\n    options = options ? options : /** @type {Options} */ ({});\n\n    const params = Object.assign({}, options.params);\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./wms.js\").ServerType}\n     */\n    this.serverType_ = options.serverType;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        tileResolution\n      );\n      tileExtent = transformExtent(\n        tileExtent,\n        projectionObj,\n        sourceProjectionObj\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    Object.assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const pixelSize = 0.00028;\n      baseParams['SCALE'] = (resolution * mpu) / pixelSize;\n    }\n\n    Object.assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case 'geoserver':\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case 'mapserver':\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case 'carmentaserver':\n        case 'qgis':\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default: // Unknown `serverType` configured\n          assert(false, 52);\n          break;\n      }\n    }\n\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    Object.assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    Object.assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileWMS;\n","/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, precision) {\n  const numberString =\n    precision !== undefined ? number.toFixed(precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width\n    ? numberString\n    : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n","/**\n * @module ol/layer/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  OPACITY: 'opacity',\n  VISIBLE: 'visible',\n  EXTENT: 'extent',\n  Z_INDEX: 'zIndex',\n  MAX_RESOLUTION: 'maxResolution',\n  MIN_RESOLUTION: 'minResolution',\n  MAX_ZOOM: 'maxZoom',\n  MIN_ZOOM: 'minZoom',\n  SOURCE: 'source',\n  MAP: 'map',\n};\n","/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {clamp} from '../math.js';\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nclass BaseLayer extends BaseObject {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {BackgroundColor|false}\n     * @private\n     */\n    this.background_ = options.background;\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = Object.assign({}, options);\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      Object.assign(properties, options.properties);\n    }\n\n    properties[LayerProperty.OPACITY] =\n      options.opacity !== undefined ? options.opacity : 1;\n    assert(typeof properties[LayerProperty.OPACITY] === 'number', 64); // Layer opacity must be a number\n\n    properties[LayerProperty.VISIBLE] =\n      options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] =\n      options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n      options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] =\n      options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] =\n      options.maxZoom !== undefined ? options.maxZoom : Infinity;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.className_ =\n      properties.className !== undefined ? properties.className : 'ol-layer';\n    delete properties.className;\n\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n  }\n\n  /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */\n  getBackground() {\n    return this.background_;\n  }\n\n  /**\n   * @return {string} CSS class name.\n   */\n  getClassName() {\n    return this.className_;\n  }\n\n  /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  getLayerState(managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    const state =\n      this.state_ ||\n      /** @type {?} */ ({\n        layer: this,\n        managed: managed === undefined ? true : managed,\n      });\n    const zIndex = this.getZIndex();\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n\n    return state;\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    return abstract();\n  }\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  getExtent() {\n    return /** @type {import(\"../extent.js\").Extent|undefined} */ (\n      this.get(LayerProperty.EXTENT)\n    );\n  }\n\n  /**\n   * Return the maximum resolution of the layer.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMaxResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum resolution of the layer.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMinResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum zoom level of the layer.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));\n  }\n\n  /**\n   * Return the maximum zoom level of the layer.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));\n  }\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  getOpacity() {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    return abstract();\n  }\n\n  /**\n   * Return the visibility of the layer (`true` or `false`).\n   * @return {boolean} The visibility of the layer.\n   * @observable\n   * @api\n   */\n  getVisible() {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  }\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. The default Z-index is 0.\n   * @return {number} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  getZIndex() {\n    return /** @type {number} */ (this.get(LayerProperty.Z_INDEX));\n  }\n\n  /**\n   * Sets the background color.\n   * @param {BackgroundColor} [background] Background color.\n   */\n  setBackground(background) {\n    this.background_ = background;\n    this.changed();\n  }\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  }\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  }\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  }\n\n  /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMaxZoom(maxZoom) {\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\n  }\n\n  /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMinZoom(minZoom) {\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\n  }\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  setOpacity(opacity) {\n    assert(typeof opacity === 'number', 64); // Layer opacity must be a number\n    this.set(LayerProperty.OPACITY, opacity);\n  }\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  }\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default BaseLayer;\n","/**\n * @module ol/render/EventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered before a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#prerender\n   * @api\n   */\n  PRERENDER: 'prerender',\n\n  /**\n   * Triggered after a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered before layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#precompose\n   * @api\n   */\n  PRECOMPOSE: 'precompose',\n\n  /**\n   * Triggered after layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#postcompose\n   * @api\n   */\n  POSTCOMPOSE: 'postcompose',\n\n  /**\n   * Triggered when rendering is complete, i.e. all sources and tiles have\n   * finished loading for the current viewport, and all tiles are faded in.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\n   * @api\n   */\n  RENDERCOMPLETE: 'rendercomplete',\n};\n\n/**\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\n */\n\n/**\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\n */\n","/**\n * @module ol/ViewHint\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  ANIMATING: 0,\n  INTERACTING: 1,\n};\n","/**\n * @module ol/ViewProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  CENTER: 'center',\n  RESOLUTION: 'resolution',\n  ROTATION: 'rotation',\n};\n","/**\n * @module ol/centerconstraint\n */\nimport {clamp} from './math.js';\n\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, isMoving, centerShift) {\n      if (!center) {\n        return undefined;\n      }\n      if (!resolution && !onlyCenter) {\n        return center;\n      }\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n      const shiftX = centerShift ? centerShift[0] : 0;\n      const shiftY = centerShift ? centerShift[1] : 0;\n      let minX = extent[0] + viewWidth / 2 + shiftX;\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\n      let minY = extent[1] + viewHeight / 2 + shiftY;\n      let maxY = extent[3] - viewHeight / 2 + shiftY;\n\n      // note: when zooming out of bounds, min and max values for x and y may\n      // end up inverted (min > max); this has to be accounted for\n      if (minX > maxX) {\n        minX = (maxX + minX) / 2;\n        maxX = minX;\n      }\n      if (minY > maxY) {\n        minY = (maxY + minY) / 2;\n        maxY = minY;\n      }\n\n      let x = clamp(center[0], minX, maxX);\n      let y = clamp(center[1], minY, maxY);\n\n      // during an interaction, allow some overscroll\n      if (isMoving && smooth && resolution) {\n        const ratio = 30 * resolution;\n        x +=\n          -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n        y +=\n          -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n      }\n\n      return [x, y];\n    }\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}\n","/**\n * @module ol/resolutionconstraint\n */\nimport {clamp} from './math.js';\nimport {getHeight, getWidth} from './extent.js';\nimport {linearFindNearest} from './array.js';\n\n/**\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\n */\n\n/**\n * Returns a modified resolution taking into account the viewport size and maximum\n * allowed extent.\n * @param {number} resolution Resolution\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\n * @param {boolean} showFullExtent Whether to show the full extent.\n * @return {number} Capped resolution.\n */\nfunction getViewportClampedResolution(\n  resolution,\n  maxExtent,\n  viewportSize,\n  showFullExtent\n) {\n  const xResolution = getWidth(maxExtent) / viewportSize[0];\n  const yResolution = getHeight(maxExtent) / viewportSize[1];\n\n  if (showFullExtent) {\n    return Math.min(resolution, Math.max(xResolution, yResolution));\n  }\n  return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n\n/**\n * Returns a modified resolution to be between maxResolution and minResolution while\n * still allowing the value to be slightly out of bounds.\n * Note: the computation is based on the logarithm function (ln):\n *  - at 1, ln(x) is 0\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\n * The final result is clamped to prevent getting too far away from bounds.\n * @param {number} resolution Resolution.\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @return {number} Smoothed resolution.\n */\nfunction getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n  let result = Math.min(resolution, maxResolution);\n  const ratio = 50;\n\n  result *=\n    Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +\n    1;\n  if (minResolution) {\n    result = Math.max(result, minResolution);\n    result /=\n      Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /\n        ratio +\n      1;\n  }\n  return clamp(result, minResolution / 2, maxResolution * 2);\n}\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToResolutions(\n  resolutions,\n  smooth,\n  maxExtent,\n  showFullExtent\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const maxResolution = resolutions[0];\n        const minResolution = resolutions[resolutions.length - 1];\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution\n          );\n        }\n\n        const capped = Math.min(cappedMaxRes, resolution);\n        const z = Math.floor(linearFindNearest(resolutions, capped, direction));\n        if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {\n          return resolutions[z + 1];\n        }\n        return resolutions[z];\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number} [minResolution] Minimum resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToPower(\n  power,\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  minResolution = minResolution !== undefined ? minResolution : 0;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution\n          );\n        }\n\n        const tolerance = 1e-9;\n        const minZoomLevel = Math.ceil(\n          Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance\n        );\n        const offset = -direction * (0.5 - tolerance) + 0.5;\n        const capped = Math.min(cappedMaxRes, resolution);\n        const cappedZoomLevel = Math.floor(\n          Math.log(maxResolution / capped) / Math.log(power) + offset\n        );\n        const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n        const newResolution = maxResolution / Math.pow(power, zoomLevel);\n        return clamp(newResolution, minResolution, cappedMaxRes);\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createMinMaxResolution(\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent\n) {\n  smooth = smooth !== undefined ? smooth : true;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent\n            )\n          : maxResolution;\n\n        if (!smooth || !isMoving) {\n          return clamp(resolution, minResolution, cappedMaxRes);\n        }\n        return getSmoothClampedResolution(\n          resolution,\n          cappedMaxRes,\n          minResolution\n        );\n      }\n      return undefined;\n    }\n  );\n}\n","/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  }\n  return undefined;\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  }\n  return undefined;\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = (2 * Math.PI) / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} [tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(tolerance) {\n  tolerance = tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        if (Math.abs(rotation) <= tolerance) {\n          return 0;\n        }\n        return rotation;\n      }\n      return undefined;\n    }\n  );\n}\n","/**\n * @module ol/transform\n */\nimport {WORKER_OFFSCREEN_CANVAS} from './has.js';\nimport {assert} from './asserts.js';\n\n/**\n * An array representing an affine 2d transformation for use with\n * {@link module:ol/transform} functions. The array has 6 elements.\n * @typedef {!Array<number>} Transform\n * @api\n */\n\n/**\n * Collection of affine 2d transformation functions. The functions work on an\n * array of 6 elements. The element order is compatible with the [SVGMatrix\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\n * a subset (elements a to f) of a 3×3 matrix:\n * ```\n * [ a c e ]\n * [ b d f ]\n * [ 0 0 1 ]\n * ```\n */\n\n/**\n * @private\n * @type {Transform}\n */\nconst tmp_ = new Array(6);\n\n/**\n * Create an identity transform.\n * @return {!Transform} Identity transform.\n */\nexport function create() {\n  return [1, 0, 0, 1, 0, 0];\n}\n\n/**\n * Resets the given transform to an identity transform.\n * @param {!Transform} transform Transform.\n * @return {!Transform} Transform.\n */\nexport function reset(transform) {\n  return set(transform, 1, 0, 0, 1, 0, 0);\n}\n\n/**\n * Multiply the underlying matrices of two transforms and return the result in\n * the first transform.\n * @param {!Transform} transform1 Transform parameters of matrix 1.\n * @param {!Transform} transform2 Transform parameters of matrix 2.\n * @return {!Transform} transform1 multiplied with transform2.\n */\nexport function multiply(transform1, transform2) {\n  const a1 = transform1[0];\n  const b1 = transform1[1];\n  const c1 = transform1[2];\n  const d1 = transform1[3];\n  const e1 = transform1[4];\n  const f1 = transform1[5];\n  const a2 = transform2[0];\n  const b2 = transform2[1];\n  const c2 = transform2[2];\n  const d2 = transform2[3];\n  const e2 = transform2[4];\n  const f2 = transform2[5];\n\n  transform1[0] = a1 * a2 + c1 * b2;\n  transform1[1] = b1 * a2 + d1 * b2;\n  transform1[2] = a1 * c2 + c1 * d2;\n  transform1[3] = b1 * c2 + d1 * d2;\n  transform1[4] = a1 * e2 + c1 * f2 + e1;\n  transform1[5] = b1 * e2 + d1 * f2 + f1;\n\n  return transform1;\n}\n\n/**\n * Set the transform components a-f on a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} a The a component of the transform.\n * @param {number} b The b component of the transform.\n * @param {number} c The c component of the transform.\n * @param {number} d The d component of the transform.\n * @param {number} e The e component of the transform.\n * @param {number} f The f component of the transform.\n * @return {!Transform} Matrix with transform applied.\n */\nexport function set(transform, a, b, c, d, e, f) {\n  transform[0] = a;\n  transform[1] = b;\n  transform[2] = c;\n  transform[3] = d;\n  transform[4] = e;\n  transform[5] = f;\n  return transform;\n}\n\n/**\n * Set transform on one matrix from another matrix.\n * @param {!Transform} transform1 Matrix to set transform to.\n * @param {!Transform} transform2 Matrix to set transform from.\n * @return {!Transform} transform1 with transform from transform2 applied.\n */\nexport function setFromArray(transform1, transform2) {\n  transform1[0] = transform2[0];\n  transform1[1] = transform2[1];\n  transform1[2] = transform2[2];\n  transform1[3] = transform2[3];\n  transform1[4] = transform2[4];\n  transform1[5] = transform2[5];\n  return transform1;\n}\n\n/**\n * Transforms the given coordinate with the given transform returning the\n * resulting, transformed coordinate. The coordinate will be modified in-place.\n *\n * @param {Transform} transform The transformation.\n * @param {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} coordinate The coordinate to transform.\n * @return {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} return coordinate so that operations can be\n *     chained together.\n */\nexport function apply(transform, coordinate) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\n  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\n  return coordinate;\n}\n\n/**\n * Applies rotation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} angle Angle in radians.\n * @return {!Transform} The rotated transform.\n */\nexport function rotate(transform, angle) {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));\n}\n\n/**\n * Applies scale to a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scaled transform.\n */\nexport function scale(transform, x, y) {\n  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));\n}\n\n/**\n * Creates a scale transform.\n * @param {!Transform} target Transform to overwrite.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scale transform.\n */\nexport function makeScale(target, x, y) {\n  return set(target, x, 0, 0, y, 0, 0);\n}\n\n/**\n * Applies translation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} dx Translation x.\n * @param {number} dy Translation y.\n * @return {!Transform} The translated transform.\n */\nexport function translate(transform, dx, dy) {\n  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative).\n * @param {!Transform} transform The transform (will be modified in place).\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {!Transform} The composite transform.\n */\nexport function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\n  const sin = Math.sin(angle);\n  const cos = Math.cos(angle);\n  transform[0] = sx * cos;\n  transform[1] = sy * sin;\n  transform[2] = -sx * sin;\n  transform[3] = sy * cos;\n  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\n  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\n  return transform;\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative). The resulting transform\n * string can be applied as `transform` property of an HTMLElement's style.\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {string} The composite css transform.\n * @api\n */\nexport function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {\n  return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (source) transform.\n */\nexport function invert(source) {\n  return makeInverse(source, source);\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} target Transform to be set as the inverse of\n *     the source transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (target) transform.\n */\nexport function makeInverse(target, source) {\n  const det = determinant(source);\n  assert(det !== 0, 32); // Transformation matrix cannot be inverted\n\n  const a = source[0];\n  const b = source[1];\n  const c = source[2];\n  const d = source[3];\n  const e = source[4];\n  const f = source[5];\n\n  target[0] = d / det;\n  target[1] = -b / det;\n  target[2] = -c / det;\n  target[3] = a / det;\n  target[4] = (c * f - d * e) / det;\n  target[5] = -(a * f - b * e) / det;\n\n  return target;\n}\n\n/**\n * Returns the determinant of the given matrix.\n * @param {!Transform} mat Matrix.\n * @return {number} Determinant.\n */\nexport function determinant(mat) {\n  return mat[0] * mat[3] - mat[1] * mat[2];\n}\n\n/**\n * @type {HTMLElement}\n * @private\n */\nlet transformStringDiv;\n\n/**\n * A rounded string version of the transform.  This can be used\n * for CSS transforms.\n * @param {!Transform} mat Matrix.\n * @return {string} The transform as a string.\n */\nexport function toString(mat) {\n  const transformString = 'matrix(' + mat.join(', ') + ')';\n  if (WORKER_OFFSCREEN_CANVAS) {\n    return transformString;\n  }\n  const node =\n    transformStringDiv || (transformStringDiv = document.createElement('div'));\n  node.style.transform = transformString;\n  return node.style.transform;\n}\n","/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(function (\n      revision,\n      squaredTolerance,\n      transform\n    ) {\n      if (!transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n      const clone = this.clone();\n      clone.applyTransform(transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      transform\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == 'tile-pixels'\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0\n            );\n            transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates\n            );\n            return getTransform(sourceProj, destination)(\n              inCoordinates,\n              outCoordinates,\n              stride\n            );\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n","/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  dest\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  dest\n) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  dest\n) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  dest\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n","/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport {abstract} from '../util.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */\n    this.layout = 'XY';\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates = null;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(\n      this.flatCoordinates.length - this.stride\n    );\n  }\n\n  /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometry =\n      this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    }\n    // Simplification did not actually remove any coordinates.  We now know\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\n    // than or equal to the current squaredTolerance will also not have any\n    // effect.  This allows us to short circuit simplification (saving CPU\n    // cycles) and prevents the cache of simplified geometries from filling\n    // up with useless identical copies of this geometry (saving memory).\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  setCoordinates(coordinates, layout) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    /** @type {number} */\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = 'XY';\n          this.stride = 2;\n          return;\n        }\n        coordinates = /** @type {Array} */ (coordinates[0]);\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        angle,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (sy === undefined) {\n      sy = sx;\n    }\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        sx,\n        sy,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        deltaX,\n        deltaY,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n}\n\n/**\n * @param {number} stride Stride.\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = 'XY';\n  } else if (stride == 3) {\n    layout = 'XYZ';\n  } else if (stride == 4) {\n    layout = 'XYZM';\n  }\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\n}\n\n/**\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == 'XY') {\n    stride = 2;\n  } else if (layout == 'XYZ' || layout == 'XYM') {\n    stride = 3;\n  } else if (layout == 'XYZM') {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  }\n  const stride = simpleGeometry.getStride();\n  return transform2D(\n    flatCoordinates,\n    0,\n    flatCoordinates.length,\n    stride,\n    transform,\n    dest\n  );\n}\n\nexport default SimpleGeometry;\n","/**\n * @module ol/geom/flat/closest\n */\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\n\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(\n  flatCoordinates,\n  offset1,\n  offset2,\n  stride,\n  x,\n  y,\n  closestPoint\n) {\n  const x1 = flatCoordinates[offset1];\n  const y1 = flatCoordinates[offset1 + 1];\n  const dx = flatCoordinates[offset2] - x1;\n  const dy = flatCoordinates[offset2 + 1] - y1;\n  let offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(\n          flatCoordinates[offset1 + i],\n          flatCoordinates[offset2 + i],\n          t\n        );\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (let i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\n\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  max\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  max\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint\n) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  let i, squaredDistance;\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[offset],\n      flatCoordinates[offset + 1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  let index = offset + stride;\n  while (index < end) {\n    assignClosest(\n      flatCoordinates,\n      index - stride,\n      index,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index +=\n        stride *\n        Math.max(\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\n            maxDelta) |\n            0,\n          1\n        );\n    }\n  }\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(\n      flatCoordinates,\n      end - stride,\n      offset,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    minSquaredDistance = assignClosestPoint(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = end;\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}\n","/**\n * @module ol/geom/flat/deflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\n    flatCoordinates[offset++] = coordinate[i];\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinates(\n  flatCoordinates,\n  offset,\n  coordinates,\n  stride\n) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    const coordinate = coordinates[i];\n    for (let j = 0; j < stride; ++j) {\n      flatCoordinates[offset++] = coordinate[j];\n    }\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\n * @param {number} stride Stride.\n * @param {Array<number>} [ends] Ends.\n * @return {Array<number>} Ends.\n */\nexport function deflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatess,\n  stride,\n  ends\n) {\n  ends = ends ? ends : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\n    const end = deflateCoordinates(\n      flatCoordinates,\n      offset,\n      coordinatess[j],\n      stride\n    );\n    ends[i++] = end;\n    offset = end;\n  }\n  ends.length = i;\n  return ends;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\n * @param {number} stride Stride.\n * @param {Array<Array<number>>} [endss] Endss.\n * @return {Array<Array<number>>} Endss.\n */\nexport function deflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatesss,\n  stride,\n  endss\n) {\n  endss = endss ? endss : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\n    const ends = deflateCoordinatesArray(\n      flatCoordinates,\n      offset,\n      coordinatesss[j],\n      stride,\n      endss[i]\n    );\n    if (ends.length === 0) {\n      ends[0] = offset;\n    }\n    endss[i++] = ends;\n    offset = ends[ends.length - 1];\n  }\n  endss.length = i;\n  return endss;\n}\n","/**\n * @module ol/geom/flat/simplify\n */\n// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport {squaredDistance, squaredSegmentDistance} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array<number>} [simplifiedFlatCoordinates] Simplified flat\n *     coordinates.\n * @return {Array<number>} Simplified line string.\n */\nexport function simplifyLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  highQuality,\n  simplifiedFlatCoordinates\n) {\n  simplifiedFlatCoordinates =\n    simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\n  if (!highQuality) {\n    end = radialDistance(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n  simplifiedFlatCoordinates.length = douglasPeucker(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    squaredTolerance,\n    simplifiedFlatCoordinates,\n    0\n  );\n  return simplifiedFlatCoordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function douglasPeucker(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  const n = (end - offset) / stride;\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  /** @type {Array<number>} */\n  const markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  /** @type {Array<number>} */\n  const stack = [offset, end - stride];\n  let index = 0;\n  while (stack.length > 0) {\n    const last = stack.pop();\n    const first = stack.pop();\n    let maxSquaredDistance = 0;\n    const x1 = flatCoordinates[first];\n    const y1 = flatCoordinates[first + 1];\n    const x2 = flatCoordinates[last];\n    const y2 = flatCoordinates[last + 1];\n    for (let i = first + stride; i < last; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);\n      if (squaredDistance > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance;\n      }\n    }\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n  for (let i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride + 1];\n    }\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = douglasPeucker(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = douglasPeuckerArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function radialDistance(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  if (end <= offset + stride) {\n    // zero or one point, no simplification possible, so copy and return\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  // copy first point\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  let x2 = x1;\n  let y2 = y1;\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n      // copy point at offset\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  if (x2 != x1 || y2 != y1) {\n    // copy last point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\nexport function snap(value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n}\n\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function quantize(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  // do nothing if the line is empty\n  if (offset == end) {\n    return simplifiedOffset;\n  }\n  // snap the first coordinate (P1)\n  let x1 = snap(flatCoordinates[offset], tolerance);\n  let y1 = snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride;\n  // add the first coordinate to the output\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  // find the next coordinate that does not snap to the same value as the first\n  // coordinate (P2)\n  let x2, y2;\n  do {\n    x2 = snap(flatCoordinates[offset], tolerance);\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (offset == end) {\n      // all coordinates snap to the same value, the line collapses to a point\n      // push the last snapped value anyway to ensure that the output contains\n      // at least two points\n      // FIXME should we really return at least two points anyway?\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n  while (offset < end) {\n    // snap the next coordinate (P3)\n    const x3 = snap(flatCoordinates[offset], tolerance);\n    const y3 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // skip P3 if it is equal to P2\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    }\n    // calculate the delta between P1 and P2\n    const dx1 = x2 - x1;\n    const dy1 = y2 - y1;\n    // calculate the delta between P3 and P1\n    const dx2 = x3 - x1;\n    const dy2 = y3 - y1;\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n    // P1 in the same direction then P2 is on the straight line between P1 and\n    // P3\n    if (\n      dx1 * dy2 == dy1 * dx2 &&\n      ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\n      ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))\n    ) {\n      // discard P2 and set P2 = P3\n      x2 = x3;\n      y2 = y3;\n      continue;\n    }\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n    // and continue with P1 = P2 and P2 = P3\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  }\n  // add the last point (P2)\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function quantizeArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = quantize(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function quantizeMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = quantizeArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n","/**\n * @module ol/geom/flat/inflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\n */\nexport function inflateCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  coordinates\n) {\n  coordinates = coordinates !== undefined ? coordinates : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    coordinates[i++] = flatCoordinates.slice(j, j + stride);\n  }\n  coordinates.length = i;\n  return coordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} [coordinatess] Coordinatess.\n * @return {Array<Array<import(\"../../coordinate.js\").Coordinate>>} Coordinatess.\n */\nexport function inflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  coordinatess\n) {\n  coordinatess = coordinatess !== undefined ? coordinatess : [];\n  let i = 0;\n  for (let j = 0, jj = ends.length; j < jj; ++j) {\n    const end = ends[j];\n    coordinatess[i++] = inflateCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      coordinatess[i]\n    );\n    offset = end;\n  }\n  coordinatess.length = i;\n  return coordinatess;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} [coordinatesss]\n *     Coordinatesss.\n * @return {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} Coordinatesss.\n */\nexport function inflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  coordinatesss\n) {\n  coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\n  let i = 0;\n  for (let j = 0, jj = endss.length; j < jj; ++j) {\n    const ends = endss[j];\n    coordinatesss[i++] =\n      ends.length === 1 && ends[0] === offset\n        ? []\n        : inflateCoordinatesArray(\n            flatCoordinates,\n            offset,\n            ends,\n            stride,\n            coordinatesss[i]\n          );\n    offset = ends[ends.length - 1];\n  }\n  coordinatesss.length = i;\n  return coordinatesss;\n}\n","/**\n * @module ol/geom/flat/area\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRing(flatCoordinates, offset, end, stride) {\n  let twiceArea = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    twiceArea += y1 * x2 - x1 * y2;\n    x1 = x2;\n    y1 = y2;\n  }\n  return twiceArea / 2;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRings(flatCoordinates, offset, ends, stride) {\n  let area = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    area += linearRing(flatCoordinates, offset, end, stride);\n    offset = end;\n  }\n  return area;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  let area = 0;\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    area += linearRings(flatCoordinates, offset, ends, stride);\n    offset = ends[ends.length - 1];\n  }\n  return area;\n}\n","/**\n * @module ol/geom/LinearRing\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LinearRing';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LinearRing;\n","/**\n * @module ol/geom/Point\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Point';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n","/**\n * @module ol/geom/flat/reverse\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\nexport function coordinates(flatCoordinates, offset, end, stride) {\n  while (offset < end - stride) {\n    for (let i = 0; i < stride; ++i) {\n      const tmp = flatCoordinates[offset + i];\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n      flatCoordinates[end - stride + i] = tmp;\n    }\n    offset += stride;\n    end -= stride;\n  }\n}\n","/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    const reverse =\n      i === 0\n        ? (right && isClockwise) || (!right && !isClockwise)\n        : (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates,\n      offset,\n      endss[i],\n      stride,\n      right\n    );\n  }\n  return offset;\n}\n\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to contruct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n  const endss = [];\n  let offset = 0;\n  let prevEndIndex = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    // classifies an array of rings into polygons with outer rings and holes\n    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n  return endss;\n}\n","/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius)\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n","/**\n * @module ol/geom/flat/interiorpoint\n */\nimport {ascending} from '../../array.js';\nimport {linearRingsContainsXY} from './contains.js';\n\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointOfArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  flatCenters,\n  flatCentersOffset,\n  dest\n) {\n  let i, ii, x, x1, x2, y1, y2;\n  const y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array<number>} */\n  const intersections = [];\n  // Calculate intersections with the horizontal line\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\n    const end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n  let pointX = NaN;\n  let maxSegmentLength = -Infinity;\n  intersections.sort(ascending);\n  x1 = intersections[0];\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    const segmentLength = Math.abs(x2 - x1);\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n    x1 = x2;\n  }\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n  if (dest) {\n    dest.push(pointX, y, maxSegmentLength);\n    return dest;\n  }\n  return [pointX, y, maxSegmentLength];\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointsOfMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  flatCenters\n) {\n  let interiorPoints = [];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    interiorPoints = getInteriorPointOfArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      flatCenters,\n      2 * i,\n      interiorPoints\n    );\n    offset = ends[ends.length - 1];\n  }\n  return interiorPoints;\n}\n","/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {\n  METERS_PER_UNIT,\n  createProjection,\n  disableCoordinateWarning,\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from './proj.js';\nimport {VOID} from './functions.js';\nimport {\n  add as addCoordinate,\n  equals as coordinatesEqual,\n  equals,\n  rotate as rotateCoordinate,\n} from './coordinate.js';\nimport {assert} from './asserts.js';\nimport {none as centerNone, createExtent} from './centerconstraint.js';\nimport {clamp, modulo} from './math.js';\nimport {\n  createMinMaxResolution,\n  createSnapToPower,\n  createSnapToResolutions,\n} from './resolutionconstraint.js';\nimport {\n  createSnapToN,\n  createSnapToZero,\n  disable,\n  none as rotationNone,\n} from './rotationconstraint.js';\nimport {easeOut, inAndOut} from './easing.js';\nimport {\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n  isEmpty,\n} from './extent.js';\nimport {linearFindNearest} from './array.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center.\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateAndExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nclass View extends BaseObject {\n  /**\n   * @param {ViewOptions} [options] View options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    this.un;\n\n    options = Object.assign({}, options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.nextCenter_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextResolution_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.cancelAnchor_ = undefined;\n\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, this.projection_);\n    }\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n    const properties = Object.assign({}, options);\n    for (const key in ViewProperty) {\n      delete properties[key];\n    }\n    this.setProperties(properties, true);\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n    this.padding_ = options.padding;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint,\n    };\n\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(\n      options.center !== undefined ? options.center : null\n    );\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n  }\n\n  /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */\n  get padding() {\n    return this.padding_;\n  }\n  set padding(padding) {\n    let oldPadding = this.padding_;\n    this.padding_ = padding;\n    const center = this.getCenterInternal();\n    if (center) {\n      const newPadding = padding || [0, 0, 0, 0];\n      oldPadding = oldPadding || [0, 0, 0, 0];\n      const resolution = this.getResolution();\n      const offsetX =\n        (resolution / 2) *\n        (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n      const offsetY =\n        (resolution / 2) *\n        (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n    }\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = this.getProperties();\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenterInternal();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return Object.assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; ++i) {\n      let options = arguments[i];\n      if (options.center) {\n        options = Object.assign({}, options);\n        options.center = fromUserCoordinate(\n          options.center,\n          this.getProjection()\n        );\n      }\n      if (options.anchor) {\n        options = Object.assign({}, options);\n        options.anchor = fromUserCoordinate(\n          options.anchor,\n          this.getProjection()\n        );\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  }\n\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  animateInternal(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (\n      animationCount > 1 &&\n      typeof arguments[animationCount - 1] === 'function'\n    ) {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n\n    let i = 0;\n    for (; i < animationCount && !this.isDef(); ++i) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[i];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      } else if (state.resolution) {\n        this.setResolution(state.resolution);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n    }\n    if (i === animationCount) {\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n\n    let start = Date.now();\n    let center = this.targetCenter_.slice();\n    let resolution = this.targetResolution_;\n    let rotation = this.targetRotation_;\n    const series = [];\n    for (; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback,\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta =\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    let anchor;\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (let j = 0, jj = series.length; j < jj; ++j) {\n          const animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n    this.nextCenter_ = null;\n    this.nextResolution_ = NaN;\n    this.nextRotation_ = NaN;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction =\n          animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          this.nextCenter_ = animation.targetCenter;\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution =\n            progress === 1\n              ? animation.targetResolution\n              : animation.sourceResolution +\n                progress *\n                  (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            const size = this.getViewportSize_(this.getRotation());\n            const constrainedResolution = this.constraints_.resolution(\n              resolution,\n              0,\n              size,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterZoom(\n              constrainedResolution,\n              animation.anchor\n            );\n          }\n          this.nextResolution_ = animation.targetResolution;\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (\n          animation.sourceRotation !== undefined &&\n          animation.targetRotation !== undefined\n        ) {\n          const rotation =\n            progress === 1\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                Math.PI\n              : animation.sourceRotation +\n                progress *\n                  (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            const constrainedRotation = this.constraints_.rotation(\n              rotation,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterRotate(\n              constrainedRotation,\n              animation.anchor\n            );\n          }\n          this.nextRotation_ = animation.targetRotation;\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(\n        this.updateAnimations_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x =\n        anchor[0] -\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n      const y =\n        anchor[1] -\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getViewportSize_(rotation) {\n    const size = this.viewportSize_;\n    if (rotation) {\n      const w = size[0];\n      const h = size[1];\n      return [\n        Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\n        Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation)),\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n   */\n  setViewportSize(size) {\n    this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    const center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  }\n\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  getCenterInternal() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(ViewProperty.CENTER)\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  getConstrainResolution() {\n    return this.get('constrainResolution');\n  }\n\n  /**\n   * @param {Array<number>} [hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(hints) {\n    if (hints !== undefined) {\n      hints[0] = this.hints_[0];\n      hints[1] = this.hints_[1];\n      return hints;\n    }\n    return this.hints_.slice();\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(size) {\n    const extent = this.calculateExtentInternal(size);\n    return toUserExtent(extent, this.getProjection());\n  }\n\n  /**\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  calculateExtentInternal(size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    assert(center, 1); // The view center is not defined\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.minResolution_)\n    );\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  setConstrainResolution(enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, size) {\n    return this.getResolutionForExtentInternal(\n      fromUserExtent(extent, this.getProjection()),\n      size\n    );\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  getResolutionForExtentInternal(extent, size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(power) {\n    power = power || 2;\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(power) {\n    const logPower = Math.log(power || 2);\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        const value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  }\n\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n  getViewportSizeMinusPadding_(rotation) {\n    let size = this.getViewportSize_(rotation);\n    const padding = this.padding_;\n    if (padding) {\n      size = [\n        size[0] - padding[1] - padding[3],\n        size[1] - padding[0] - padding[2],\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * @return {State} View state.\n   */\n  getState() {\n    const projection = this.getProjection();\n    const resolution = this.getResolution();\n    const rotation = this.getRotation();\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    const padding = this.padding_;\n    if (padding) {\n      const reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(\n        center,\n        this.getViewportSize_(),\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n    }\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      nextCenter: this.nextCenter_,\n      nextResolution: this.nextResolution_,\n      nextRotation: this.nextRotation_,\n      rotation: rotation,\n      zoom: this.getZoom(),\n    };\n  }\n\n  /**\n   * @return {ViewStateAndExtent} Like `FrameState`, but just `viewState` and `extent`.\n   */\n  getViewStateAndExtent() {\n    return {\n      viewState: this.getState(),\n      extent: this.calculateExtent(),\n    };\n  }\n\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n      const baseLevel = clamp(\n        Math.floor(zoom),\n        0,\n        this.resolutions_.length - 2\n      );\n      const zoomFactor =\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return (\n        this.resolutions_[baseLevel] /\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\n      );\n    }\n    return (\n      this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\n    );\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [options] Options.\n   * @api\n   */\n  fit(geometryOrExtent, options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(\n      Array.isArray(geometryOrExtent) ||\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\n          'function',\n      24\n    ); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === 'Circle') {\n      const extent = fromUserExtent(\n        geometryOrExtent.getExtent(),\n        this.getProjection()\n      );\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n          geometryOrExtent\n            .clone()\n            .transform(userProjection, this.getProjection())\n        );\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, options);\n  }\n\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n  rotatedExtentForGeometry(geometry) {\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(rotation);\n    const sinAngle = Math.sin(-rotation);\n    const coords = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  }\n\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [options] Options.\n   */\n  fitInternal(geometry, options) {\n    options = options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n    const padding =\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n      size[0] - padding[1] - padding[3],\n      size[1] - padding[0] - padding[2],\n    ]);\n    resolution = isNaN(resolution)\n      ? minResolution\n      : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n    // calculate center\n    const rotation = this.getRotation();\n    const sinAngle = Math.sin(rotation);\n    const cosAngle = Math.cos(rotation);\n    const centerRot = getCenter(rotatedExtent);\n    centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\n    centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal(\n        {\n          resolution: resolution,\n          center: center,\n          duration: options.duration,\n          easing: options.easing,\n        },\n        callback\n      );\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    this.centerOnInternal(\n      fromUserCoordinate(coordinate, this.getProjection()),\n      size,\n      position\n    );\n  }\n\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  centerOnInternal(coordinate, size, position) {\n    this.setCenterInternal(\n      calculateCenterOn(\n        coordinate,\n        size,\n        position,\n        this.getResolution(),\n        this.getRotation()\n      )\n    );\n  }\n\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n  calculateCenterShift(center, resolution, rotation, size) {\n    let centerShift;\n    const padding = this.padding_;\n    if (padding && center) {\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      const shiftedCenter = calculateCenterOn(\n        center,\n        size,\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n      centerShift = [\n        center[0] - shiftedCenter[0],\n        center[1] - shiftedCenter[1],\n      ];\n    }\n    return centerShift;\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  adjustCenter(deltaCoordinates) {\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  adjustCenterInternal(deltaCoordinates) {\n    const center = this.targetCenter_;\n    this.setCenterInternal([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustResolution(ratio, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  adjustResolutionInternal(ratio, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const size = this.getViewportSize_(this.getRotation());\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_ * ratio,\n      0,\n      size,\n      isMoving\n    );\n\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustZoom(delta, anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n  }\n\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   * @api\n   */\n  adjustRotation(delta, anchor) {\n    if (anchor) {\n      anchor = fromUserCoordinate(anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, anchor);\n  }\n\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   */\n  adjustRotationInternal(delta, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_ + delta,\n      isMoving\n    );\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.setCenterInternal(\n      center ? fromUserCoordinate(center, this.getProjection()) : center\n    );\n  }\n\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  setCenterInternal(center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  }\n\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n  applyTargetState_(doNotCancelAnims, forceMoving) {\n    const isMoving =\n      this.getAnimating() || this.getInteracting() || forceMoving;\n\n    // compute rotation\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_,\n      isMoving\n    );\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      0,\n      size,\n      isMoving\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      isMoving,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n      this.set('zoom', this.getZoom(), true);\n    }\n    if (\n      !newCenter ||\n      !this.get(ViewProperty.CENTER) ||\n      !equals(this.get(ViewProperty.CENTER), newCenter)\n    ) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  }\n\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [duration] The animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  resolveConstraints(duration, resolutionDirection, anchor) {\n    duration = duration !== undefined ? duration : 200;\n    const direction = resolutionDirection || 0;\n\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      direction,\n      size\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      false,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (\n      this.getResolution() !== newResolution ||\n      this.getRotation() !== newRotation ||\n      !this.getCenterInternal() ||\n      !equals(this.getCenterInternal(), newCenter)\n    ) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor,\n      });\n    }\n  }\n\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  beginInteraction() {\n    this.resolveConstraints(0);\n\n    this.setHint(ViewHint.INTERACTING, 1);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  endInteraction(duration, resolutionDirection, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.endInteractionInternal(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  endInteractionInternal(duration, resolutionDirection, anchor) {\n    if (!this.getInteracting()) {\n      return;\n    }\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  getConstrainedCenter(targetCenter, targetResolution) {\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(\n      targetCenter,\n      targetResolution || this.getResolution(),\n      size\n    );\n  }\n\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  getConstrainedZoom(targetZoom, direction) {\n    const targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(\n      this.getConstrainedResolution(targetRes, direction)\n    );\n  }\n\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  getConstrainedResolution(targetResolution, direction) {\n    direction = direction || 0;\n    const size = this.getViewportSize_(this.getRotation());\n\n    return this.constraints_.resolution(targetResolution, direction, size);\n  }\n}\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    const smooth =\n      options.smoothExtentConstraint !== undefined\n        ? options.smoothExtentConstraint\n        : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    const extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom =\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom =\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor =\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  const multiWorld =\n    options.multiWorld !== undefined ? options.multiWorld : false;\n\n  const smooth =\n    options.smoothResolutionConstraint !== undefined\n      ? options.smoothResolutionConstraint\n      : true;\n\n  const showFullExtent =\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  const projExtent = projection.getExtent();\n  let constrainOnlyCenter = options.constrainOnlyCenter;\n  let extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution =\n      resolutions[maxZoom] !== undefined\n        ? resolutions[maxZoom]\n        : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(\n        resolutions,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  } else {\n    // calculate the default min and max resolution\n    const size = !projExtent\n      ? // use an extent that can fit the whole world if need be\n        (360 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit()\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\n\n    const defaultMaxResolution =\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution =\n      defaultMaxResolution /\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom =\n      minZoom +\n      Math.floor(\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor)\n      );\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(\n        zoomFactor,\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor,\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation =\n    options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    }\n    return rotationNone;\n  }\n  return disable;\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  const cosAngle = Math.cos(-rotation);\n  let sinAngle = Math.sin(-rotation);\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  const centerX = rotX * cosAngle - rotY * sinAngle;\n  const centerY = rotY * cosAngle + rotX * sinAngle;\n\n  return [centerX, centerY];\n}\n\nexport default View;\n","/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport View from '../View.js';\nimport {assert} from '../asserts.js';\nimport {intersects} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.sourceReady_ = false;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(\n      LayerProperty.SOURCE,\n      this.handleSourcePropertyChange_\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    array = array ? array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    states = states ? states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  getRenderSource() {\n    return this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n    if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\n      return;\n    }\n    this.sourceReady_ = true;\n    this.dispatchEvent('sourceready');\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    this.sourceReady_ = false;\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this\n      );\n      if (source.getState() === 'ready') {\n        this.sourceReady_ = true;\n        setTimeout(() => {\n          this.dispatchEvent('sourceready');\n        }, 0);\n      }\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return Promise.resolve([]);\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  }\n\n  /**\n   * The layer is visible in the given view, i.e. within its min/max resolution or zoom and\n   * extent, and `getVisible()` is `true`.\n   * @param {View|import(\"../View.js\").ViewStateAndExtent} view View or {@link import(\"../Map.js\").FrameState}.\n   * @return {boolean} The layer is visible in the current view.\n   * @api\n   */\n  isVisible(view) {\n    let frameState;\n    if (view instanceof View) {\n      frameState = {\n        viewState: view.getState(),\n        extent: view.calculateExtent(),\n      };\n    } else {\n      frameState = view;\n    }\n    const layerExtent = this.getExtent();\n    return (\n      this.getVisible() &&\n      inView(this.getLayerState(), frameState.viewState) &&\n      (!layerExtent || intersects(layerExtent, frameState.extent))\n    );\n  }\n\n  /**\n   * Get the attributions of the source of this layer for the given view.\n   * @param {View|import(\"../View.js\").ViewStateAndExtent} view View or  {@link import(\"../Map.js\").FrameState}.\n   * @return {Array<string>} Attributions for this layer at the given view.\n   * @api\n   */\n  getAttributions(view) {\n    if (!this.isVisible(view)) {\n      return [];\n    }\n    let getAttributions;\n    const source = this.getSource();\n    if (source) {\n      getAttributions = source.getAttributions();\n    }\n    if (!getAttributions) {\n      return [];\n    }\n    const frameState =\n      view instanceof View ? view.getViewStateAndExtent() : view;\n    let attributions = getAttributions(frameState);\n    if (!Array.isArray(attributions)) {\n      attributions = [attributions];\n    }\n    return attributions;\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  }\n\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  unrender() {\n    this.rendered = false;\n  }\n\n  /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  }\n\n  /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        function (evt) {\n          const renderEvent =\n            /** @type {import(\"../render/Event.js\").default} */ (evt);\n          const layerStatesArray = renderEvent.frameState.layerStatesArray;\n          const layerState = this.getLayerState(false);\n          // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n          assert(\n            !layerStatesArray.some(function (arrayLayerState) {\n              return arrayLayerState.layer === layerState.layer;\n            }),\n            67\n          );\n          layerStatesArray.push(layerState);\n        },\n        this\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n","/**\n * @module ol/layer/TileProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\n};\n","/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true\n    );\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n\n  /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default BaseTileLayer;\n","/**\n * @module ol/renderer/Layer\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport Observable from '../Observable.js';\nimport {abstract} from '../util.js';\n\n/**\n * @template {import(\"../layer/Layer.js\").default} LayerType\n */\nclass LayerRenderer extends Observable {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super();\n\n    /**\n     * The renderer is initialized and ready to render.\n     * @type {boolean}\n     */\n    this.ready = true;\n\n    /** @private */\n    this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\n\n    /**\n     * @protected\n     * @type {LayerType}\n     */\n    this.layer_ = layer;\n\n    /**\n     * @type {import(\"../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    return abstract();\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    return null;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return abstract();\n  }\n\n  /**\n   * Render the layer.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    return abstract();\n  }\n\n  /**\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (!tiles[zoom]) {\n      tiles[zoom] = {};\n    }\n    tiles[zoom][tile.tileCoord.toString()] = tile;\n    return undefined;\n  }\n\n  /**\n   * Create a function that adds loaded tiles to the tile lookup.\n   * @param {import(\"../source/Tile.js\").default} source Tile source.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection of the tiles.\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @return {function(number, import(\"../TileRange.js\").default):boolean} A function that can be\n   *     called with a zoom level and a tile range to add loaded tiles to the lookup.\n   * @protected\n   */\n  createLoadedTileFinder(source, projection, tiles) {\n    return (\n      /**\n       * @param {number} zoom Zoom level.\n       * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n       * @return {boolean} The tile range is fully loaded.\n       */\n      (zoom, tileRange) => {\n        const callback = this.loadedTileCallback.bind(this, tiles, zoom);\n        return source.forEachLoadedTile(projection, zoom, tileRange, callback);\n      }\n    );\n  }\n  /**\n   * @abstract\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    return undefined;\n  }\n\n  /**\n   * @return {LayerType} Layer.\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @abstract\n   */\n  handleFontsChanged() {}\n\n  /**\n   * Handle changes in image state.\n   * @param {import(\"../events/Event.js\").default} event Image change event.\n   * @private\n   */\n  handleImageChange_(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    if (image.getState() === ImageState.LOADED) {\n      this.renderIfReadyAndVisible();\n    }\n  }\n\n  /**\n   * Load the image if not already loaded, and register the image change\n   * listener if needed.\n   * @param {import(\"../ImageBase.js\").default} image Image.\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n   * @protected\n   */\n  loadImage(image) {\n    let imageState = image.getState();\n    if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {\n      image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);\n    }\n    if (imageState == ImageState.IDLE) {\n      image.load();\n      imageState = image.getState();\n    }\n    return imageState == ImageState.LOADED;\n  }\n\n  /**\n   * @protected\n   */\n  renderIfReadyAndVisible() {\n    const layer = this.getLayer();\n    if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.layer_;\n    super.disposeInternal();\n  }\n}\n\nexport default LayerRenderer;\n","/**\n * @module ol/render/Event\n */\n\nimport Event from '../events/Event.js';\n\nclass RenderEvent extends Event {\n  /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\n   */\n  constructor(type, inversePixelTransform, frameState, context) {\n    super(type);\n\n    /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */\n    this.inversePixelTransform = inversePixelTransform;\n\n    /**\n     * An object representing the current render frame state.\n     * @type {import(\"../Map.js\").FrameState|undefined}\n     * @api\n     */\n    this.frameState = frameState;\n\n    /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */\n    this.context = context;\n  }\n}\n\nexport default RenderEvent;\n","/**\n * @module ol/color\n */\nimport {assert} from './asserts.js';\nimport {clamp} from './math.js';\n\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\nconst HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\nconst NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  }\n  return toString(color);\n}\n\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\nfunction fromNamed(color) {\n  const el = document.createElement('div');\n  el.style.color = color;\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    const rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  }\n  return '';\n}\n\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport const fromString = (function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  const MAX_CACHE_SIZE = 1024;\n\n  /**\n   * @type {Object<string, Color>}\n   */\n  const cache = {};\n\n  /**\n   * @type {number}\n   */\n  let cacheSize = 0;\n\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      let color;\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          let i = 0;\n          for (const key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n      return color;\n    }\n  );\n})();\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  }\n  return fromString(color);\n}\n\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\nfunction fromStringInternal_(s) {\n  let r, g, b, a, color;\n\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    const n = s.length - 1; // number of hex digits\n    let d; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    const hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.startsWith('rgba(')) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.startsWith('rgb(')) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    assert(false, 14); // Invalid color\n  }\n  return color;\n}\n\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\nexport function normalize(color) {\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  let r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  let g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  let b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n  return HEX_COLOR_RE_.test(s) || s.startsWith('rgba(') || s.startsWith('rgb(');\n}\n","/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {asArray} from '../../color.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {equals} from '../../array.js';\nimport {\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(backgroundColor)\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\nexport default CanvasLayerRenderer;\n","/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageTile from '../../ImageTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {ascending} from '../../array.js';\nimport {\n  containsCoordinate,\n  createEmpty,\n  equals,\n  getHeight,\n  getIntersection,\n  getRotatedViewport,\n  getTopLeft,\n  getWidth,\n  intersects,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {toSize} from '../../size.js';\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */\nclass CanvasTileLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   */\n  constructor(tileLayer) {\n    super(tileLayer);\n\n    /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */\n    this.extentChanged = true;\n\n    /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedPixelRatio;\n\n    /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedRevision;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */\n    this.renderedTiles = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.newTiles_ = false;\n\n    /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.tmpExtent = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */\n    this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const tileLayer = this.getLayer();\n    const tileState = tile.getState();\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return (\n      tileState == TileState.LOADED ||\n      tileState == TileState.EMPTY ||\n      (tileState == TileState.ERROR && !useInterimTilesOnError)\n    );\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n    if (tile.getState() == TileState.ERROR) {\n      if (tileLayer.getUseInterimTilesOnError() && tileLayer.getPreload() > 0) {\n        // Preloaded tiles for lower resolutions might have finished loading.\n        this.newTiles_ = true;\n      }\n    }\n    if (!this.isDrawableTile(tile)) {\n      tile = tile.getInterimTile();\n    }\n    return tile;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const viewState = frameState.viewState;\n    const source = layer.getRenderSource();\n    const tileGrid = source.getTileGridForProjection(viewState.projection);\n    const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = source.getTile(\n        z,\n        tileCoord[1],\n        tileCoord[2],\n        pixelRatio,\n        projection\n      );\n      if (\n        !(tile instanceof ImageTile || tile instanceof ReprojTile) ||\n        (tile instanceof ReprojTile && tile.getState() === TileState.EMPTY)\n      ) {\n        return null;\n      }\n\n      if (tile.getState() !== TileState.LOADED) {\n        continue;\n      }\n\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      const col = Math.floor(\n        tilePixelRatio *\n          ((coordinate[0] - tileOrigin[0]) / tileResolution -\n            tileCoord[1] * tileSize[0])\n      );\n\n      const row = Math.floor(\n        tilePixelRatio *\n          ((tileOrigin[1] - coordinate[1]) / tileResolution -\n            tileCoord[2] * tileSize[1])\n      );\n\n      const gutter = Math.round(\n        tilePixelRatio * source.getGutterForProjection(viewState.projection)\n      );\n\n      return this.getImageData(tile.getImage(), col + gutter, row + gutter);\n    }\n\n    return null;\n  }\n\n  /**\n   * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (this.isDrawableTile(tile)) {\n      return super.loadedTileCallback(tiles, zoom, tile);\n    }\n    return false;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return !!this.getLayer().getSource();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const viewResolution = viewState.resolution;\n    const viewCenter = viewState.center;\n    const rotation = viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    const sourceRevision = tileSource.getRevision();\n    const tileGrid = tileSource.getTileGridForProjection(projection);\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n\n    let extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n    // desired dimensions of the canvas in pixels\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    const layerExtent =\n      layerState.extent && fromUserExtent(layerState.extent, projection);\n    if (layerExtent) {\n      extent = getIntersection(\n        extent,\n        fromUserExtent(layerState.extent, projection)\n      );\n    }\n\n    const dx = (tileResolution * width) / 2 / tilePixelRatio;\n    const dy = (tileResolution * height) / 2 / tilePixelRatio;\n    const canvasExtent = [\n      viewCenter[0] - dx,\n      viewCenter[1] - dy,\n      viewCenter[0] + dx,\n      viewCenter[1] + dy,\n    ];\n\n    const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n\n    /**\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n     */\n    const tilesToDrawByZ = {};\n    tilesToDrawByZ[z] = {};\n\n    const findLoadedTiles = this.createLoadedTileFinder(\n      tileSource,\n      projection,\n      tilesToDrawByZ\n    );\n\n    const tmpExtent = this.tmpExtent;\n    const tmpTileRange = this.tmpTileRange_;\n    this.newTiles_ = false;\n    const viewport = rotation\n      ? getRotatedViewport(\n          viewState.center,\n          resolution,\n          rotation,\n          frameState.size\n        )\n      : undefined;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        if (\n          rotation &&\n          !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n        ) {\n          continue;\n        }\n        const tile = this.getTile(z, x, y, frameState);\n        if (this.isDrawableTile(tile)) {\n          const uid = getUid(this);\n          if (tile.getState() == TileState.LOADED) {\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n            let inTransition = tile.inTransition(uid);\n            if (inTransition && layerState.opacity !== 1) {\n              // Skipping transition when layer is not fully opaque avoids visual artifacts.\n              tile.endTransition(uid);\n              inTransition = false;\n            }\n            if (\n              !this.newTiles_ &&\n              (inTransition || !this.renderedTiles.includes(tile))\n            ) {\n              this.newTiles_ = true;\n            }\n          }\n          if (tile.getAlpha(uid, frameState.time) === 1) {\n            // don't look for alt tiles if alpha is 1\n            continue;\n          }\n        }\n\n        const childTileRange = tileGrid.getTileCoordChildTileRange(\n          tile.tileCoord,\n          tmpTileRange,\n          tmpExtent\n        );\n\n        let covered = false;\n        if (childTileRange) {\n          covered = findLoadedTiles(z + 1, childTileRange);\n        }\n        if (!covered) {\n          tileGrid.forEachTileCoordParentTileRange(\n            tile.tileCoord,\n            findLoadedTiles,\n            tmpTileRange,\n            tmpExtent\n          );\n        }\n      }\n    }\n\n    const canvasScale =\n      ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    // set scale transform for calculating tile positions on the canvas\n    composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      canvasScale,\n      canvasScale,\n      0,\n      -width / 2,\n      -height / 2\n    );\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    if (layerExtent) {\n      this.clipUnrotated(context, frameState, layerExtent);\n    }\n\n    if (!tileSource.getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n\n    this.renderedTiles.length = 0;\n    /** @type {Array<number>} */\n    let zs = Object.keys(tilesToDrawByZ).map(Number);\n    zs.sort(ascending);\n\n    let clips, clipZs, currentClip;\n    if (\n      layerState.opacity === 1 &&\n      (!this.containerReused ||\n        tileSource.getOpaque(frameState.viewState.projection))\n    ) {\n      zs = zs.reverse();\n    } else {\n      clips = [];\n      clipZs = [];\n    }\n    for (let i = zs.length - 1; i >= 0; --i) {\n      const currentZ = zs[i];\n      const currentTilePixelSize = tileSource.getTilePixelSize(\n        currentZ,\n        pixelRatio,\n        projection\n      );\n      const currentResolution = tileGrid.getResolution(currentZ);\n      const currentScale = currentResolution / tileResolution;\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(\n        getTopLeft(canvasExtent),\n        currentZ\n      );\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n      const origin = applyTransform(this.tempTransform, [\n        (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n          tileResolution,\n        (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n          tileResolution,\n      ]);\n      const tileGutter =\n        tilePixelRatio * tileSource.getGutterForProjection(projection);\n      const tilesToDraw = tilesToDrawByZ[currentZ];\n      for (const tileCoordKey in tilesToDraw) {\n        const tile = /** @type {import(\"../../ImageTile.js\").default} */ (\n          tilesToDraw[tileCoordKey]\n        );\n        const tileCoord = tile.tileCoord;\n\n        // Calculate integer positions and sizes so that tiles align\n        const xIndex = originTileCoord[1] - tileCoord[1];\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n        const yIndex = originTileCoord[2] - tileCoord[2];\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n        const x = Math.round(origin[0] - xIndex * dx);\n        const y = Math.round(origin[1] - yIndex * dy);\n        const w = nextX - x;\n        const h = nextY - y;\n        const transition = z === currentZ;\n\n        const inTransition =\n          transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n        let contextSaved = false;\n        if (!inTransition) {\n          if (clips) {\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n            for (let i = 0, ii = clips.length; i < ii; ++i) {\n              if (z !== currentZ && currentZ < clipZs[i]) {\n                const clip = clips[i];\n                if (\n                  intersects(\n                    [x, y, x + w, y + h],\n                    [clip[0], clip[3], clip[4], clip[7]]\n                  )\n                ) {\n                  if (!contextSaved) {\n                    context.save();\n                    contextSaved = true;\n                  }\n                  context.beginPath();\n                  // counter-clockwise (outer ring) for current tile\n                  context.moveTo(currentClip[0], currentClip[1]);\n                  context.lineTo(currentClip[2], currentClip[3]);\n                  context.lineTo(currentClip[4], currentClip[5]);\n                  context.lineTo(currentClip[6], currentClip[7]);\n                  // clockwise (inner ring) for higher z tile\n                  context.moveTo(clip[6], clip[7]);\n                  context.lineTo(clip[4], clip[5]);\n                  context.lineTo(clip[2], clip[3]);\n                  context.lineTo(clip[0], clip[1]);\n                  context.clip();\n                }\n              }\n            }\n            clips.push(currentClip);\n            clipZs.push(currentZ);\n          } else {\n            context.clearRect(x, y, w, h);\n          }\n        }\n        this.drawTileImage(\n          tile,\n          frameState,\n          x,\n          y,\n          w,\n          h,\n          tileGutter,\n          transition\n        );\n        if (clips && !inTransition) {\n          if (contextSaved) {\n            context.restore();\n          }\n          this.renderedTiles.unshift(tile);\n        } else {\n          this.renderedTiles.push(tile);\n        }\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n      }\n    }\n\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution;\n    this.extentChanged =\n      !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n    this.renderedExtent_ = canvasExtent;\n    this.renderedPixelRatio = pixelRatio;\n    this.renderedProjection = projection;\n\n    this.manageTilePyramid(\n      frameState,\n      tileSource,\n      tileGrid,\n      pixelRatio,\n      projection,\n      extent,\n      z,\n      tileLayer.getPreload()\n    );\n    this.scheduleExpireCache(frameState, tileSource);\n\n    this.postRender(context, frameState);\n\n    if (layerState.extent) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n\n  /**\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   */\n  drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {\n    const image = this.getTileImage(tile);\n    if (!image) {\n      return;\n    }\n    const uid = getUid(this);\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const alpha =\n      layerState.opacity *\n      (transition ? tile.getAlpha(uid, frameState.time) : 1);\n    const alphaChanged = alpha !== this.context.globalAlpha;\n    if (alphaChanged) {\n      this.context.save();\n      this.context.globalAlpha = alpha;\n    }\n    this.context.drawImage(\n      image,\n      gutter,\n      gutter,\n      image.width - 2 * gutter,\n      image.height - 2 * gutter,\n      x,\n      y,\n      w,\n      h\n    );\n\n    if (alphaChanged) {\n      this.context.restore();\n    }\n    if (alpha !== layerState.opacity) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image\n   */\n  getImage() {\n    const context = this.context;\n    return context ? context.canvas : null;\n  }\n\n  /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  getTileImage(tile) {\n    return tile.getImage();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @protected\n   */\n  scheduleExpireCache(frameState, tileSource) {\n    if (tileSource.canExpireCache()) {\n      /**\n       * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n       * @param {import(\"../../Map.js\").default} map Map.\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n       */\n      const postRenderFunction = function (tileSource, map, frameState) {\n        const tileSourceKey = getUid(tileSource);\n        if (tileSourceKey in frameState.usedTiles) {\n          tileSource.expireCache(\n            frameState.viewState.projection,\n            frameState.usedTiles[tileSourceKey]\n          );\n        }\n      }.bind(null, tileSource);\n\n      frameState.postRenderFunctions.push(\n        /** @type {import(\"../../Map.js\").PostRenderFunction} */ (\n          postRenderFunction\n        )\n      );\n    }\n  }\n\n  /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */\n  updateUsedTiles(usedTiles, tileSource, tile) {\n    // FIXME should we use tilesToDrawByZ instead?\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in usedTiles)) {\n      usedTiles[tileSourceKey] = {};\n    }\n    usedTiles[tileSourceKey][tile.getKey()] = true;\n  }\n\n  /**\n   * Manage tile pyramid.\n   * This function performs a number of functions related to the tiles at the\n   * current zoom and lower zoom levels:\n   * - registers idle tiles in frameState.wantedTiles so that they are not\n   *   discarded by the tile queue\n   * - enqueues missing tiles\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {number} currentZ Current Z.\n   * @param {number} preload Load low resolution tiles up to `preload` levels.\n   * @param {function(import(\"../../Tile.js\").default):void} [tileCallback] Tile callback.\n   * @protected\n   */\n  manageTilePyramid(\n    frameState,\n    tileSource,\n    tileGrid,\n    pixelRatio,\n    projection,\n    extent,\n    currentZ,\n    preload,\n    tileCallback\n  ) {\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileQueue = frameState.tileQueue;\n    const minZoom = tileGrid.getMinZoom();\n    const rotation = frameState.viewState.rotation;\n    const viewport = rotation\n      ? getRotatedViewport(\n          frameState.viewState.center,\n          frameState.viewState.resolution,\n          rotation,\n          frameState.size\n        )\n      : undefined;\n    let tileCount = 0;\n    let tile, tileRange, tileResolution, x, y, z;\n    for (z = minZoom; z <= currentZ; ++z) {\n      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n      tileResolution = tileGrid.getResolution(z);\n      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (\n            rotation &&\n            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n          ) {\n            continue;\n          }\n          if (currentZ - z <= preload) {\n            ++tileCount;\n            tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n            if (tile.getState() == TileState.IDLE) {\n              wantedTiles[tile.getKey()] = true;\n              if (!tileQueue.isKeyQueued(tile.getKey())) {\n                tileQueue.enqueue([\n                  tile,\n                  tileSourceKey,\n                  tileGrid.getTileCoordCenter(tile.tileCoord),\n                  tileResolution,\n                ]);\n              }\n            }\n            if (tileCallback !== undefined) {\n              tileCallback(tile);\n            }\n          } else {\n            tileSource.useTile(z, x, y, projection);\n          }\n        }\n      }\n    }\n    tileSource.updateCacheSize(tileCount, projection);\n  }\n}\n\nexport default CanvasTileLayerRenderer;\n","/**\n * @module ol/layer/Tile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\n * @api\n */\nclass TileLayer extends BaseTileLayer {\n  /**\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  createRenderer() {\n    return new CanvasTileLayerRenderer(this);\n  }\n}\n\nexport default TileLayer;\n","(function(global) {\n    'use strict';\n\n    var util = newUtil();\n    var inliner = newInliner();\n    var fontFaces = newFontFaces();\n    var images = newImages();\n\n    // Default impl options\n    var defaultOptions = {\n        // Default is to fail on error, no placeholder\n        imagePlaceholder: undefined,\n        // Default cache bust is false, it will use the cache\n        cacheBust: false,\n        // Use (existing) authentication credentials for external URIs (CORS requests)\n        useCredentials: false\n    };\n\n    var domtoimage = {\n        toSvg: toSvg,\n        toPng: toPng,\n        toJpeg: toJpeg,\n        toBlob: toBlob,\n        toPixelData: toPixelData,\n        toCanvas: toCanvas,\n        impl: {\n            fontFaces: fontFaces,\n            images: images,\n            util: util,\n            inliner: inliner,\n            options: {}\n        }\n    };\n\n    if (typeof exports === \"object\" && typeof module === \"object\")\n        module.exports = domtoimage;\n    else\n        global.domtoimage = domtoimage;\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options\n     * @param {Function} options.filter - Should return true if passed node should be included in the output\n     *          (excluding node means excluding it's children as well). Not called on the root node.\n     * @param {String} options.bgcolor - color for the background, any valid CSS color value.\n     * @param {Number} options.width - width to be applied to node before rendering.\n     * @param {Number} options.height - height to be applied to node before rendering.\n     * @param {Object} options.style - an object whose properties to be copied to node's style before rendering.\n     * @param {Number} options.quality - a Number between 0 and 1 indicating image quality (applicable to JPEG only),\n     defaults to 1.0.\n     * @param {Number} options.scale - a Number multiplier to scale up the canvas before rendering to reduce fuzzy images, defaults to 1.0.\n     * @param {String} options.imagePlaceholder - dataURL to use as a placeholder for failed images, default behaviour is to fail fast on images we can't fetch\n     * @param {Boolean} options.cacheBust - set to true to cache bust by appending the time to the request url\n     * @return {Promise} - A promise that is fulfilled with a SVG image data URL\n     * */\n    function toSvg(node, options) {\n        options = options || {};\n        copyOptions(options);\n        return Promise.resolve(node)\n        .then(function(node) {\n            return cloneNode(node, options.filter, true);\n        })\n        .then(embedFonts)\n        .then(inlineImages)\n        .then(applyOptions)\n        .then(function(clone) {\n            return makeSvgDataUri(clone,\n              options.width || util.width(node),\n              options.height || util.height(node)\n            );\n        });\n\n        function applyOptions(clone) {\n            if (options.bgcolor) clone.style.backgroundColor = options.bgcolor;\n            if (options.width) clone.style.width = options.width + 'px';\n            if (options.height) clone.style.height = options.height + 'px';\n\n            if (options.style)\n                Object.keys(options.style).forEach(function(property) {\n                    clone.style[property] = options.style[property];\n                });\n\n            return clone;\n        }\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a Uint8Array containing RGBA pixel data.\n     * */\n    function toPixelData(node, options) {\n        return draw(node, options || {})\n        .then(function(canvas) {\n            return canvas.getContext('2d').getImageData(\n              0,\n              0,\n              util.width(node),\n              util.height(node)\n            ).data;\n        });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image data URL\n     * */\n    function toPng(node, options) {\n        return draw(node, options || {})\n        .then(function(canvas) {\n            return canvas.toDataURL();\n        });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a JPEG image data URL\n     * */\n    function toJpeg(node, options) {\n        options = options || {};\n        return draw(node, options)\n        .then(function(canvas) {\n            return canvas.toDataURL('image/jpeg', options.quality || 1.0);\n        });\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a PNG image blob\n     * */\n    function toBlob(node, options) {\n        return draw(node, options || {})\n        .then(util.canvasToBlob);\n    }\n\n    /**\n     * @param {Node} node - The DOM Node object to render\n     * @param {Object} options - Rendering options, @see {@link toSvg}\n     * @return {Promise} - A promise that is fulfilled with a canvas object\n     * */\n    function toCanvas(node, options) {\n        return draw(node, options || {});\n    }\n\n    function copyOptions(options) {\n        // Copy options to impl options for use in impl\n        if (typeof(options.imagePlaceholder) === 'undefined') {\n            domtoimage.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;\n        } else {\n            domtoimage.impl.options.imagePlaceholder = options.imagePlaceholder;\n        }\n\n        if (typeof(options.cacheBust) === 'undefined') {\n            domtoimage.impl.options.cacheBust = defaultOptions.cacheBust;\n        } else {\n            domtoimage.impl.options.cacheBust = options.cacheBust;\n        }\n\n        if(typeof(options.useCredentials) === 'undefined') {\n            domtoimage.impl.options.useCredentials = defaultOptions.useCredentials;\n        } else {\n            domtoimage.impl.options.useCredentials = options.useCredentials;\n        }\n    }\n\n    function draw(domNode, options) {\n        return toSvg(domNode, options)\n        .then(util.makeImage)\n        .then(util.delay(100))\n        .then(function(image) {\n            var scale = typeof(options.scale) !== 'number' ? 1 : options.scale;\n            console.log('scale', scale);\n            var canvas = newCanvas(domNode, scale);\n            var ctx = canvas.getContext('2d');\n            if (image) {\n                //console.log('should be scaled', image);\n                ctx.scale(scale, scale);\n                //canvas.height = 620;\n                //ctx.drawImage(image, 150, 600, 1150, 700, 0, 0, 1150, 700);\n                // canvas.height = options.image.height + 50;\n                // //canvas.width = options.image.width - 135;// - options.image.offsetRight\n                // canvas.width = options.image.width - options.image.offsetRight - options.image.offsetLeft + 60;\n                // ctx.drawImage(image, options.image.offsetLeft, options.image.offsetTop - 50, options.image.width, options.image.height + 50, 0, 0, options.image.width, options.image.height);\n\n                if (options.canvas && options.canvas.width) {\n                    canvas.width = options.canvas.width;\n                }\n\n                if (options.canvas && options.canvas.height) {\n                    canvas.height = options.canvas.height;\n                }\n\n                if (options.canvas) {\n                    console.log('canv', options.canvas);\n                    ctx.drawImage(\n                      image,\n                      options.canvas.sx  || 0,\n                      options.canvas.sy || 0,\n                      options.canvas.sw || options.width,\n                      options.canvas.sh || options.height,\n                      options.canvas.dx || 0,\n                      options.canvas.dy || 0,\n                      options.canvas.dw || options.width,\n                      options.canvas.dh || options.height\n                    );\n                } else {\n                    ctx.drawImage(image, 0, 0);\n                }\n\n            }\n            return canvas;\n        });\n\n        function newCanvas(domNode, scale) {\n            var canvas = document.createElement('canvas');\n            canvas.width = (options.width || util.width(domNode)) * scale;\n            canvas.height = (options.height || util.height(domNode)) * scale;\n\n            console.log(canvas.width, canvas.height);\n\n            if (options.bgcolor) {\n                var ctx = canvas.getContext('2d');\n                ctx.fillStyle = options.bgcolor;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n\n            return canvas;\n        }\n    }\n\n    function cloneNode(node, filter, root) {\n        if (!root && filter && !filter(node)) return Promise.resolve();\n\n        return Promise.resolve(node)\n        .then(makeNodeCopy)\n        .then(function(clone) {\n            return cloneChildren(node, clone, filter);\n        })\n        .then(function(clone) {\n            return processClone(node, clone);\n        });\n\n        function makeNodeCopy(node) {\n            if (node instanceof HTMLCanvasElement) return util.makeImage(node.toDataURL());\n            return node.cloneNode(false);\n        }\n\n        function cloneChildren(original, clone, filter) {\n            var children = original.tagName === 'use' ? copyShadowChild(original) : original.childNodes;\n            if (children.length === 0) return Promise.resolve(clone);\n\n            return cloneChildrenInOrder(clone, util.asArray(children), filter)\n            .then(function() {\n                return clone;\n            });\n\n            function cloneChildrenInOrder(parent, children, filter) {\n                var done = Promise.resolve();\n                children.forEach(function(child) {\n                    done = done\n                    .then(function() {\n                        return cloneNode(child, filter);\n                    })\n                    .then(function(childClone) {\n                        if (childClone) parent.appendChild(childClone);\n                    });\n                });\n                return done;\n            }\n        }\n\n        function copyShadowChild(original) {\n            var child = document.getElementById(original.href.baseVal.replace('#', ''));\n            return [child.cloneNode(true)];\n        }\n\n        function processClone(original, clone) {\n            if (!(clone instanceof Element)) return clone;\n\n            return Promise.resolve()\n            .then(cloneStyle)\n            .then(clonePseudoElements)\n            .then(copyUserInput)\n            .then(fixSvg)\n            .then(function() {\n                return clone;\n            });\n\n            function cloneStyle() {\n                copyStyle(window.getComputedStyle(original), clone.style);\n\n                if (util.isChrome() && clone.style.marker && ( clone.tagName === 'line' || clone.tagName === 'path')) {\n                    clone.style.marker = '';\n                }\n\n                function copyStyle(source, target) {\n                    if (source.cssText) {\n                        target.cssText = source.cssText;\n                        target.font = source.font; // here, we re-assign the font prop.\n                    } else copyProperties(source, target);\n\n                    function copyProperties(source, target) {\n                        util.asArray(source).forEach(function(name) {\n                            target.setProperty(\n                              name,\n                              source.getPropertyValue(name),\n                              source.getPropertyPriority(name)\n                            );\n                        });\n                    }\n                }\n            }\n\n            function clonePseudoElements() {\n                [':before', ':after'].forEach(function(element) {\n                    clonePseudoElement(element);\n                });\n\n                function clonePseudoElement(element) {\n                    var style = window.getComputedStyle(original, element);\n                    var content = style.getPropertyValue('content');\n\n                    if (content === '' || content === 'none') return;\n\n                    var className = util.uid();\n                    var currentClass = clone.getAttribute('class');\n                    if (currentClass) {\n                        clone.setAttribute('class', currentClass + ' ' + className);\n                    }\n\n                    var styleElement = document.createElement('style');\n                    styleElement.appendChild(formatPseudoElementStyle(className, element, style));\n                    clone.appendChild(styleElement);\n\n                    function formatPseudoElementStyle(className, element, style) {\n                        var selector = '.' + className + ':' + element;\n                        var cssText = style.cssText ? formatCssText(style) : formatCssProperties(style);\n                        return document.createTextNode(selector + '{' + cssText + '}');\n\n                        function formatCssText(style) {\n                            var content = style.getPropertyValue('content');\n                            return style.cssText + ' content: ' + content + ';';\n                        }\n\n                        function formatCssProperties(style) {\n\n                            return util.asArray(style)\n                            .map(formatProperty)\n                            .join('; ') + ';';\n\n                            function formatProperty(name) {\n                                return name + ': ' +\n                                  style.getPropertyValue(name) +\n                                  (style.getPropertyPriority(name) ? ' !important' : '');\n                            }\n                        }\n                    }\n                }\n            }\n\n            function copyUserInput() {\n                if (original instanceof HTMLTextAreaElement) clone.innerHTML = original.value;\n                if (original instanceof HTMLInputElement) clone.setAttribute(\"value\", original.value);\n            }\n\n            function fixSvg() {\n                if (!(clone instanceof SVGElement)) return;\n                clone.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n                if (!(clone instanceof SVGRectElement)) return;\n                ['width', 'height'].forEach(function(attribute) {\n                    var value = clone.getAttribute(attribute);\n                    if (!value) return;\n\n                    clone.style.setProperty(attribute, value);\n                });\n            }\n        }\n    }\n\n    function embedFonts(node) {\n        return fontFaces.resolveAll()\n        .then(function(cssText) {\n            var styleNode = document.createElement('style');\n            node.appendChild(styleNode);\n            styleNode.appendChild(document.createTextNode(cssText));\n            return node;\n        });\n    }\n\n    function inlineImages(node) {\n        return images.inlineAll(node)\n        .then(function() {\n            return node;\n        });\n    }\n\n    function makeSvgDataUri(node, width, height) {\n        return Promise.resolve(node)\n        .then(function(node) {\n            node.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n            return new XMLSerializer().serializeToString(node);\n        })\n        .then(util.escapeXhtml)\n        .then(function(xhtml) {\n            return '<foreignObject x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">' + xhtml + '</foreignObject>';\n        })\n        .then(function(foreignObject) {\n            return '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + width + '\" height=\"' + height + '\">' +\n              foreignObject + '</svg>';\n        })\n        .then(function(svg) {\n            return 'data:image/svg+xml;charset=utf-8,' + svg;\n        });\n    }\n\n    function newUtil() {\n        return {\n            escape: escape,\n            parseExtension: parseExtension,\n            mimeType: mimeType,\n            dataAsUrl: dataAsUrl,\n            isDataUrl: isDataUrl,\n            canvasToBlob: canvasToBlob,\n            resolveUrl: resolveUrl,\n            getAndEncode: getAndEncode,\n            uid: uid(),\n            delay: delay,\n            asArray: asArray,\n            isChrome: isChrome,\n            escapeXhtml: escapeXhtml,\n            makeImage: makeImage,\n            width: width,\n            height: height\n        };\n\n        function mimes() {\n            /*\n             * Only WOFF and EOT mime types for fonts are 'real'\n             * see http://www.iana.org/assignments/media-types/media-types.xhtml\n             */\n            var WOFF = 'application/font-woff';\n            var JPEG = 'image/jpeg';\n\n            return {\n                'woff': WOFF,\n                'woff2': WOFF,\n                'ttf': 'application/font-truetype',\n                'eot': 'application/vnd.ms-fontobject',\n                'png': 'image/png',\n                'jpg': JPEG,\n                'jpeg': JPEG,\n                'gif': 'image/gif',\n                'tiff': 'image/tiff',\n                'svg': 'image/svg+xml'\n            };\n        }\n\n        function parseExtension(url) {\n            var match = /\\.([^\\.\\/]*?)(\\?|$)/g.exec(url);\n            if (match) return match[1];\n            else return '';\n        }\n\n        function mimeType(url) {\n            var extension = parseExtension(url).toLowerCase();\n            return mimes()[extension] || '';\n        }\n\n        function isDataUrl(url) {\n            return url.search(/^(data:)/) !== -1;\n        }\n\n        function toBlob(canvas) {\n            return new Promise(function(resolve) {\n                var binaryString = window.atob(canvas.toDataURL().split(',')[1]);\n                var length = binaryString.length;\n                var binaryArray = new Uint8Array(length);\n\n                for (var i = 0; i < length; i++)\n                    binaryArray[i] = binaryString.charCodeAt(i);\n\n                resolve(new Blob([binaryArray], {\n                    type: 'image/png'\n                }));\n            });\n        }\n\n        function canvasToBlob(canvas) {\n            if (canvas.toBlob)\n                return new Promise(function(resolve) {\n                    canvas.toBlob(resolve);\n                });\n\n            return toBlob(canvas);\n        }\n\n        function resolveUrl(url, baseUrl) {\n            var doc = document.implementation.createHTMLDocument();\n            var base = doc.createElement('base');\n            doc.head.appendChild(base);\n            var a = doc.createElement('a');\n            doc.body.appendChild(a);\n            base.href = baseUrl;\n            a.href = url;\n            return a.href;\n        }\n\n        function uid() {\n            var index = 0;\n\n            return function() {\n                return 'u' + fourRandomChars() + index++;\n\n                function fourRandomChars() {\n                    /* see http://stackoverflow.com/a/6248722/2519373 */\n                    return ('0000' + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n                }\n            };\n        }\n\n        function makeImage(uri) {\n            if (uri === 'data:,') return Promise.resolve();\n            return new Promise(function(resolve, reject) {\n                var image = new Image();\n                if(domtoimage.impl.options.useCredentials) {\n                    image.crossOrigin = 'use-credentials';\n                }\n                image.onload = function() {\n                    resolve(image);\n                };\n                image.onerror = reject;\n                image.src = uri;\n            });\n        }\n\n        function getAndEncode(url) {\n            var TIMEOUT = 30000;\n            if (domtoimage.impl.options.cacheBust) {\n                // Cache bypass so we dont have CORS issues with cached images\n                // Source: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n                url += ((/\\?/).test(url) ? \"&\" : \"?\") + (new Date()).getTime();\n            }\n\n            return new Promise(function(resolve) {\n                var request = new XMLHttpRequest();\n\n                request.onreadystatechange = done;\n                request.ontimeout = timeout;\n                request.responseType = 'blob';\n                request.timeout = TIMEOUT;\n                if(domtoimage.impl.options.useCredentials) {\n                    request.withCredentials = true;\n                }\n                request.open('GET', url, true);\n                request.send();\n\n                var placeholder;\n                if (domtoimage.impl.options.imagePlaceholder) {\n                    var split = domtoimage.impl.options.imagePlaceholder.split(/,/);\n                    if (split && split[1]) {\n                        placeholder = split[1];\n                    }\n                }\n\n                function done() {\n                    if (request.readyState !== 4) return;\n\n                    if (request.status !== 200) {\n                        if (placeholder) {\n                            resolve(placeholder);\n                        } else {\n                            fail('cannot fetch resource: ' + url + ', status: ' + request.status);\n                        }\n\n                        return;\n                    }\n\n                    var encoder = new FileReader();\n                    encoder.onloadend = function() {\n                        var content = encoder.result.split(/,/)[1];\n                        resolve(content);\n                    };\n                    encoder.readAsDataURL(request.response);\n                }\n\n                function timeout() {\n                    if (placeholder) {\n                        resolve(placeholder);\n                    } else {\n                        fail('timeout of ' + TIMEOUT + 'ms occured while fetching resource: ' + url);\n                    }\n                }\n\n                function fail(message) {\n                    console.error(message);\n                    resolve('');\n                }\n            });\n        }\n\n        function dataAsUrl(content, type) {\n            return 'data:' + type + ';base64,' + content;\n        }\n\n        function escape(string) {\n            return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n        }\n\n        function isChrome() {\n            return /chrome/i.test( navigator.userAgent );\n        }\n\n        function delay(ms) {\n            return function(arg) {\n                return new Promise(function(resolve) {\n                    setTimeout(function() {\n                        resolve(arg);\n                    }, ms);\n                });\n            };\n        }\n\n        function asArray(arrayLike) {\n            var array = [];\n            var length = arrayLike.length;\n            for (var i = 0; i < length; i++) array.push(arrayLike[i]);\n            return array;\n        }\n\n        function escapeXhtml(string) {\n            return string.replace(/#/g, '%23').replace(/\\n/g, '%0A');\n        }\n\n        function width(node) {\n            var leftBorder = px(node, 'border-left-width');\n            var rightBorder = px(node, 'border-right-width');\n            return node.scrollWidth + leftBorder + rightBorder;\n        }\n\n        function height(node) {\n            var topBorder = px(node, 'border-top-width');\n            var bottomBorder = px(node, 'border-bottom-width');\n            return node.scrollHeight + topBorder + bottomBorder;\n        }\n\n        function px(node, styleProperty) {\n            var value = window.getComputedStyle(node).getPropertyValue(styleProperty);\n            return parseFloat(value.replace('px', ''));\n        }\n    }\n\n    function newInliner() {\n        var URL_REGEX = /url\\(['\"]?([^'\"]+?)['\"]?\\)/g;\n\n        return {\n            inlineAll: inlineAll,\n            shouldProcess: shouldProcess,\n            impl: {\n                readUrls: readUrls,\n                inline: inline\n            }\n        };\n\n        function shouldProcess(string) {\n            return string.search(URL_REGEX) !== -1;\n        }\n\n        function readUrls(string) {\n            var result = [];\n            var match;\n            while ((match = URL_REGEX.exec(string)) !== null) {\n                result.push(match[1]);\n            }\n            return result.filter(function(url) {\n                return !util.isDataUrl(url);\n            });\n        }\n\n        function inline(string, url, baseUrl, get) {\n            return Promise.resolve(url)\n            .then(function(url) {\n                return baseUrl ? util.resolveUrl(url, baseUrl) : url;\n            })\n            .then(get || util.getAndEncode)\n            .then(function(data) {\n                return util.dataAsUrl(data, util.mimeType(url));\n            })\n            .then(function(dataUrl) {\n                return string.replace(urlAsRegex(url), '$1' + dataUrl + '$3');\n            });\n\n            function urlAsRegex(url) {\n                return new RegExp('(url\\\\([\\'\"]?)(' + util.escape(url) + ')([\\'\"]?\\\\))', 'g');\n            }\n        }\n\n        function inlineAll(string, baseUrl, get) {\n            if (nothingToInline()) return Promise.resolve(string);\n\n            return Promise.resolve(string)\n            .then(readUrls)\n            .then(function(urls) {\n                var done = Promise.resolve(string);\n                urls.forEach(function(url) {\n                    done = done.then(function(string) {\n                        return inline(string, url, baseUrl, get);\n                    });\n                });\n                return done;\n            });\n\n            function nothingToInline() {\n                return !shouldProcess(string);\n            }\n        }\n    }\n\n    function newFontFaces() {\n        return {\n            resolveAll: resolveAll,\n            impl: {\n                readAll: readAll\n            }\n        };\n\n        function resolveAll() {\n            return readAll(document)\n            .then(function(webFonts) {\n                return Promise.all(\n                  webFonts.map(function(webFont) {\n                      return webFont.resolve();\n                  })\n                );\n            })\n            .then(function(cssStrings) {\n                return cssStrings.join('\\n');\n            });\n        }\n\n        function readAll() {\n            return Promise.resolve(util.asArray(document.styleSheets))\n            .then(getCssRules)\n            .then(selectWebFontRules)\n            .then(function(rules) {\n                return rules.map(newWebFont);\n            });\n\n            function selectWebFontRules(cssRules) {\n                return cssRules\n                .filter(function(rule) {\n                    return rule.type === CSSRule.FONT_FACE_RULE;\n                })\n                .filter(function(rule) {\n                    return inliner.shouldProcess(rule.style.getPropertyValue('src'));\n                });\n            }\n\n            function getCssRules(styleSheets) {\n                var cssRules = [];\n                styleSheets.forEach(function(sheet) {\n                    if (sheet.hasOwnProperty(\"cssRules\")) {\n                        try {\n                            util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));\n                        } catch (e) {\n                            console.log('Error while reading CSS rules from ' + sheet.href, e.toString());\n                        }\n                    }\n                });\n                return cssRules;\n            }\n\n            function newWebFont(webFontRule) {\n                return {\n                    resolve: function resolve() {\n                        var baseUrl = (webFontRule.parentStyleSheet || {}).href;\n                        return inliner.inlineAll(webFontRule.cssText, baseUrl);\n                    },\n                    src: function() {\n                        return webFontRule.style.getPropertyValue('src');\n                    }\n                };\n            }\n        }\n    }\n\n    function newImages() {\n        return {\n            inlineAll: inlineAll,\n            impl: {\n                newImage: newImage\n            }\n        };\n\n        function newImage(element) {\n            return {\n                inline: inline\n            };\n\n            function inline(get) {\n                if (util.isDataUrl(element.src)) return Promise.resolve();\n\n                return Promise.resolve(element.src)\n                .then(get || util.getAndEncode)\n                .then(function(data) {\n                    return util.dataAsUrl(data, util.mimeType(element.src));\n                })\n                .then(function(dataUrl) {\n                    return new Promise(function(resolve, reject) {\n                        element.onload = resolve;\n                        // for any image with invalid src(such as <img src />), just ignore it\n                        element.onerror = resolve;\n                        element.src = dataUrl;\n                    });\n                });\n            }\n        }\n\n        function inlineAll(node) {\n            if (!(node instanceof Element)) return Promise.resolve(node);\n\n            return inlineBackground(node)\n            .then(function() {\n                if (node instanceof HTMLImageElement)\n                    return newImage(node).inline();\n                else\n                    return Promise.all(\n                      util.asArray(node.childNodes).map(function(child) {\n                          return inlineAll(child);\n                      })\n                    );\n            });\n\n            function inlineBackground(node) {\n                var background = node.style.getPropertyValue('background');\n\n                if (!background) return Promise.resolve(node);\n\n                return inliner.inlineAll(background)\n                .then(function(inlined) {\n                    node.style.setProperty(\n                      'background',\n                      inlined,\n                      node.style.getPropertyPriority('background')\n                    );\n                })\n                .then(function() {\n                    return node;\n                });\n            }\n        }\n    }\n})(this);\n","export default function createElement(tagName, attrs = {}, ...children) {\r\n    if (tagName === 'null' || tagName === null) return children;\r\n    if (typeof tagName === 'function') return tagName(attrs, children);\r\n\r\n    const elem = document.createElement(tagName);\r\n\r\n    Object.entries(attrs || {}).forEach(([name, value]) => {\r\n        if (typeof value !== undefined && value !== null) {\r\n            if (\r\n                name.startsWith('on') &&\r\n                name.toLowerCase() in window &&\r\n                typeof value === 'function'\r\n            )\r\n                elem.addEventListener(name.toLowerCase().substr(2), value);\r\n            else {\r\n                if (name === 'className')\r\n                    elem.setAttribute('class', value.toString());\r\n                else if (name === 'htmlFor')\r\n                    elem.setAttribute('for', value.toString());\r\n                else elem.setAttribute(name, value.toString());\r\n            }\r\n        }\r\n    });\r\n\r\n    for (const child of children) {\r\n        if (!child) continue;\r\n        if (Array.isArray(child)) elem.append(...child);\r\n        else {\r\n            if (child.nodeType === undefined) elem.innerHTML += child;\r\n            else elem.appendChild(child);\r\n        }\r\n    }\r\n    return elem;\r\n}\r\n","import View from 'ol/View.js';\r\nimport { getPointResolution } from 'ol/proj.js';\r\n\r\nimport { jsPDF, TextOptionsLight } from 'jspdf';\r\nimport { getDocument, GlobalWorkerOptions, version } from 'pdfjs-dist';\r\n\r\nimport { I18n, Options, IPrintOptions, IWatermark } from '../ol-pdf-printer';\r\n\r\nimport myPragma from '../myPragma';\r\n\r\n/**\r\n * @private\r\n */\r\nexport default class Pdf {\r\n    protected _pdf: IPdf;\r\n    protected _view: View;\r\n    protected _scaleDenominator: number;\r\n    protected _form: IPrintOptions;\r\n    protected _style: Options['style'];\r\n    protected _i18n: I18n;\r\n\r\n    protected _config: Options;\r\n\r\n    constructor(params: IPdfOptions) {\r\n        const { view, form, i18n, config, height, width, scaleResolution } =\r\n            params;\r\n\r\n        this._view = view;\r\n        this._form = form;\r\n        this._i18n = i18n;\r\n        this._config = config;\r\n\r\n        this._pdf = this.create(\r\n            this._form.orientation,\r\n            this._form.format,\r\n            height,\r\n            width\r\n        );\r\n\r\n        this._scaleDenominator = this._calculateScaleDenominator(\r\n            this._form.resolution,\r\n            scaleResolution\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param orientation\r\n     * @param format\r\n     * @param width\r\n     * @param height\r\n     * @returns\r\n     * @protected\r\n     */\r\n    create(\r\n        orientation: IPrintOptions['orientation'],\r\n        format: IPrintOptions['format'],\r\n        height: number,\r\n        width: number\r\n    ): IPdf {\r\n        // UMD support\r\n        const _jsPDF =\r\n            (window as IWindow & typeof globalThis).jspdf?.jsPDF || jsPDF;\r\n\r\n        return {\r\n            doc: new _jsPDF({ orientation, format }),\r\n            height: height,\r\n            width: width\r\n        };\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param dataUrl\r\n     * @protected\r\n     */\r\n    addMapImage(dataUrl: string): void {\r\n        this._pdf.doc.addImage(\r\n            dataUrl,\r\n            'JPEG',\r\n            this._config.style.paperMargin, // Add margins\r\n            this._config.style.paperMargin,\r\n            this._pdf.width - this._config.style.paperMargin * 2,\r\n            this._pdf.height - this._config.style.paperMargin * 2\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @protected\r\n     */\r\n    addMapHelpers = async (): Promise<void> => {\r\n        const { mapElements, extraInfo, style, watermark } = this._config;\r\n\r\n        this._style = style;\r\n\r\n        if (watermark) {\r\n            await this._addWatermark(watermark);\r\n        }\r\n\r\n        if (mapElements) {\r\n            if (mapElements.compass && this._form.compass) {\r\n                await this._addCompass(mapElements.compass);\r\n            }\r\n\r\n            if (mapElements.description && this._form.description) {\r\n                this._addDescription();\r\n            }\r\n\r\n            if (mapElements.scalebar && this._form.scalebar) {\r\n                this._addScaleBar();\r\n            }\r\n\r\n            if (mapElements.attributions && this._form.attributions) {\r\n                this._addAttributions();\r\n            }\r\n        }\r\n\r\n        if (extraInfo) {\r\n            // Bottom info\r\n            if (extraInfo.url) {\r\n                this._addUrl();\r\n            }\r\n\r\n            if (extraInfo.date) {\r\n                this._addDate();\r\n            }\r\n\r\n            if (extraInfo.specs) {\r\n                this._addSpecs();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    savePdf(): Promise<void> {\r\n        const downloadURI = (uri: string, name: string): void => {\r\n            const link = <a download={name} href={uri}></a>;\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (this._form.typeExport === 'pdf') {\r\n                this._pdf.doc.save(this._config.filename + '.pdf');\r\n                resolve();\r\n            } else {\r\n                const pdf = this._pdf.doc.output('dataurlstring');\r\n\r\n                // UMD support\r\n                const versionPdfJS =\r\n                    (window as IWindow & typeof globalThis)?.pdfjsLib\r\n                        ?.version || version;\r\n\r\n                GlobalWorkerOptions.workerSrc = `https://cdnjs.cloudflare.com/ajax/libs/pdf.js/${versionPdfJS}/pdf.worker.js`;\r\n\r\n                getDocument(pdf).promise.then(\r\n                    (pdf) => {\r\n                        pdf.getPage(1).then((page) => {\r\n                            const scale = 2;\r\n\r\n                            const viewport = page.getViewport({ scale });\r\n\r\n                            // Prepare canvas\r\n                            const canvas = <canvas />;\r\n                            canvas.style.display = 'none';\r\n                            document.body.appendChild(canvas);\r\n                            const context = canvas.getContext('2d');\r\n                            canvas.height = viewport.height;\r\n                            canvas.width = viewport.width;\r\n\r\n                            // Render PDF page into canvas context\r\n                            const task = page.render({\r\n                                canvasContext: context,\r\n                                viewport: viewport\r\n                            });\r\n                            task.promise.then(() => {\r\n                                downloadURI(\r\n                                    canvas.toDataURL(\r\n                                        `image/${this._form.typeExport}`\r\n                                    ),\r\n                                    this._config.filename +\r\n                                        `.${this._form.typeExport}`\r\n                                );\r\n                                canvas.remove();\r\n                                resolve();\r\n                            });\r\n                        });\r\n                    },\r\n                    (error: Error) => {\r\n                        reject(error);\r\n                        console.log(error);\r\n                    }\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Convert an SVGElement to an PNG string\r\n     * @param svg\r\n     * @returns\r\n     */\r\n    _processSvgImage = (svg: SVGElement): Promise<string> => {\r\n        // https://stackoverflow.com/questions/3975499/convert-svg-to-image-jpeg-png-etc-in-the-browser#answer-58142441\r\n        return new Promise((resolve, reject) => {\r\n            const svgToPng = (svg: SVGElement, callback) => {\r\n                const url = getSvgUrl(svg);\r\n                svgUrlToPng(url, (imgData: string) => {\r\n                    callback(imgData);\r\n                    URL.revokeObjectURL(url);\r\n                });\r\n            };\r\n\r\n            const getSvgUrl = (svg: SVGElement) => {\r\n                return URL.createObjectURL(\r\n                    new Blob([svg.outerHTML], { type: 'image/svg+xml' })\r\n                );\r\n            };\r\n\r\n            const svgUrlToPng = (svgUrl: string, callback) => {\r\n                const svgImage = document.createElement('img');\r\n                document.body.appendChild(svgImage);\r\n\r\n                svgImage.onerror = (err) => {\r\n                    console.error(err);\r\n                    return reject(this._i18n.errorImage);\r\n                };\r\n\r\n                svgImage.onload = () => {\r\n                    try {\r\n                        const canvas = document.createElement('canvas');\r\n                        canvas.width = svgImage.clientWidth;\r\n                        canvas.height = svgImage.clientHeight;\r\n                        const canvasCtx = canvas.getContext('2d');\r\n                        canvasCtx.drawImage(svgImage, 0, 0);\r\n                        const imgData = canvas.toDataURL('image/png');\r\n                        callback(imgData);\r\n                        document.body.removeChild(svgImage);\r\n                    } catch (err) {\r\n                        return reject(err);\r\n                    }\r\n                };\r\n                svgImage.src = svgUrl;\r\n            };\r\n\r\n            svgToPng(svg, (imgData: string) => {\r\n                resolve(imgData);\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Adapted from http://hg.intevation.de/gemma/file/tip/client/src/components/Pdftool.vue#l252\r\n     * @protected\r\n     */\r\n    _calculateScaleDenominator(\r\n        resolution: number,\r\n        scaleResolution: number\r\n    ): number {\r\n        const pixelsPerMapMillimeter = resolution / 25.4;\r\n        return Math.round(\r\n            1000 *\r\n                pixelsPerMapMillimeter *\r\n                this._getMeterPerPixel(scaleResolution)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _getMeterPerPixel(scaleResolution: number): number {\r\n        const proj = this._view.getProjection();\r\n        return (\r\n            getPointResolution(proj, scaleResolution, this._view.getCenter()) *\r\n            proj.getMetersPerUnit()\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param position\r\n     * @param offset\r\n     * @param size\r\n     * @returns\r\n     * @protected\r\n     */\r\n    _calculateOffsetByPosition = (\r\n        position: string,\r\n        offset: { x: number; y: number },\r\n        size = 0\r\n    ): { x: number; y: number } => {\r\n        let x: number, y: number;\r\n\r\n        switch (position) {\r\n            case 'topleft':\r\n                x = offset.x + this._style.paperMargin;\r\n                y = offset.y + this._style.paperMargin + size;\r\n                break;\r\n\r\n            case 'topright':\r\n                x = this._pdf.width - offset.x - this._style.paperMargin;\r\n                y = offset.y + this._style.paperMargin + size;\r\n                break;\r\n\r\n            case 'bottomright':\r\n                x = this._pdf.width - offset.x - this._style.paperMargin;\r\n                y =\r\n                    this._pdf.height -\r\n                    offset.y -\r\n                    this._style.paperMargin -\r\n                    size;\r\n                break;\r\n\r\n            case 'bottomleft':\r\n                y =\r\n                    this._pdf.height -\r\n                    offset.y -\r\n                    this._style.paperMargin -\r\n                    size;\r\n                x = offset.x + this._style.paperMargin;\r\n                break;\r\n        }\r\n\r\n        return { x, y };\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param height\r\n     * @param bkcolor\r\n     * @param brcolor\r\n     * @protected\r\n     */\r\n    _addRoundedBox = (\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        height: number,\r\n        bkcolor: string,\r\n        brcolor: string\r\n    ): void => {\r\n        const rounding = 1;\r\n\r\n        this._pdf.doc.setDrawColor(brcolor);\r\n        this._pdf.doc.setFillColor(bkcolor);\r\n\r\n        this._pdf.doc.roundedRect(\r\n            x,\r\n            y,\r\n            width,\r\n            height,\r\n            rounding,\r\n            rounding,\r\n            'FD'\r\n        );\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param x\r\n     * @param y\r\n     * @param width\r\n     * @param fontSize\r\n     * @param color\r\n     * @param align\r\n     * @param str\r\n     * @protected\r\n     */\r\n    _addText = (\r\n        x: number,\r\n        y: number,\r\n        width: number,\r\n        fontSize: number,\r\n        color: string,\r\n        align: TextOptionsLight['align'] = 'left',\r\n        str: string\r\n    ): void => {\r\n        this._pdf.doc.setTextColor(color);\r\n        this._pdf.doc.setFontSize(fontSize);\r\n\r\n        this._pdf.doc.text(str, x, y, {\r\n            align: align\r\n        });\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param position\r\n     * @param offset\r\n     * @param width\r\n     * @param fontSize\r\n     * @param color\r\n     * @param align\r\n     * @param str\r\n     * @protected\r\n     */\r\n    _addTextByOffset = (\r\n        position: string,\r\n        offset: { x: number; y: number },\r\n        width: number,\r\n        fontSize: number,\r\n        color: string,\r\n        align: TextOptionsLight['align'],\r\n        str: string\r\n    ): void => {\r\n        const { x, y } = this._calculateOffsetByPosition(position, offset);\r\n        const fixX = align === 'center' ? x - width / 2 : x;\r\n        this._addText(fixX, y, width, fontSize, color, align, str);\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _addDescription = (): void => {\r\n        const str = this._form.description.trim();\r\n        const position = 'topleft';\r\n        const offset = { x: 2, y: 2 };\r\n        const fontSize = 8;\r\n        const maxWidth = 50;\r\n\r\n        const paddingBack = 4;\r\n\r\n        const { x, y } = this._calculateOffsetByPosition(position, offset);\r\n\r\n        this._pdf.doc.setTextColor(this._style.txcolor);\r\n        this._pdf.doc.setFontSize(fontSize);\r\n\r\n        const { w, h } = this._pdf.doc.getTextDimensions(str, {\r\n            maxWidth: maxWidth\r\n        });\r\n\r\n        this._addRoundedBox(\r\n            x,\r\n            y,\r\n            w + paddingBack * 2,\r\n            h + paddingBack,\r\n            this._style.bkcolor,\r\n            this._style.brcolor\r\n        );\r\n\r\n        this._pdf.doc.text(str, x + paddingBack, y + paddingBack, {\r\n            align: 'left',\r\n            maxWidth: maxWidth\r\n        });\r\n    };\r\n\r\n    /**\r\n     * This functions is a mess\r\n     * @returns\r\n     * @protected\r\n     */\r\n    _addWatermark = async (watermark: IWatermark): Promise<void> => {\r\n        const position = 'topright';\r\n        const offset = { x: 0, y: 0 };\r\n        const fontSize = 14;\r\n        const imageSize = 12;\r\n        const fontSizeSubtitle = fontSize / 1.8;\r\n        let back = false;\r\n\r\n        const { x, y } = this._calculateOffsetByPosition(position, offset);\r\n\r\n        const paddingBack = 2;\r\n\r\n        let acumulativeWidth = watermark.logo ? imageSize + 0.5 : 0;\r\n\r\n        if (watermark.title) {\r\n            this._pdf.doc.setTextColor(watermark.titleColor);\r\n            this._pdf.doc.setFontSize(fontSize);\r\n            this._pdf.doc.setFont('helvetica', 'bold');\r\n\r\n            // This function works bad\r\n            let { w } = this._pdf.doc.getTextDimensions(watermark.title);\r\n\r\n            if (watermark.subtitle) {\r\n                this._pdf.doc.setFontSize(fontSizeSubtitle);\r\n                const wSub = this._pdf.doc.getTextDimensions(\r\n                    watermark.subtitle\r\n                ).w;\r\n                w = wSub - 4 > w ? wSub : w + 4; // weird fix needed\r\n                this._pdf.doc.setFontSize(fontSize);\r\n            } else {\r\n                w += 4;\r\n            }\r\n\r\n            // Adaptable width, fixed height\r\n            const height = 16;\r\n            const widthBack = w + paddingBack;\r\n\r\n            this._addRoundedBox(\r\n                x - widthBack + 4 - acumulativeWidth,\r\n                y - 4,\r\n                widthBack + acumulativeWidth,\r\n                height,\r\n                '#ffffff',\r\n                '#ffffff'\r\n            );\r\n            back = true;\r\n\r\n            this._pdf.doc.text(\r\n                watermark.title,\r\n                x,\r\n                y + paddingBack + 3 + (!watermark.subtitle ? 2 : 0),\r\n                {\r\n                    align: 'right'\r\n                }\r\n            );\r\n\r\n            acumulativeWidth += w;\r\n        }\r\n\r\n        if (watermark.subtitle) {\r\n            this._pdf.doc.setTextColor(watermark.subtitleColor);\r\n            this._pdf.doc.setFontSize(fontSizeSubtitle);\r\n            this._pdf.doc.setFont('helvetica', 'normal');\r\n\r\n            if (!back) {\r\n                const { w } = this._pdf.doc.getTextDimensions(\r\n                    watermark.subtitle\r\n                );\r\n                const widthBack = paddingBack * 2 + w;\r\n                this._addRoundedBox(\r\n                    x - widthBack + 3 - acumulativeWidth,\r\n                    y - 4,\r\n                    widthBack + acumulativeWidth,\r\n                    16,\r\n                    '#ffffff',\r\n                    '#ffffff'\r\n                );\r\n                acumulativeWidth += widthBack;\r\n                back = true;\r\n            }\r\n\r\n            const marginTop = watermark.title ? fontSize / 2 : 4;\r\n\r\n            this._pdf.doc.text(\r\n                watermark.subtitle,\r\n                x,\r\n                y + paddingBack + marginTop,\r\n                {\r\n                    align: 'right'\r\n                }\r\n            );\r\n        }\r\n\r\n        if (!watermark.logo) return;\r\n\r\n        const addImage = (image: HTMLImageElement): void => {\r\n            this._pdf.doc.addImage(\r\n                image,\r\n                'PNG',\r\n                x - acumulativeWidth + paddingBack * 2 - 1,\r\n                y - 1,\r\n                imageSize,\r\n                imageSize\r\n            );\r\n        };\r\n\r\n        if (!back) {\r\n            const widthBack = acumulativeWidth + paddingBack;\r\n            this._addRoundedBox(\r\n                x - widthBack + 4,\r\n                y - 4,\r\n                widthBack,\r\n                16,\r\n                '#ffffff',\r\n                '#ffffff'\r\n            );\r\n        }\r\n\r\n        if (watermark.logo instanceof Image) {\r\n            addImage(watermark.logo);\r\n            return;\r\n        } else {\r\n            let imgData: string;\r\n\r\n            if (typeof watermark.logo === 'string') {\r\n                imgData = watermark.logo;\r\n            } else if (watermark.logo instanceof SVGElement) {\r\n                imgData = await this._processSvgImage(watermark.logo);\r\n            } else {\r\n                throw this._i18n.errorImage;\r\n            }\r\n\r\n            return new Promise((resolve, reject) => {\r\n                const image = new Image(imageSize, imageSize);\r\n                image.onload = () => {\r\n                    try {\r\n                        addImage(image);\r\n                        resolve();\r\n                    } catch (err) {\r\n                        return reject(err);\r\n                    }\r\n                };\r\n                image.onerror = () => {\r\n                    return reject(this._i18n.errorImage);\r\n                };\r\n                image.src = imgData;\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _addDate = (): void => {\r\n        const position = 'bottomright';\r\n        const width = 250;\r\n        const offset = {\r\n            x: 0,\r\n            y: -5\r\n        };\r\n        const fontSize = 7;\r\n        const txcolor = '#000000';\r\n        const align = 'right';\r\n\r\n        this._pdf.doc.setFont('helvetica', 'normal');\r\n        const str = new Date(Date.now()).toLocaleDateString(\r\n            this._config.dateFormat\r\n        );\r\n        this._addTextByOffset(\r\n            position,\r\n            offset,\r\n            width,\r\n            fontSize,\r\n            txcolor,\r\n            align,\r\n            str\r\n        );\r\n    };\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _addUrl = (): void => {\r\n        const position = 'bottomleft';\r\n        const width = 250;\r\n        const offset = {\r\n            x: 0,\r\n            y: -6.5\r\n        };\r\n        const fontSize = 6;\r\n        const txcolor = '#000000';\r\n        const align = 'left';\r\n\r\n        this._pdf.doc.setFont('helvetica', 'italic');\r\n        const str = window.location.href;\r\n        this._addTextByOffset(\r\n            position,\r\n            offset,\r\n            width,\r\n            fontSize,\r\n            txcolor,\r\n            align,\r\n            str\r\n        );\r\n    };\r\n    /**\r\n     * @protected\r\n     */\r\n    _addSpecs = (): void => {\r\n        const position = 'bottomleft';\r\n        const offset = {\r\n            x: 0,\r\n            y: -3.5\r\n        };\r\n        const fontSize = 6;\r\n        const txcolor = '#000000';\r\n        const align = 'left';\r\n\r\n        this._pdf.doc.setFont('helvetica', 'bold');\r\n        this._pdf.doc.setFontSize(fontSize);\r\n\r\n        const scale = `${\r\n            this._i18n.scale\r\n        } 1:${this._scaleDenominator.toLocaleString('de')}`;\r\n        const paper = `${this._i18n.paper} ${this._form.format.toUpperCase()}`;\r\n        const dpi = `${this._form.resolution} DPI`;\r\n\r\n        const specs = [scale, dpi, paper];\r\n        const str = specs.join(' - ');\r\n\r\n        const { w } = this._pdf.doc.getTextDimensions(str);\r\n\r\n        this._addTextByOffset(\r\n            position,\r\n            offset,\r\n            w,\r\n            fontSize,\r\n            txcolor,\r\n            align,\r\n            str\r\n        );\r\n    };\r\n\r\n    /**\r\n     * The attributions are obtained from the Control in the DOM.\r\n     * @protected\r\n     */\r\n    _addAttributions = (): void => {\r\n        const attributionsUl = document.querySelector('.ol-attribution ul');\r\n\r\n        if (!attributionsUl) return;\r\n\r\n        const ATTRI_SEPATATOR = ' · ';\r\n\r\n        const position = 'bottomright';\r\n        const offset = { x: 1, y: 1 };\r\n        const fontSize = 7;\r\n\r\n        this._pdf.doc.setFont('helvetica', 'normal');\r\n        this._pdf.doc.setFontSize(fontSize);\r\n        const { x, y } = this._calculateOffsetByPosition(position, offset);\r\n\r\n        let xPos = x;\r\n\r\n        const { w, h } = this._pdf.doc.getTextDimensions(\r\n            attributionsUl.textContent\r\n        );\r\n\r\n        const paddingBack = 4;\r\n\r\n        const whiteSpaceWidth =\r\n            this._pdf.doc.getTextDimensions(ATTRI_SEPATATOR).w;\r\n\r\n        const attributions = document.querySelectorAll('.ol-attribution li');\r\n\r\n        const sumWhiteSpaceWidth = whiteSpaceWidth * (attributions.length - 1);\r\n\r\n        this._addRoundedBox(\r\n            x - w - sumWhiteSpaceWidth - 2,\r\n            y - h,\r\n            w + paddingBack + sumWhiteSpaceWidth + 2,\r\n            h + paddingBack,\r\n            '#ffffff',\r\n            '#ffffff'\r\n        );\r\n\r\n        Array.from(attributions)\r\n            .reverse()\r\n            .forEach((attribution, index) => {\r\n                Array.from(attribution.childNodes)\r\n                    .reverse()\r\n                    .forEach((node) => {\r\n                        const content = node.textContent;\r\n\r\n                        if ('href' in node) {\r\n                            this._pdf.doc.setTextColor('#0077cc');\r\n                            this._pdf.doc.textWithLink(content, xPos, y, {\r\n                                align: 'right',\r\n                                url: (node as HTMLAnchorElement).href\r\n                            });\r\n                        } else {\r\n                            this._pdf.doc.setTextColor('#666666');\r\n                            this._pdf.doc.text(content, xPos, y, {\r\n                                align: 'right'\r\n                            });\r\n                        }\r\n\r\n                        const { w } = this._pdf.doc.getTextDimensions(content);\r\n                        xPos -= w;\r\n                    });\r\n\r\n                // Excldue last element\r\n                if (index !== attributions.length - 1) {\r\n                    // To add separation between diferents attributtions\r\n                    this._pdf.doc.text(ATTRI_SEPATATOR, xPos, y, {\r\n                        align: 'right'\r\n                    });\r\n\r\n                    xPos -= whiteSpaceWidth;\r\n                }\r\n            });\r\n    };\r\n\r\n    /**\r\n     * Adapted from http://hg.intevation.de/gemma/file/tip/client/src/components/Pdftool.vue#l252\r\n     * @protected\r\n     */\r\n    _addScaleBar = (): void => {\r\n        const offset = { x: 2, y: 2 };\r\n\r\n        const maxWidth = 90; // in mm\r\n\r\n        // from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10#Polyfill\r\n        const log10 =\r\n            Math.log10 || // more precise, but unsupported by IE\r\n            function (x) {\r\n                return Math.log(x) * Math.LOG10E;\r\n            };\r\n\r\n        let maxLength = maxWidth * this._scaleDenominator;\r\n\r\n        let unit: string;\r\n        let unitConversionFactor: number;\r\n\r\n        if (this._config.units === 'metric') {\r\n            unit = 'mm';\r\n\r\n            const millimetre = 1;\r\n            const metre = 1000;\r\n            const kilometre = metre * 1000;\r\n\r\n            unitConversionFactor = millimetre;\r\n\r\n            if (maxLength >= kilometre * 10) {\r\n                unit = 'km';\r\n                unitConversionFactor = 1e6;\r\n            } else if (maxLength >= metre * 10) {\r\n                unit = 'm';\r\n                unitConversionFactor = metre;\r\n            }\r\n        } else if (this._config.units === 'imperial') {\r\n            const inch = 25.4; // Millimetre to inch\r\n            const mile = inch * 63360;\r\n            const yard = inch * 36;\r\n\r\n            unit = 'in';\r\n            unitConversionFactor = inch;\r\n\r\n            if (maxLength >= mile * 10) {\r\n                unit = 'mi';\r\n                unitConversionFactor = mile;\r\n            } else if (maxLength >= yard * 10) {\r\n                unit = 'yd';\r\n                unitConversionFactor = yard;\r\n            }\r\n        }\r\n\r\n        maxLength /= unitConversionFactor;\r\n\r\n        const unroundedLength = maxLength;\r\n        const numberOfDigits = Math.floor(log10(unroundedLength));\r\n        const factor = Math.pow(10, numberOfDigits);\r\n        const mapped = unroundedLength / factor;\r\n\r\n        let length = Math.floor(maxLength); // just to have an upper limit\r\n\r\n        // manually only use numbers that are very nice to devide by 4\r\n        // note that this is taken into account for rounding later\r\n        if (mapped > 8) {\r\n            length = 8 * factor;\r\n        } else if (mapped > 4) {\r\n            length = 4 * factor;\r\n        } else if (mapped > 2) {\r\n            length = 2 * factor;\r\n        } else {\r\n            length = factor;\r\n        }\r\n\r\n        let size = (length * unitConversionFactor) / this._scaleDenominator / 4;\r\n\r\n        const percentageMargin = this._style.paperMargin\r\n            ? ((this._style.paperMargin * 2) / this._pdf.width) * 100\r\n            : null;\r\n\r\n        // Reduce length acording to margins\r\n        size = percentageMargin\r\n            ? (size / 100) * (100 - percentageMargin)\r\n            : size;\r\n\r\n        const fullSize = size * 4;\r\n\r\n        // x/y defaults to offset for topleft corner (normal x/y coordinates)\r\n        const x = offset.x + this._style.paperMargin;\r\n        let y = offset.y + this._style.paperMargin;\r\n\r\n        y = this._pdf.height - offset.y - 10 - this._style.paperMargin;\r\n\r\n        // to give the outer white box 4mm padding\r\n        const scaleBarX = x + 4;\r\n        const scaleBarY = y + 5; // 5 because above the scalebar will be the numbers\r\n\r\n        // draw outer box\r\n        this._addRoundedBox(\r\n            x,\r\n            y,\r\n            fullSize + 8,\r\n            10,\r\n            this._style.bkcolor,\r\n            this._style.brcolor\r\n        );\r\n\r\n        // draw first part of scalebar\r\n        this._pdf.doc.setDrawColor(this._style.brcolor);\r\n        this._pdf.doc.setFillColor(0, 0, 0);\r\n        this._pdf.doc.rect(scaleBarX, scaleBarY, size, 1, 'FD');\r\n\r\n        // draw second part of scalebar\r\n        this._pdf.doc.setDrawColor(this._style.brcolor);\r\n        this._pdf.doc.setFillColor(255, 255, 255);\r\n        this._pdf.doc.rect(scaleBarX + size, scaleBarY, size, 1, 'FD');\r\n\r\n        // draw third part of scalebar\r\n        this._pdf.doc.setDrawColor(this._style.brcolor);\r\n        this._pdf.doc.setFillColor(0, 0, 0);\r\n        this._pdf.doc.rect(scaleBarX + size * 2, scaleBarY, size * 2, 1, 'FD');\r\n\r\n        // draw numeric labels above scalebar\r\n        this._pdf.doc.setTextColor(this._style.txcolor);\r\n        this._pdf.doc.setFontSize(6);\r\n        this._pdf.doc.text('0', scaleBarX, scaleBarY - 1);\r\n        // /4 and could give 2.5. We still round, because of floating point arith\r\n        this._pdf.doc.text(\r\n            String(Math.round((length * 10) / 4) / 10),\r\n            scaleBarX + size - 1,\r\n            scaleBarY - 1\r\n        );\r\n        this._pdf.doc.text(\r\n            String(Math.round(length / 2)),\r\n            scaleBarX + size * 2 - 2,\r\n            scaleBarY - 1\r\n        );\r\n        this._pdf.doc.text(\r\n            Math.round(length).toString() + ' ' + unit,\r\n            scaleBarX + size * 4 - 4,\r\n            scaleBarY - 1\r\n        );\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param imgSrc\r\n     * @returns\r\n     * @protected\r\n     */\r\n    _addCompass = async (\r\n        imgSrc: HTMLImageElement | string | SVGElement\r\n    ): Promise<void> => {\r\n        const position = 'bottomright';\r\n        const offset = { x: 2, y: 6 };\r\n        const size = 6;\r\n        const rotationRadians = this._view.getRotation();\r\n        const imageSize = 100;\r\n\r\n        const { x, y } = this._calculateOffsetByPosition(\r\n            position,\r\n            offset,\r\n            size\r\n        );\r\n\r\n        const addRotation = (image: CanvasImageSource) => {\r\n            const canvas = document.createElement('canvas');\r\n\r\n            // Must be bigger than the image to prevent clipping\r\n            canvas.height = 120;\r\n            canvas.width = 120;\r\n            const context = canvas.getContext('2d');\r\n\r\n            context.translate(canvas.width * 0.5, canvas.height * 0.5);\r\n            context.rotate(rotationRadians);\r\n            context.translate(-canvas.width * 0.5, -canvas.height * 0.5);\r\n            context.drawImage(\r\n                image,\r\n                (canvas.height - imageSize) / 2,\r\n                (canvas.width - imageSize) / 2,\r\n                imageSize,\r\n                imageSize\r\n            );\r\n\r\n            // Add back circle\r\n            const xCircle = x - size;\r\n            const yCircle = y;\r\n            this._pdf.doc.setDrawColor(this._style.brcolor);\r\n            this._pdf.doc.setFillColor(this._style.bkcolor);\r\n            this._pdf.doc.circle(xCircle, yCircle, size, 'FD');\r\n\r\n            return canvas;\r\n        };\r\n\r\n        const addImage = (image: CanvasImageSource): void => {\r\n            const rotatedCanvas = addRotation(image);\r\n\r\n            const sizeImage = size * 1.5;\r\n            const xImage = x - sizeImage - size / 4.3;\r\n            const yImage = y - sizeImage / 2;\r\n\r\n            this._pdf.doc.addImage(\r\n                rotatedCanvas,\r\n                'PNG',\r\n                xImage,\r\n                yImage,\r\n                sizeImage,\r\n                sizeImage\r\n            );\r\n        };\r\n\r\n        let image: HTMLImageElement;\r\n\r\n        if (imgSrc instanceof Image) {\r\n            addImage(image);\r\n            return;\r\n        } else {\r\n            let imgData: string;\r\n\r\n            if (typeof imgSrc === 'string') {\r\n                imgData = imgSrc;\r\n            } else if (imgSrc instanceof SVGElement) {\r\n                imgData = await this._processSvgImage(imgSrc);\r\n            } else {\r\n                throw this._i18n.errorImage;\r\n            }\r\n\r\n            return new Promise((resolve, reject) => {\r\n                const image = new Image(imageSize, imageSize);\r\n\r\n                image.onload = () => {\r\n                    addImage(image);\r\n                    resolve();\r\n                };\r\n\r\n                image.onerror = () => {\r\n                    reject(this._i18n.errorImage);\r\n                };\r\n\r\n                image.src = imgData;\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n * @protected\r\n */\r\ninterface IWindow extends Window {\r\n    jspdf: any;\r\n    pdfjsLib: any;\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n * @protected\r\n */\r\nexport interface IPdf {\r\n    doc: jsPDF;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface IPdfOptions {\r\n    view: View;\r\n    form: IPrintOptions;\r\n    i18n: I18n;\r\n    config: Options;\r\n    height: number;\r\n    width: number;\r\n    scaleResolution: number;\r\n}\r\n","/**\n * Vanilla JS Modal compatible with Bootstrap\n * modal-vanilla 0.12.0 <https://github.com/KaneCohen/modal-vanilla>\n * Copyright 2020 Kane Cohen <https://github.com/KaneCohen>\n * Available under BSD-3-Clause license\n */\nimport EventEmitter from 'events';\n\nlet _factory = null;\n\nconst _defaults = Object.freeze({\n  el: null,               // Existing DOM element that will be 'Modal-ized'.\n  animate: true,          // Show Modal using animation.\n  animateClass: 'fade',   //\n  animateInClass: 'show', //\n  appendTo: 'body',       // DOM element to which constructed Modal will be appended.\n  backdrop: true,         // Boolean or 'static', Show Modal backdrop blocking content.\n  keyboard: true,         // Close modal on esc key.\n  title: false,           // Content of the title in the constructed dialog.\n  header: true,           // Show header content.\n  content: false,         // Either string or an HTML element.\n  footer: true,           // Footer content. By default will use buttons.\n  buttons: null,          //\n  headerClose: true,      // Show close button in the header.\n  construct: false,       // Creates new HTML with a given content.\n  transition: 300,        //\n  backdropTransition: 150 //\n});\n\nconst _buttons = deepFreeze({\n  dialog: [\n    {text: 'Cancel',\n      value: false,\n      attr: {\n        'class': 'btn btn-default',\n        'data-dismiss': 'modal'\n      }\n    },\n    {text: 'OK',\n      value: true,\n      attr: {\n        'class': 'btn btn-primary',\n        'data-dismiss': 'modal'\n      }\n    }\n  ],\n  alert: [\n    {text: 'OK',\n      attr: {\n        'class': 'btn btn-primary',\n        'data-dismiss': 'modal'\n      }\n    }\n  ],\n  confirm: [\n    {text: 'Cancel',\n      value: false,\n      attr: {\n        'class': 'btn btn-default',\n        'data-dismiss': 'modal'\n      }\n    },\n    {text: 'OK',\n      value: true,\n      attr: {\n        'class': 'btn btn-primary',\n        'data-dismiss': 'modal'\n      }\n    }\n  ]\n});\n\nconst _templates = {\n  container: '<div class=\"modal\"></div>',\n  dialog: '<div class=\"modal-dialog\"></div>',\n  content: '<div class=\"modal-content\"></div>',\n  header: '<div class=\"modal-header\"></div>',\n  headerClose: '<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">×</span></button>',\n  body: '<div class=\"modal-body\"></div>',\n  footer: '<div class=\"modal-footer\"></div>',\n  backdrop: '<div class=\"modal-backdrop\"></div>'\n};\n\nfunction deepFreeze(obj) {\n  for (let k in obj) {\n    if (Array.isArray(obj[k])) {\n      obj[k].forEach(v => {\n        deepFreeze(v);\n      });\n    } else if (obj[k] !== null && typeof obj[k] === 'object') {\n      Object.freeze(obj[k]);\n    }\n  }\n  return Object.freeze(obj);\n}\n\nfunction guid() {\n  return (((1 + Math.random()) * 0x10000) | 0).toString(16) +\n    (((1 + Math.random()) * 0x10000) | 0).toString(16);\n}\n\nfunction data(el, prop, value) {\n let prefix = 'data';\n let elData = el[prefix] || {};\n if (typeof value === 'undefined') {\n   if (el[prefix] && el[prefix][prop]) {\n     return el[prefix][prop];\n   } else {\n     var dataAttr = el.getAttribute(`${prefix}-${prop}`);\n     if (typeof dataAttr !== 'undefined') {\n       return dataAttr;\n     }\n     return null;\n   }\n } else {\n   elData[prop] = value;\n   el[prefix] = elData;\n   return el;\n }\n}\n\nfunction build(html, all) {\n  if (html.nodeName) return html;\n  html = html.replace(/(\\t|\\n$)/g, '');\n\n  if (!_factory) {\n    _factory = document.createElement('div');\n  }\n\n  _factory.innerHTML = '';\n  _factory.innerHTML = html;\n  if (all === true) {\n    return _factory.childNodes;\n  } else {\n    return _factory.childNodes[0];\n  }\n}\n\nfunction calcScrollbarWidth() {\n  let inner;\n  let width;\n  let outerWidth;\n  let outer = document.createElement('div');\n  Object.assign(outer.style, {\n    visibility: 'hidden',\n    width: '100px'\n  });\n  document.body.appendChild(outer);\n\n  outerWidth = outer.offsetWidth;\n  outer.style.overflow = 'scroll';\n\n  inner = document.createElement('div');\n  inner.style.width = '100%';\n  outer.appendChild(inner);\n\n  width = outerWidth - inner.offsetWidth;\n  document.body.removeChild(outer);\n\n  return width;\n}\n\nfunction getPath(node) {\n  let nodes = [node];\n  while (node.parentNode) {\n    node = node.parentNode;\n    nodes.push(node);\n  }\n  return nodes;\n}\n\nclass Modal extends EventEmitter {\n  static set templates(templates) {\n    this._baseTemplates = templates;\n  }\n\n  static get templates() {\n    return Object.assign({}, _templates, Modal._baseTemplates || {});\n  }\n\n  static set buttons(buttons) {\n    this._baseButtons = buttons;\n  }\n\n  static get buttons() {\n    return Object.assign({}, _buttons, Modal._baseButtons || {});\n  }\n\n  static set options(options) {\n    this._baseOptions = options;\n  }\n\n  static get options() {\n    return Object.assign({}, _defaults, Modal._baseOptions || {});\n  }\n\n  static get version() {\n    return '0.12.0';\n  }\n\n  static alert(message, _options = {}) {\n    let options = Object.assign({},\n      _defaults,\n      {\n        title:  message,\n        content: false,\n        construct: true,\n        headerClose: false,\n        buttons: Modal.buttons.alert\n      },\n      _options\n    );\n\n    return new Modal(options);\n  }\n\n  static confirm(question, _options = {}) {\n    let options = Object.assign({},\n      _defaults,\n      {\n        title:  question,\n        content: false,\n        construct: true,\n        headerClose: false,\n        buttons: Modal.buttons.confirm\n      },\n      _options\n    );\n\n    return new Modal(options);\n  }\n\n  constructor(options = {}) {\n    super();\n\n    this.id = guid();\n    this.el = null;\n    this._html = {};\n    this._events = {};\n    this._visible = false;\n    this._pointerInContent = false;\n    this._options = Object.assign({}, Modal.options, options);\n    this._templates = Object.assign({}, Modal.templates, options.templates || {});\n    this._html.appendTo = document.querySelector(this._options.appendTo);\n    this._scrollbarWidth = calcScrollbarWidth();\n\n    if (this._options.buttons === null) {\n      this._options.buttons = Modal.buttons.dialog;\n    }\n\n    if (this._options.el) {\n      let el = this._options.el;\n      if (typeof this._options.el == 'string') {\n        el = document.querySelector(this._options.el);\n        if (! el) {\n          throw new Error(`Selector: DOM Element ${this._options.el} not found.`);\n        }\n      }\n      data(el, 'modal', this);\n      this.el = el;\n    } else {\n      this._options.construct = true;\n    }\n\n    if (this._options.construct) {\n      this._render();\n    } else {\n      this._mapDom();\n    }\n  }\n\n  _render() {\n    let html = this._html;\n    let o = this._options;\n    let t = this._templates;\n    let animate = o.animate ? o.animateClass : false;\n\n    html.container = build(t.container);\n    html.dialog = build(t.dialog);\n    html.content = build(t.content);\n    html.header = build(t.header);\n    html.headerClose = build(t.headerClose);\n    html.body = build(t.body);\n    html.footer = build(t.footer);\n    if (animate) html.container.classList.add(animate);\n\n    this._setHeader();\n    this._setContent();\n    this._setFooter();\n\n    this.el = html.container;\n\n    html.dialog.appendChild(html.content);\n    html.container.appendChild(html.dialog);\n\n    return this;\n  }\n\n  _mapDom() {\n    let html = this._html;\n    let o = this._options;\n\n    if (this.el.classList.contains(o.animateClass)) {\n      o.animate = true;\n    }\n\n    html.container = this.el;\n    html.dialog = this.el.querySelector('.modal-dialog');\n    html.content = this.el.querySelector('.modal-content');\n    html.header = this.el.querySelector('.modal-header');\n    html.headerClose = this.el.querySelector('.modal-header .close');\n    html.body = this.el.querySelector('.modal-body');\n    html.footer = this.el.querySelector('.modal-footer');\n\n    this._setHeader();\n    this._setContent();\n    this._setFooter();\n\n    return this;\n  }\n\n  _setHeader() {\n    let html = this._html;\n    let o = this._options;\n\n    if (o.header && html.header) {\n      if (o.title.nodeName) {\n        html.header.innerHTML = o.title.outerHTML;\n      } else if (typeof o.title === 'string') {\n        html.header.innerHTML = `<h4 class=\"modal-title\">${o.title}</h4>`;\n      }\n      // Add header close button only to constructed modals.\n      if (this.el === null && html.headerClose && o.headerClose) {\n        html.header.appendChild(html.headerClose);\n      }\n      if (o.construct) {\n        html.content.appendChild(html.header);\n      }\n    }\n  }\n\n  _setContent() {\n    let html = this._html;\n    let o = this._options;\n\n    if (o.content && html.body) {\n      if (typeof o.content === 'string') {\n        html.body.innerHTML = o.content;\n      } else {\n        html.body.innerHTML = o.content.outerHTML;\n      }\n      if (o.construct) {\n        html.content.appendChild(html.body);\n      }\n    }\n  }\n\n  _setFooter() {\n    let html = this._html;\n    let o = this._options;\n\n    if (o.footer && html.footer) {\n      if (o.footer.nodeName) {\n        html.footer.ineerHTML = o.footer.outerHTML;\n      } else if (typeof o.footer === 'string') {\n        html.footer.innerHTML = o.footer;\n      } else if (! html.footer.children.length) {\n        o.buttons.forEach((button) => {\n          let el = document.createElement('button');\n          data(el, 'button', button);\n          el.innerHTML = button.text;\n          el.setAttribute('type', 'button');\n          for (let j in button.attr) {\n            el.setAttribute(j, button.attr[j]);\n          }\n          html.footer.appendChild(el);\n        });\n      }\n      if (o.construct) {\n        html.content.appendChild(html.footer);\n      }\n    }\n\n  }\n\n  _setEvents() {\n    let o = this._options;\n    let html = this._html;\n\n    this._events.keydownHandler = this._handleKeydownEvent.bind(this);\n    document.body.addEventListener('keydown',\n      this._events.keydownHandler\n    );\n\n    this._events.mousedownHandler = this._handleMousedownEvent.bind(this);\n    html.container.addEventListener('mousedown',\n      this._events.mousedownHandler\n    );\n\n    this._events.clickHandler = this._handleClickEvent.bind(this);\n    html.container.addEventListener('click',\n      this._events.clickHandler\n    );\n\n    this._events.resizeHandler = this._handleResizeEvent.bind(this);\n    window.addEventListener('resize',\n      this._events.resizeHandler\n    );\n  }\n\n  _handleMousedownEvent(e) {\n    this._pointerInContent = false;\n    let path = getPath(e.target);\n    path.every(node => {\n      if (node.classList && node.classList.contains('modal-content')) {\n        this._pointerInContent = true;\n        return false;\n      }\n      return true;\n    });\n  }\n\n  _handleClickEvent(e) {\n    let path = getPath(e.target);\n    path.every(node => {\n      if (node.tagName === 'HTML') {\n        return false;\n      }\n      if (this._options.backdrop !== true && node.classList.contains('modal')) {\n        return false;\n      }\n      if (node.classList.contains('modal-content')) {\n        return false;\n      }\n      if (node.getAttribute('data-dismiss') === 'modal') {\n        this.emit('dismiss', this, e, data(e.target, 'button'));\n        this.hide();\n        return false;\n      }\n\n      if (!this._pointerInContent && node.classList.contains('modal')) {\n        this.emit('dismiss', this, e, null);\n        this.hide();\n        return false;\n      }\n      return true;\n    });\n\n    this._pointerInContent = false;\n  }\n\n  _handleKeydownEvent(e) {\n    if (e.which === 27 && this._options.keyboard) {\n      this.emit('dismiss', this, e, null);\n      this.hide();\n    }\n  }\n\n  _handleResizeEvent(e) {\n    this._resize();\n  }\n\n  show() {\n    let o = this._options;\n    let html = this._html;\n    this.emit('show', this);\n\n    this._checkScrollbar();\n    this._setScrollbar();\n    document.body.classList.add('modal-open');\n\n    if (o.construct) {\n      html.appendTo.appendChild(html.container);\n    }\n\n    html.container.style.display = 'block';\n    html.container.scrollTop = 0;\n\n    if (o.backdrop !== false) {\n      this.once('showBackdrop', () => {\n        this._setEvents();\n\n        if (o.animate) html.container.offsetWidth; // Force reflow\n\n        html.container.classList.add(o.animateInClass);\n\n        setTimeout(() => {\n          this._visible = true;\n          this.emit('shown', this);\n        }, o.transition);\n      });\n      this._backdrop();\n    } else {\n      this._setEvents();\n\n      if (o.animate) html.container.offsetWidth; // Force reflow\n\n      html.container.classList.add(o.animateInClass);\n\n      setTimeout(() => {\n        this._visible = true;\n        this.emit('shown', this);\n      }, o.transition);\n    }\n    this._resize();\n\n    return this;\n  }\n\n  toggle() {\n    if (this._visible) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  _resize() {\n    var modalIsOverflowing =\n      this._html.container.scrollHeight > document.documentElement.clientHeight;\n\n    this._html.container.style.paddingLeft =\n      ! this.bodyIsOverflowing && modalIsOverflowing ? this._scrollbarWidth + 'px' : '';\n\n    this._html.container.style.paddingRight =\n      this.bodyIsOverflowing && ! modalIsOverflowing ? this._scrollbarWidth + 'px' : '';\n  }\n\n  _backdrop() {\n    let html = this._html;\n    let t = this._templates;\n    let o = this._options;\n    let animate = o.animate ? o.animateClass : false;\n\n    html.backdrop = build(t.backdrop);\n    if (animate) html.backdrop.classList.add(animate);\n    html.appendTo.appendChild(html.backdrop);\n\n    if (animate) html.backdrop.offsetWidth;\n\n    html.backdrop.classList.add(o.animateInClass);\n\n    setTimeout(() => {\n      this.emit('showBackdrop', this);\n    }, this._options.backdropTransition);\n  }\n\n  hide() {\n    let html = this._html;\n    let o = this._options;\n    let contCList = html.container.classList;\n    this.emit('hide', this);\n\n    contCList.remove(o.animateInClass);\n\n    if (o.backdrop) {\n      let backCList = html.backdrop.classList;\n      backCList.remove(o.animateInClass);\n    }\n\n    this._removeEvents();\n\n    setTimeout(() => {\n      document.body.classList.remove('modal-open');\n      document.body.style.paddingRight = this.originalBodyPad;\n    }, o.backdropTransition);\n\n    setTimeout(() => {\n      if (o.backdrop) {\n        html.backdrop.parentNode.removeChild(html.backdrop);\n      }\n      html.container.style.display = 'none';\n\n      if (o.construct) {\n        html.container.parentNode.removeChild(html.container);\n      }\n\n      this._visible = false;\n      this.emit('hidden', this);\n    }, o.transition);\n\n    return this;\n  }\n\n  _removeEvents() {\n    if (this._events.keydownHandler) {\n      document.body.removeEventListener('keydown',\n        this._events.keydownHandler\n      );\n    }\n\n    this._html.container.removeEventListener('mousedown',\n      this._events.mousedownHandler\n    );\n\n    this._html.container.removeEventListener('click',\n      this._events.clickHandler\n    );\n\n    window.removeEventListener('resize',\n      this._events.resizeHandler\n    );\n  }\n\n  _checkScrollbar() {\n    this.bodyIsOverflowing = document.body.clientWidth < window.innerWidth;\n  }\n\n  _setScrollbar() {\n    this.originalBodyPad = document.body.style.paddingRight || '';\n    if (this.bodyIsOverflowing) {\n      let basePadding = parseInt(this.originalBodyPad || 0, 10);\n      document.body.style.paddingRight = basePadding + this._scrollbarWidth + 'px';\n    }\n  }\n}\n\nexport default Modal;\n","import Modal from 'modal-vanilla';\r\nimport Map from 'ol/Map.js';\r\n\r\nimport { I18n, IValues, Options } from '../ol-pdf-printer';\r\nimport { getMapScale } from './Helpers';\r\nimport myPragma from '../myPragma';\r\n\r\n/**\r\n * @private\r\n */\r\nexport default class SettingsModal {\r\n    _modal: Modal;\r\n\r\n    constructor(\r\n        map: Map,\r\n        options: Options,\r\n        i18n: I18n,\r\n        printMap: (values: IValues, showLoading: boolean, delay: number) => void\r\n    ) {\r\n        this._modal = new Modal({\r\n            headerClose: true,\r\n            header: true,\r\n            animate: true,\r\n            title: i18n.printPdf,\r\n            content: this.Content(i18n, options),\r\n            footer: this.Footer(i18n, options),\r\n            ...options.modal\r\n        });\r\n\r\n        this._modal.on('dismiss', (modal: Modal, event: Event): void => {\r\n            const print = (event.target as HTMLElement).dataset.print;\r\n            if (!print) return;\r\n\r\n            const form = document.getElementById('printMap') as HTMLFormElement;\r\n\r\n            const formData = new FormData(form);\r\n\r\n            const values = {\r\n                format: formData.get('printFormat'),\r\n                orientation: formData.get('printOrientation'),\r\n                resolution: formData.get('printResolution'),\r\n                scale: formData.get('printScale'),\r\n                description: formData.get('printDescription'),\r\n                compass: formData.get('printCompass'),\r\n                attributions: formData.get('printAttributions'),\r\n                scalebar: formData.get('printScalebar'),\r\n                typeExport: this._modal.el.querySelector(\r\n                    'select[name=\"printTypeExport\"]'\r\n                ).value\r\n            };\r\n\r\n            printMap(\r\n                values,\r\n                /* showLoading */ true,\r\n                /* delay */ options.modal.transition\r\n            );\r\n        });\r\n\r\n        this._modal.on('shown', (): void => {\r\n            const actualScaleVal = getMapScale(map);\r\n            const actualScale = this._modal.el.querySelector('.actualScale');\r\n            (actualScale as HTMLInputElement).value = String(\r\n                actualScaleVal / 1000\r\n            );\r\n            actualScale.innerHTML = `${\r\n                i18n.current\r\n            } (1:${actualScaleVal.toLocaleString('de')})`;\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param i18n\r\n     * @param options\r\n     * @returns\r\n     * @protected\r\n     */\r\n    Content(i18n: I18n, options: Options): HTMLElement {\r\n        const { scales, dpi, mapElements, paperSizes } = options;\r\n\r\n        return (\r\n            <form id=\"printMap\">\r\n                <div>\r\n                    <div className=\"printFieldHalf\">\r\n                        <label htmlFor=\"printFormat\">{i18n.paperSize}</label>\r\n                        <select name=\"printFormat\" id=\"printFormat\">\r\n                            {paperSizes.map((paper) => (\r\n                                <option\r\n                                    value={paper.value}\r\n                                    {...(paper.selected\r\n                                        ? { selected: 'selected' }\r\n                                        : {})}\r\n                                >\r\n                                    {paper.value}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"printFieldHalf\">\r\n                        <label htmlFor=\"printOrientation\">\r\n                            {i18n.orientation}\r\n                        </label>\r\n                        <select name=\"printOrientation\" id=\"printOrientation\">\r\n                            <option value=\"landscape\" selected>\r\n                                {i18n.landscape}\r\n                            </option>\r\n                            <option value=\"portrait\">{i18n.portrait}</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <div className=\"printFieldHalf\">\r\n                        <label htmlFor=\"printResolution\">\r\n                            {i18n.resolution}\r\n                        </label>\r\n                        <select name=\"printResolution\" id=\"printResolution\">\r\n                            {dpi.map((d) => (\r\n                                <option\r\n                                    value={d.value}\r\n                                    {...(d.selected\r\n                                        ? { selected: 'selected' }\r\n                                        : {})}\r\n                                >\r\n                                    {d.value} dpi\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <div className=\"printFieldHalf\">\r\n                        <label htmlFor=\"printScale\">{i18n.scale}</label>\r\n                        <select name=\"printScale\" id=\"printScale\">\r\n                            <option\r\n                                className=\"actualScale\"\r\n                                value=\"\"\r\n                                selected\r\n                            ></option>\r\n                            {scales.map((scale) => (\r\n                                <option value={scale}>\r\n                                    1:{(scale * 1000).toLocaleString('de')}\r\n                                </option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                {mapElements && (\r\n                    <div>\r\n                        {mapElements.description && (\r\n                            <div>\r\n                                <label htmlFor=\"printDescription\">\r\n                                    {i18n.addNote}\r\n                                </label>\r\n                                <textarea\r\n                                    id=\"printDescription\"\r\n                                    name=\"printDescription\"\r\n                                    rows=\"4\"\r\n                                ></textarea>\r\n                            </div>\r\n                        )}\r\n                        <div>{i18n.mapElements}</div>\r\n                        <div className=\"printElements\">\r\n                            {mapElements.compass && (\r\n                                <label htmlFor=\"printCompass\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id=\"printCompass\"\r\n                                        name=\"printCompass\"\r\n                                        checked\r\n                                    />\r\n                                    {i18n.compass}\r\n                                </label>\r\n                            )}\r\n                            {mapElements.scalebar && (\r\n                                <label htmlFor=\"printScalebar\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id=\"printScalebar\"\r\n                                        name=\"printScalebar\"\r\n                                        checked\r\n                                    />\r\n                                    {i18n.scale}\r\n                                </label>\r\n                            )}\r\n                            {mapElements.attributions && (\r\n                                <label htmlFor=\"printAttributions\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        id=\"printAttributions\"\r\n                                        name=\"printAttributions\"\r\n                                        checked\r\n                                    />\r\n                                    {i18n.layersAttributions}\r\n                                </label>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </form>\r\n        );\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param i18n\r\n     * @returns\r\n     * @protected\r\n     */\r\n    Footer(i18n: I18n, options: Options): string {\r\n        const { mimeTypeExports } = options;\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn-sm btn btn-secondary\"\r\n                    data-dismiss=\"modal\"\r\n                >\r\n                    {i18n.cancel}\r\n                </button>\r\n                <div class=\"typeExportContainer\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn-sm btn btn-primary\"\r\n                        data-print=\"true\"\r\n                        data-dismiss=\"modal\"\r\n                    >\r\n                        {i18n.print}\r\n                    </button>\r\n                    <select\r\n                        className=\"typeExport\"\r\n                        name=\"printTypeExport\"\r\n                        id=\"printTypeExport\"\r\n                    >\r\n                        {mimeTypeExports.map((type) => (\r\n                            <option\r\n                                value={type.value}\r\n                                {...(type.selected\r\n                                    ? { selected: 'selected' }\r\n                                    : {})}\r\n                            >\r\n                                {type.value}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        ).outerHTML;\r\n    }\r\n\r\n    hide(): void {\r\n        this._modal.hide();\r\n    }\r\n\r\n    show(): void {\r\n        if (!this._modal._visible) this._modal.show();\r\n    }\r\n}\r\n","import Map from 'ol/Map.js';\r\nimport { METERS_PER_UNIT } from 'ol/proj/Units.js';\r\n\r\n/**\r\n *\r\n * @param map\r\n * @param opt_round\r\n * @returns\r\n * @protected\r\n */\r\nexport const getMapScale = (map: Map, opt_round = true): number => {\r\n    const dpi = 25.4 / 0.28;\r\n\r\n    const view = map.getView();\r\n    const unit = view.getProjection().getUnits();\r\n    const res = view.getResolution();\r\n    const inchesPerMetre = 39.37;\r\n\r\n    let scale = res * METERS_PER_UNIT[unit] * inchesPerMetre * dpi;\r\n\r\n    if (opt_round) {\r\n        scale = Math.round(scale);\r\n    }\r\n\r\n    return scale;\r\n};\r\n","import Modal from 'modal-vanilla';\r\nimport { I18n, Options } from '../ol-pdf-printer';\r\n\r\n/**\r\n * @private\r\n */\r\nexport default class ProcessingModal {\r\n    protected _modal: Modal;\r\n    protected _footer: string;\r\n    protected _i18n: I18n;\r\n\r\n    /**\r\n     *\r\n     * @param i18n\r\n     * @param options\r\n     * @param onEndPrint\r\n     * @protected\r\n     */\r\n    constructor(i18n: I18n, options: Options, onEndPrint: () => void) {\r\n        this._i18n = i18n;\r\n\r\n        this._modal = new Modal({\r\n            headerClose: false,\r\n            title: this._i18n.printing,\r\n            backdrop: 'static', // To prevent close on clicking backdrop\r\n            content: ' ',\r\n            footer: `\r\n            <button\r\n                type=\"button\"\r\n                class=\"btn-sm btn btn-secondary\"\r\n                data-dismiss=\"modal\"\r\n            >\r\n                ${this._i18n.cancel}\r\n            </button>\r\n            `,\r\n            ...options.modal\r\n        });\r\n\r\n        this._modal.on('dismiss', () => {\r\n            onEndPrint();\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param string\r\n     * @protected\r\n     */\r\n    _setContentModal(string: string): void {\r\n        this._modal._html.body.innerHTML = string;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param string\r\n     * @protected\r\n     */\r\n    _setFooterModal(string: string): void {\r\n        this._modal._html.footer.innerHTML = string;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param string\r\n     * @param footer\r\n     * @protected\r\n     */\r\n    show(string: string): void {\r\n        this._setContentModal(string);\r\n        if (!this._modal._visible) this._modal.show();\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    hide(): void {\r\n        this._modal.hide();\r\n    }\r\n}\r\n","import { I18n } from '../../ol-pdf-printer';\r\n\r\nexport const en: I18n = {\r\n    printPdf: 'Print PDF',\r\n    pleaseWait: 'Please wait...',\r\n    almostThere: 'Almost there...',\r\n    error: 'An error occurred while printing',\r\n    errorImage: 'An error ocurred while loading an image',\r\n    printing: 'Exporting',\r\n    cancel: 'Cancel',\r\n    close: 'Close',\r\n    print: 'Export',\r\n    mapElements: 'Map elements',\r\n    compass: 'Compass',\r\n    scale: 'Scale',\r\n    layersAttributions: 'Layer attributions',\r\n    addNote: 'Add note (optional)',\r\n    resolution: 'Resolution',\r\n    orientation: 'Orientation',\r\n    paperSize: 'Paper size',\r\n    landscape: 'Landscape',\r\n    portrait: 'Portrait',\r\n    current: 'Current',\r\n    paper: 'Paper'\r\n};\r\n","import { I18n } from '../../ol-pdf-printer';\r\n\r\nexport const es: I18n = {\r\n    printPdf: 'Exportar PDF',\r\n    pleaseWait: 'Por favor espere...',\r\n    almostThere: 'Ya casi...',\r\n    error: 'Error al generar pdf',\r\n    errorImage: 'Ocurrió un error al tratar de cargar una imagen',\r\n    printing: 'Exportando',\r\n    cancel: 'Cancelar',\r\n    close: 'Cerrar',\r\n    print: 'Exportar',\r\n    mapElements: 'Elementos en el mapa',\r\n    compass: 'Brújula',\r\n    scale: 'Escala',\r\n    layersAttributions: 'Atribuciones de capas',\r\n    addNote: 'Agregar nota (opcional)',\r\n    resolution: 'Resolución',\r\n    orientation: 'Orientación',\r\n    paperSize: 'Tamaño de página',\r\n    landscape: 'Paisaje',\r\n    portrait: 'Retrato',\r\n    current: 'Actual',\r\n    paper: 'Hoja'\r\n};\r\n","import Map from 'ol/Map.js';\r\nimport View from 'ol/View.js';\r\nimport Control, { Options as ControlOptions } from 'ol/control/Control.js';\r\nimport TileWMS from 'ol/source/TileWMS.js';\r\nimport Tile from 'ol/layer/Tile.js';\r\nimport { getPointResolution } from 'ol/proj.js';\r\nimport { EventsKey } from 'ol/events.js';\r\nimport { unByKey } from 'ol/Observable.js';\r\n\r\nimport domtoimage from 'dom-to-image-improved';\r\n\r\nimport { Locale } from 'locale-enum';\r\n\r\nimport Pdf from './components/Pdf';\r\nimport SettingsModal from './components/SettingsModal';\r\nimport ProcessingModal from './components/ProcessingModal';\r\nimport * as i18n from './components/i18n';\r\n\r\nimport compassIcon from './assets/images/compass.svg';\r\nimport pdfIcon from './assets/images/pdf.svg';\r\n\r\nimport './assets/css/ol-pdf-printer.css';\r\n\r\n/**\r\n * @protected\r\n */\r\nconst DEFAULT_LANGUAGE = 'en';\r\n\r\n/**\r\n * @protected\r\n */\r\nconst CLASS_PRINT_MODE = 'printMode';\r\n\r\n/**\r\n * @protected\r\n */\r\nfunction deepObjectAssign(target, ...sources) {\r\n    sources.forEach((source) => {\r\n        Object.keys(source).forEach((key) => {\r\n            const s_val = source[key];\r\n            const t_val = target[key];\r\n            target[key] =\r\n                t_val &&\r\n                s_val &&\r\n                typeof t_val === 'object' &&\r\n                typeof s_val === 'object' &&\r\n                !Array.isArray(t_val) // Don't merge arrays\r\n                    ? deepObjectAssign(t_val, s_val)\r\n                    : s_val;\r\n        });\r\n    });\r\n    return target;\r\n}\r\n\r\nexport default class PdfPrinter extends Control {\r\n    protected _i18n: I18n;\r\n\r\n    protected _map: Map;\r\n    protected _view: View;\r\n    protected _mapTarget: HTMLElement;\r\n\r\n    protected _pdf: Pdf;\r\n\r\n    protected _processingModal: ProcessingModal;\r\n    protected _settingsModal: SettingsModal;\r\n\r\n    protected _initialized: boolean;\r\n\r\n    protected _timeoutProcessing: ReturnType<typeof setTimeout>;\r\n\r\n    protected _initialViewResolution: number;\r\n\r\n    protected _options: Options;\r\n\r\n    protected _renderCompleteKey: EventsKey | EventsKey[];\r\n\r\n    protected _isCanceled: boolean;\r\n\r\n    constructor(opt_options?: Options) {\r\n        const controlElement = document.createElement('button');\r\n\r\n        super({\r\n            target: opt_options.target,\r\n            element: controlElement\r\n        });\r\n\r\n        // Check if the selected language exists\r\n        this._i18n =\r\n            opt_options.language && opt_options.language in i18n\r\n                ? i18n[opt_options.language]\r\n                : i18n[DEFAULT_LANGUAGE];\r\n\r\n        if (opt_options.i18n) {\r\n            // Merge custom translations\r\n            this._i18n = {\r\n                ...this._i18n,\r\n                ...opt_options.i18n\r\n            };\r\n        }\r\n\r\n        // Default options\r\n        this._options = {\r\n            language: DEFAULT_LANGUAGE,\r\n            filename: 'Ol Pdf Printer',\r\n            style: {\r\n                paperMargin: 10,\r\n                brcolor: '#000000',\r\n                bkcolor: '#273f50',\r\n                txcolor: '#ffffff'\r\n            },\r\n            extraInfo: {\r\n                date: true,\r\n                url: true,\r\n                specs: true\r\n            },\r\n            mapElements: {\r\n                description: true,\r\n                attributions: true,\r\n                scalebar: true,\r\n                compass: compassIcon() as SVGElement\r\n            },\r\n            watermark: {\r\n                title: 'Ol Pdf Printer',\r\n                titleColor: '#d65959',\r\n                subtitle: 'https://github.com/GastonZalba/ol-pdf-printer',\r\n                subtitleColor: '#444444',\r\n                logo: false\r\n            },\r\n            paperSizes: [\r\n                // { size: [1189, 841], value: 'A0' },\r\n                // { size: [841, 594], value: 'A1' },\r\n                { size: [594, 420], value: 'A2' },\r\n                { size: [420, 297], value: 'A3' },\r\n                { size: [297, 210], value: 'A4', selected: true },\r\n                { size: [210, 148], value: 'A5' }\r\n            ],\r\n            dpi: [\r\n                { value: 72 },\r\n                { value: 96 },\r\n                { value: 150, selected: true },\r\n                { value: 200 },\r\n                { value: 300 }\r\n            ],\r\n            scales: [10000, 5000, 1000, 500, 250, 100, 50, 25, 10],\r\n            mimeTypeExports: [\r\n                { value: 'pdf', selected: true },\r\n                { value: 'png' },\r\n                { value: 'jpeg' },\r\n                { value: 'webp' }\r\n            ],\r\n            units: 'metric',\r\n            dateFormat: undefined,\r\n            ctrlBtnClass: '',\r\n            modal: {\r\n                animateClass: 'fade',\r\n                animateInClass: 'show',\r\n                transition: 150,\r\n                backdropTransition: 100,\r\n                templates: {\r\n                    dialog: '<div class=\"modal-dialog modal-dialog-centered\"></div>',\r\n                    headerClose: `<button type=\"button\" class=\"btn-close\" data-dismiss=\"modal\" aria-label=\"${this._i18n.close}\"><span aria-hidden=\"true\">×</span></button>`\r\n                }\r\n            }\r\n        };\r\n\r\n        // Merge options\r\n        this._options = deepObjectAssign(this._options, opt_options);\r\n\r\n        controlElement.className = `ol-print-btn-menu ${this._options.ctrlBtnClass}`;\r\n        controlElement.title = this._i18n.printPdf;\r\n        controlElement.onclick = () => this.showPrintSettingsModal();\r\n        controlElement.append(pdfIcon());\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _init(): void {\r\n        this._map = this.getMap();\r\n        this._view = this._map.getView();\r\n        this._mapTarget = this._map.getTargetElement();\r\n        this._settingsModal = new SettingsModal(\r\n            this._map,\r\n            this._options,\r\n            this._i18n,\r\n            this._printMap.bind(this)\r\n        );\r\n\r\n        this._processingModal = new ProcessingModal(\r\n            this._i18n,\r\n            this._options,\r\n            this._onEndPrint.bind(this)\r\n        );\r\n\r\n        this._initialized = true;\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _setMapSizForPrint(\r\n        width: number,\r\n        height: number,\r\n        resolution: number\r\n    ): number[] {\r\n        const pixelsPerMapMillimeter = resolution / 25.4;\r\n        return [\r\n            Math.round(width * pixelsPerMapMillimeter),\r\n            Math.round(height * pixelsPerMapMillimeter)\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Restore inital view, remove classes, disable loading\r\n     * @protected\r\n     */\r\n    _onEndPrint(): void {\r\n        this._mapTarget.style.width = '';\r\n        this._mapTarget.style.height = '';\r\n        this._map.updateSize();\r\n        this._view.setResolution(this._initialViewResolution);\r\n        this._mapTarget.classList.remove(CLASS_PRINT_MODE);\r\n\r\n        this._view.setConstrainResolution(true);\r\n\r\n        clearTimeout(this._timeoutProcessing);\r\n\r\n        this._cancel();\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _prepareLoading(): void {\r\n        this._processingModal.show(this._i18n.pleaseWait);\r\n\r\n        this._timeoutProcessing = setTimeout(() => {\r\n            this._processingModal.show(this._i18n.almostThere);\r\n        }, 4000);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _disableLoading(): void {\r\n        this._processingModal.hide();\r\n    }\r\n\r\n    /**\r\n     * This could be used to increment the DPI before printing\r\n     * @protected\r\n     */\r\n    _setFormatOptions(string = ''): void {\r\n        const layers = this._map.getLayers();\r\n        layers.forEach((layer) => {\r\n            if (layer instanceof Tile) {\r\n                const source = layer.getSource();\r\n                // Set WMS DPI\r\n                if (source instanceof TileWMS) {\r\n                    source.updateParams({\r\n                        FORMAT_OPTIONS: string\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param form\r\n     * @param showLoading\r\n     * @param delay Delay to prevent glitching with modals animation\r\n     * @protected\r\n     */\r\n    _printMap(form: IPrintOptions, showLoading = true, delay = 0): void {\r\n        if (showLoading) {\r\n            this._mapTarget.classList.add(CLASS_PRINT_MODE);\r\n        }\r\n\r\n        setTimeout(() => {\r\n            if (showLoading) {\r\n                this._prepareLoading();\r\n            }\r\n\r\n            this._isCanceled = false;\r\n\r\n            // To allow intermediate zoom levels\r\n            this._view.setConstrainResolution(false);\r\n\r\n            let dim = this._options.paperSizes.find(\r\n                (e) => e.value === form.format\r\n            ).size;\r\n\r\n            dim =\r\n                form.orientation === 'landscape'\r\n                    ? dim\r\n                    : ([...dim].reverse() as [number, number]);\r\n\r\n            const widthPaper = dim[0];\r\n            const heightPaper = dim[1];\r\n\r\n            const mapSizeForPrint = this._setMapSizForPrint(\r\n                widthPaper,\r\n                heightPaper,\r\n                form.resolution\r\n            );\r\n            const [width, height] = mapSizeForPrint;\r\n\r\n            // Save current resolution to restore it later\r\n            this._initialViewResolution = this._view.getResolution();\r\n\r\n            const pixelsPerMapMillimeter = form.resolution / 25.4;\r\n\r\n            const scaleResolution =\r\n                form.scale /\r\n                getPointResolution(\r\n                    this._view.getProjection(),\r\n                    pixelsPerMapMillimeter,\r\n                    this._view.getCenter()\r\n                );\r\n\r\n            this._renderCompleteKey = this._map.once('rendercomplete', () => {\r\n                domtoimage\r\n                    .toJpeg(\r\n                        this._mapTarget.querySelector(\r\n                            '.ol-unselectable.ol-layers'\r\n                        ),\r\n                        {\r\n                            width,\r\n                            height\r\n                        }\r\n                    )\r\n                    .then(async (dataUrl) => {\r\n                        if (this._isCanceled) return;\r\n\r\n                        this._pdf = new Pdf({\r\n                            view: this._view,\r\n                            i18n: this._i18n,\r\n                            config: this._options,\r\n                            form: form,\r\n                            height: heightPaper,\r\n                            width: widthPaper,\r\n                            scaleResolution\r\n                        });\r\n\r\n                        this._pdf.addMapImage(dataUrl);\r\n                        await this._pdf.addMapHelpers();\r\n\r\n                        if (this._isCanceled) return;\r\n\r\n                        await this._pdf.savePdf();\r\n\r\n                        // Reset original map size\r\n                        this._onEndPrint();\r\n\r\n                        if (showLoading) this._disableLoading();\r\n                    })\r\n                    .catch((err: Error) => {\r\n                        const message =\r\n                            typeof err === 'string' ? err : this._i18n.error;\r\n                        console.error(err);\r\n                        this._onEndPrint();\r\n                        this._processingModal.show(message);\r\n                    });\r\n            });\r\n\r\n            // Set print size\r\n            this._mapTarget.style.width = width + 'px';\r\n            this._mapTarget.style.height = height + 'px';\r\n            this._map.updateSize();\r\n            this._map.getView().setResolution(scaleResolution);\r\n        }, delay);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     */\r\n    _cancel(): void {\r\n        if (this._renderCompleteKey) {\r\n            unByKey(this._renderCompleteKey);\r\n        }\r\n\r\n        this._isCanceled = true;\r\n    }\r\n\r\n    /**\r\n     * Show the Settings Modal\r\n     * @public\r\n     */\r\n    showPrintSettingsModal(): void {\r\n        if (!this._initialized) this._init();\r\n        this._settingsModal.show();\r\n    }\r\n\r\n    /**\r\n     * Hide the Settings Modal\r\n     * @public\r\n     */\r\n    hidePrintSettingsModal(): void {\r\n        this._settingsModal.hide();\r\n    }\r\n\r\n    /**\r\n     * Create PDF programatically without displaying the Settings Modal\r\n     * @param options\r\n     * @public\r\n     */\r\n    createPdf(options: IPrintOptions, showLoading: boolean): void {\r\n        options = {};\r\n        this._printMap(\r\n            {\r\n                format: (\r\n                    this._options.paperSizes.find((p) => p.selected) ||\r\n                    this._options.paperSizes[0]\r\n                ).value,\r\n                resolution: (\r\n                    this._options.dpi.find((p) => p.selected) ||\r\n                    this._options.dpi[0]\r\n                ).value,\r\n                orientation: 'landscape',\r\n                compass: true,\r\n                attributions: true,\r\n                scalebar: true,\r\n                scale: 1000,\r\n                typeExport: 'pdf',\r\n                ...options\r\n            },\r\n            showLoading\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n */\r\nexport interface IPrintOptions {\r\n    /**\r\n     *\r\n     */\r\n    format?: IPaperSize['value'];\r\n    /**\r\n     *\r\n     */\r\n    orientation?: 'landscape' | 'portrait';\r\n    /**\r\n     *\r\n     */\r\n    resolution?: IDpi['value'];\r\n    /**\r\n     *\r\n     */\r\n    scale?: IScale;\r\n    /**\r\n     *\r\n     */\r\n    description?: string;\r\n    /**\r\n     *\r\n     */\r\n    compass?: boolean;\r\n    /**\r\n     *\r\n     */\r\n    attributions?: boolean;\r\n    /**\r\n     *\r\n     */\r\n    scalebar?: boolean;\r\n    /**\r\n     *\r\n     */\r\n    typeExport?: IMimeTypeExport['value'];\r\n}\r\n\r\n/**\r\n * **_[interface]_** - Custom translations specified when creating an instance\r\n */\r\nexport interface IValues {\r\n    format: FormDataEntryValue;\r\n    orientation: FormDataEntryValue;\r\n    resolution: FormDataEntryValue;\r\n    scale: FormDataEntryValue;\r\n    description: FormDataEntryValue;\r\n    compass: FormDataEntryValue;\r\n    attributions: FormDataEntryValue;\r\n    scalebar: FormDataEntryValue;\r\n    typeExport: FormDataEntryValue;\r\n}\r\n\r\n/**\r\n * **_[interface]_** - Custom translations specified when creating an instance\r\n */\r\nexport interface I18n {\r\n    printPdf: string;\r\n    pleaseWait: string;\r\n    almostThere: string;\r\n    error: string;\r\n    errorImage: string;\r\n    printing: string;\r\n    cancel: string;\r\n    close: string;\r\n    print: string;\r\n    mapElements: string;\r\n    compass: string;\r\n    scale: string;\r\n    layersAttributions: string;\r\n    addNote: string;\r\n    resolution: string;\r\n    orientation: string;\r\n    paperSize: string;\r\n    landscape: string;\r\n    portrait: string;\r\n    current: string;\r\n    paper: string;\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n */\r\ninterface IPaperSize {\r\n    /**\r\n     *\r\n     */\r\n    size: [number, number];\r\n    /**\r\n     *\r\n     */\r\n    value: string;\r\n    /**\r\n     *\r\n     */\r\n    selected?: boolean;\r\n}\r\n\r\n/**\r\n * **_[type]_**\r\n */\r\ntype IScale = number;\r\n\r\n/**\r\n * **_[interface]_**\r\n */\r\ninterface IDpi {\r\n    /**\r\n     *\r\n     */\r\n    value: number;\r\n    /**\r\n     *\r\n     */\r\n    selected?: boolean;\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n */\r\ninterface IStyle {\r\n    /**\r\n     *\r\n     */\r\n    paperMargin?: number;\r\n    /**\r\n     *\r\n     */\r\n    brcolor?: string;\r\n    /**\r\n     *\r\n     */\r\n    bkcolor?: string;\r\n    /**\r\n     *\r\n     */\r\n    txcolor?: string;\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n */\r\ninterface IMimeTypeExport {\r\n    value: 'pdf' | 'png' | 'jpeg' | 'webp';\r\n    selected?: boolean;\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n */\r\ninterface IModal {\r\n    /**\r\n     *\r\n     */\r\n    animateClass?: string;\r\n    /**\r\n     *\r\n     */\r\n    animateInClass?: string;\r\n    /**\r\n     *\r\n     */\r\n    transition?: number;\r\n    /**\r\n     *\r\n     */\r\n    backdropTransition?: number;\r\n    /**\r\n     *\r\n     */\r\n    templates?: {\r\n        dialog?: string | HTMLElement;\r\n        headerClose?: string | HTMLElement;\r\n    };\r\n}\r\n\r\n/**\r\n * **_[interface]_**\r\n */\r\nexport interface IWatermark {\r\n    /**\r\n     *\r\n     */\r\n    title?: string;\r\n    /**\r\n     *\r\n     */\r\n    titleColor?: string;\r\n    /**\r\n     *\r\n     */\r\n    subtitle?: string;\r\n    /**\r\n     *\r\n     */\r\n    subtitleColor?: string;\r\n    /**\r\n     *\r\n     */\r\n    logo?: false | string | HTMLImageElement | SVGElement;\r\n}\r\n\r\n/**\r\n * **_[interface]_** - Print information at the bottom of the PDF\r\n */\r\ninterface IExtraInfo {\r\n    /**\r\n     * Print Date\r\n     */\r\n    date?: boolean;\r\n    /**\r\n     * Current site url\r\n     */\r\n    url?: boolean;\r\n    /**\r\n     * DPI, Format and Scale information\r\n     */\r\n    specs?: boolean;\r\n}\r\n\r\n/**\r\n * **_[interface]_** - MapElements\r\n * @public\r\n */\r\nexport interface IMapElements {\r\n    /**\r\n     * Print description\r\n     */\r\n    description?: boolean;\r\n    /**\r\n     * Layers attributions\r\n     */\r\n    attributions?: boolean;\r\n    /**\r\n     * Scalebar\r\n     */\r\n    scalebar?: boolean;\r\n    /**\r\n     * Compass image. North must be pointing to the top\r\n     */\r\n    compass?: false | string | HTMLImageElement | SVGElement;\r\n}\r\n\r\n/**\r\n * **_[interface]_** - Options specified when creating an instance\r\n */\r\nexport interface Options extends ControlOptions {\r\n    /**\r\n     * Export filename\r\n     */\r\n    filename?: string;\r\n\r\n    /**\r\n     * Map unit mode\r\n     */\r\n    units?: 'metric' | 'imperial';\r\n\r\n    /**\r\n     * Some basic PDF style configuration\r\n     */\r\n    style?: IStyle;\r\n\r\n    /**\r\n     * Information to be inserted at the bottom of the PDF\r\n     * False to disable\r\n     */\r\n    extraInfo?: false | IExtraInfo;\r\n\r\n    /**\r\n     * Elements to be showed on the PDF and in the Settings Modal.\r\n     * False to disable\r\n     */\r\n    mapElements?: false | IMapElements;\r\n\r\n    /**\r\n     * Watermark to be inserted in the PDF.\r\n     * False to disable\r\n     */\r\n    watermark?: false | IWatermark;\r\n\r\n    /**\r\n     * Paper sizes options to be shown in the settings modal\r\n     */\r\n    paperSizes?: IPaperSize[];\r\n\r\n    /**\r\n     * DPI resolutions options to be shown in the settings modal\r\n     */\r\n    dpi?: IDpi[];\r\n\r\n    /**\r\n     * Map scales options to be shown in the settings modal\r\n     */\r\n    scales?: IScale[];\r\n\r\n    /**\r\n     * Export format\r\n     */\r\n    mimeTypeExports?: IMimeTypeExport[];\r\n\r\n    /**\r\n     * Locale time zone. Default varies according to browser locale\r\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString#using_locales\r\n     */\r\n    dateFormat?: Locale;\r\n\r\n    /**\r\n     * ClassName to add to the Btn Control\r\n     */\r\n    ctrlBtnClass?: string;\r\n\r\n    /**\r\n     * Modal configuration\r\n     */\r\n    modal?: IModal;\r\n\r\n    /**\r\n     * Language support\r\n     */\r\n    language?: 'es' | 'en';\r\n\r\n    /**\r\n     * Add custom translations\r\n     */\r\n    i18n?: I18n;\r\n}\r\n"],"names":["Event","constructor","type","this","propagationStopped","defaultPrevented","target","preventDefault","stopPropagation","ObjectEventType","Disposable$1","disposed","dispose","disposeInternal","ascending","a","b","linearFindNearest","arr","direction","n","length","i","equals","arr1","arr2","len1","VOID","clear","object","property","EventTarget","Disposable","super","eventTarget_","pendingRemovals_","dispatching_","listeners_","addEventListener","listener","listeners","listenersForType","includes","push","dispatchEvent","event","isString","evt","dispatching","pendingRemovals","propagate","ii","handleEvent","call","pr","removeEventListener","getListeners","undefined","hasListener","Object","keys","index","indexOf","splice","EventType","CHANGE","ERROR","BLUR","CLEAR","CONTEXTMENU","CLICK","DBLCLICK","DRAGENTER","DRAGOVER","DROP","FOCUS","KEYDOWN","KEYPRESS","LOAD","RESIZE","TOUCHMOVE","WHEEL","listen","thisArg","once","bind","originalListener","apply","arguments","eventsKey","listenOnce","unlistenByKey","key","Observable","on","un","revision_","changed","getRevision","onInternal","Array","isArray","len","onceInternal","ol_key","unInternal","unByKey","abstract","Error","prototype","uidCounter_","getUid","obj","ol_uid","String","ObjectEvent","oldValue","BaseObject$1","values","values_","setProperties","get","value","hasOwnProperty","getKeys","getProperties","assign","hasProperties","notify","eventType","addChangeListener","removeChangeListener","set","silent","applyProperties","source","unset","isEmpty","MapEventType","ua","navigator","userAgent","toLowerCase","test","WORKER_OFFSCREEN_CANVAS","WorkerGlobalScope","OffscreenCanvas","self","IMAGE_DECODE","Image","decode","createCanvasContext2D","width","height","canvasPool","settings","canvas","shift","document","createElement","getContext","releaseCanvas","context","clearRect","removeNode","node","parentNode","removeChild","passive","options","defineProperty","window","error","Control$1","BaseObject","element","style","pointerEvents","target_","map_","listenerKeys","render","setTarget","getMap","setMap","map","getOverlayContainerStopEvent","appendChild","mapEvent","getElementById","TileState","easeIn","t","Math","pow","easeOut","inAndOut","Tile$2","tileCoord","state","interimTile","transition_","transition","transitionStarts_","interpolate","release","setState","getKey","getInterimTile","tile","getState","refreshInterimChain","prev","getTileCoord","load","getAlpha","id","time","start","delta","inTransition","endTransition","ImageState","Relationship","UNKNOWN","INTERSECTING","ABOVE","RIGHT","BELOW","LEFT","messages","AssertionError","code","message","name","AssertionError$1","assert","assertion","errorCode","boundingExtent","coordinates","extent","createEmpty","extendCoordinate","buffer","dest","closestSquaredDistanceXY","x","y","dx","dy","containsCoordinate","coordinate","containsXY","coordinateRelationship","minX","minY","maxX","maxY","relationship","Infinity","createOrUpdate","createOrUpdateEmpty","extendFlatCoordinates","flatCoordinates","offset","end","stride","extendXY","min","max","forEachCorner","callback","val","getBottomLeft","getBottomRight","getTopRight","getTopLeft","getArea","area","getWidth","getHeight","getCenter","getCorner","corner","getRotatedViewport","center","resolution","rotation","size","cosRotation","cos","sinRotation","sin","xCos","xSin","yCos","ySin","getIntersection","extent1","extent2","intersection","intersects","applyTransform","transformFn","stops","xs","ys","l","_boundingExtentXYs","ImageTile$1","Tile","src","crossOrigin","tileLoadFunction","crossOrigin_","src_","image_","unlisten_","tileLoadFunction_","getImage","setImage","unlistenImage_","handleImageError_","ctx","fillStyle","fillRect","getBlankImage","handleImageLoad_","image","naturalWidth","naturalHeight","loadHandler","errorHandler","img","listening","decoding","loaded","then","catch","forEach","listenImage","METERS_PER_UNIT","radians","PI","degrees","ft","m","Projection$1","code_","units_","extent_","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","canWrapX","getCode","getExtent","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setExtent","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc","RADIUS","HALF_SIZE","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","log","tan","EPSG3857Projection","Projection","units","point","cosh","PROJECTIONS","fromEPSG4326","input","output","dimension","slice","toEPSG4326","atan","exp","EPSG4326Projection","cache","transforms","add","destination","sourceCode","destinationCode","clamp","squaredSegmentDistance","x1","y1","x2","y2","squaredDistance","toRadians","angleInDegrees","modulo","r","lerp","toFixed","decimals","factor","round","floor","ceil","coordinate1","coordinate2","DEFAULT_RADIUS","getDistance","c1","c2","radius","lat1","lat2","deltaLatBy2","deltaLonBy2","atan2","sqrt","levels","info","warn","none","level","showCoordinateWarning","cloneTransform","identityTransform","addProjection","projection","addProj","addTransformFunc","projectionLike","replace","pointResolution","getter","projUnits","getTransformFromProjections","vertices","addEquivalentProjections","projections","addProjections","createProjection","defaultCode","equivalent","projection1","projection2","equalUnits","sourceProjection","destinationProjection","transformFunc","transform","getTransformFunc","getTransform","toUserCoordinate","fromUserCoordinate","destProjection","args","console","fromUserExtent","projections2","forwardTransform","inverseTransform","EPSG3857_PROJECTIONS","EPSG4326_PROJECTIONS","Triangulation$1","sourceProj","targetProj","targetExtent","maxSourceExtent","errorThreshold","destinationResolution","sourceProj_","targetProj_","transformInvCache","transformInv","transformInv_","c","maxSourceExtent_","errorThresholdSquared_","triangles_","wrapsXInSource_","canWrapXInSource_","sourceWorldWidth_","targetWorldWidth_","destinationTopLeft","destinationTopRight","destinationBottomRight","destinationBottomLeft","sourceTopLeft","sourceTopRight","sourceBottomRight","sourceBottomLeft","maxSubdivision","log2","addQuad_","leftBound","triangle","newTriangle","addTriangle_","aSrc","bSrc","cSrc","d","dSrc","sourceQuadExtent","sourceCoverageX","sourceWorldWidth","wrapsX","needsSubdivision","isFinite","isNotFinite","centerSrc","abs","bc","bcSrc","da","daSrc","ab","abSrc","cd","cdSrc","calculateSourceExtent","getTriangles","brokenDiagonalRendering_","drawTestTriangle","u1","v1","u2","v2","beginPath","moveTo","lineTo","closePath","save","clip","restore","verifyBrokenDiagonalRendering","data","calculateSourceResolution","targetCenter","targetResolution","sourceCenter","sourceResolution","targetMetersPerUnit","sourceMetersPerUnit","sourceExtent","compensationFactor","pixelRatio","triangulation","sources","gutter","renderEdges","imageSmoothingEnabled","pixelRound","scale","globalCompositeOperation","sourceDataExtent","canvasWidthInUnits","canvasHeightInUnits","stitchContext","stitchScale","xPos","yPos","srcWidth","srcHeight","drawImage","targetTopLeft","x0","y0","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","affineCoefs","mat","maxRow","maxEl","absValue","tmp","j","coef","k","solveLinearSystem","getImageData","isBrokenDiagonalRendering","steps","ud","vd","step","translate","strokeStyle","lineWidth","stroke","ReprojTile$1","sourceTileGrid","targetTileGrid","wrappedTileCoord","getTileFunction","renderEdges_","pixelRatio_","gutter_","canvas_","sourceTileGrid_","targetTileGrid_","wrappedTileCoord_","sourceTiles_","sourcesListenerKeys_","sourceZ_","getTileCoordExtent","maxTargetExtent","limitedTargetExtent","sourceProjExtent","getResolution","calculateSourceExtentResolution","errorThresholdInPixels","triangulation_","Triangulation","getZForResolution","sourceRange","getTileRangeForExtentAndZ","srcX","srcY","reproject_","z","getTileSize","renderReprojected","leftToLoad","sourceListenKey","e","unlistenSources_","setTimeout","LRUCache$1","highWaterMark","count_","entries_","oldest_","newest_","canExpireCache","getCount","expireCache","keep","pop","containsKey","f","entry","value_","key_","newer","older","remove","getValues","peekLast","peekLastKey","peekFirstKey","peek","setSize","getKeyZXY","hash","TileCache$1","LRUCache","usedTiles","pruneExceptNewestZ","split","Number","fromKey","TileEventType","adaptAttributions","attributionLike","frameState","Source$1","getProjection","attributions_","attributions","attributionsCollapsible_","attributionsCollapsible","loading","state_","wrapX_","wrapX","interpolate_","viewResolver","viewRejector","viewPromise_","Promise","resolve","reject","getAttributions","getAttributionsCollapsible","getResolutions","getView","getWrapX","getInterpolate","refresh","setAttributions","TileRange","contains","containsTileRange","tileRange","extend","getSize","TileRange$1","DEFAULT_MAX_ZOOM","DEFAULT_TILE_SIZE","linearRingContainsExtent","linearRingContainsXY","wn","linearRingsContainsXY","ends","intersectsLineString","coordinatesExtent","ret","forEachSegment","point1","point2","startRel","endRel","startX","startY","endX","endY","slope","intersectsSegment","intersectsLinearRing","num","ratio","toSize","tmpTileCoord","TileGrid$1","zoomFactor","minZoom","resolutions_","resolutions","strict","compare","every","currentVal","res","isSorted","origins","zoomFactor_","maxZoom","origin_","origin","origins_","tileSizes_","tileSizes","tileSize_","tileSize","fullTileRanges_","tmpSize_","tmpExtent_","sizes","restrictedTileRange","calculateTileRanges_","forEachTileCoord","zoom","jj","forEachTileCoordParentTileRange","tempTileRange","tempExtent","tileCoordExtent","createOrUpdateTileRange","getMaxZoom","getMinZoom","getOrigin","getTileCoordChildTileRange","getTileRangeForTileCoordAndZ","tileCoordZ","tileCoordX","tileCoordY","getTileRangeExtent","getTileCoordForXYAndZ_","getTileCoordCenter","getTileCoordForCoordAndResolution","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","createOrUpdateTileCoord","getTileCoordForCoordAndZ","getTileCoordResolution","getFullTileRange","opt_direction","tileCoordIntersectsViewport","viewport","fullTileRanges","getForProjection","extentFromProjection","maxResolution","resolutionsFromExtent","TileGrid","createForExtent","createForProjection","half","TileSourceEvent","TileSource$1","Source","opaque_","opaque","tilePixelRatio_","tilePixelRatio","tileCache","TileCache","cacheSize","tmpSize","tileOptions","zDirection","getTileCacheForProjection","forEachLoadedTile","tileCoordKey","covered","getGutterForProjection","setKey","getOpaque","getTileGridForProjection","getTile","getTileGrid","getTilePixelRatio","getTilePixelSize","scaleSize","getTileCoordForTileUrlFunction","projectionExtent","worldWidth","worldsAway","withinExtentAndZ","updateCacheSize","tileCount","useTile","createFromTemplate","template","zRegEx","xRegEx","yRegEx","dashYRegEx","toString","range","createFromTemplates","templates","tileUrlFunctions","tileCoordHash","createFromTileUrlFunctions","UrlTile","TileSource","generateTileUrlFunction_","tileUrlFunction","urls","setUrls","url","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","getPrototypeOf","getUrls","handleTileChange","uid","tileState","setTileLoadFunction","setTileUrlFunction","match","exec","startCharCode","charCodeAt","stopCharCode","charCode","fromCharCode","stop","parseInt","expandUrl","join","UrlTile$1","defaultTileLoadFunction","imageTile","TileImage$1","tileClass","ImageTile","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","usedTileCache","getGutter","thisProj","projKey","createTile_","urlTileCoord","tileUrl","getTileInternal","newTile","ReprojTile","setRenderReprojectionEdges","setTileGridForProjection","tilegrid","proj","DEFAULT_VERSION","appendParams","uri","params","keyParams","encodeURIComponent","qs","TileWMS$1","TileImage","transparent","params_","v13_","serverType_","serverType","hidpi_","hidpi","updateV13_","getKeyForParams_","getFeatureInfoUrl","projectionObj","sourceProjectionObj","tileResolution","tileExtent","bufferSize","baseParams","SERVICE","VERSION","REQUEST","FORMAT","TRANSPARENT","QUERY_LAYERS","getRequestUrl_","getLegendUrl","layers","LAYERS","mpu","pixelSize","getParams","dpi","bbox","substr","updateParams","version","s1","s2","n1","n2","compareVersions","LayerProperty","BaseLayer$1","background_","background","properties","opacity","visible","zIndex","minResolution","className_","className","getBackground","getClassName","getLayerState","managed","layer","getZIndex","getOpacity","getVisible","getMaxResolution","getMinResolution","getLayersArray","array","getLayerStatesArray","states","getSourceState","setBackground","setMaxResolution","setMinResolution","setMaxZoom","setMinZoom","setOpacity","setVisible","setZIndex","zindex","RenderEventType","ViewHint","ViewProperty","CENTER","RESOLUTION","ROTATION","createExtent","onlyCenter","smooth","isMoving","centerShift","viewWidth","viewHeight","shiftX","shiftY","getViewportClampedResolution","maxExtent","viewportSize","showFullExtent","xResolution","yResolution","getSmoothClampedResolution","result","createMinMaxResolution","cappedMaxRes","disable","compose","dx1","dy1","sx","sy","angle","dx2","dy2","transformStringDiv","tmpTransform","Geometry$1","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","fn","lastResult","lastArgs","lastThis","called","nextArgs","arrayEquals","memoizeOne","revision","squaredTolerance","getSimplifiedGeometry","clone","simplifyTransformed","closestPointXY","closestPoint","minSquaredDistance","coord","getClosestPoint","NaN","intersectsCoordinate","computeExtent","isNaN","returnOrUpdate","rotate","anchor","simplify","tolerance","getType","intersectsExtent","deltaX","deltaY","inCoordinates","outCoordinates","pixelExtent","projectedExtent","composeTransform","transform2D","getStrideForLayout","layout","SimpleGeometry$1","Geometry","getCoordinates","getFirstCoordinate","getFlatCoordinates","getLastCoordinate","getLayout","simplifiedGeometry","getSimplifiedGeometryInternal","getStride","setFlatCoordinates","setCoordinates","setLayout","nesting","getLayoutForStride","anchorX","anchorY","assignClosest","offset1","offset2","maxSquaredDelta","squaredDelta","squaredDx","assignClosestPoint","maxDelta","isRing","tmpPoint","deflateCoordinates","snap","quantize","simplifiedFlatCoordinates","simplifiedOffset","x3","y3","inflateCoordinates","linearRing","twiceArea","LinearRing","SimpleGeometry","maxDelta_","maxDeltaRevision_","linearRingArea","markers","stack","last","first","maxSquaredDistance","douglasPeucker","LinearRing$1","Point","createOrUpdateFromCoordinate","deflateCoordinate","Point$1","linearRingIsClockwise","edge","orientLinearRings","right","isClockwise","reverseCoordinates","Polygon","ends_","flatInteriorPointRevision_","flatInteriorPoint_","orientedRevision_","orientedFlatCoordinates_","appendLinearRing","extension","polygon","arrayMaxSquaredDelta","assignClosestArrayPoint","getOrientedFlatCoordinates","linearRingsArea","coordinatess","inflateCoordinatesArray","getEnds","getFlatInteriorPoint","flatCenter","flatCenters","flatCentersOffset","intersections","rr","pointX","maxSegmentLength","sort","segmentLength","getInteriorPointOfArray","getInteriorPoint","getLinearRingCount","getLinearRing","getLinearRings","linearRings","linearRingsAreOriented","simplifiedEnds","quantizeArray","intersectsLinearRingArray","deflateCoordinatesArray","fromExtent","animationCallback","returnValue","isNoopAnimation","animation","coordinatesEqual","sourceRotation","targetRotation","calculateCenterOn","position","cosAngle","sinAngle","rotX","rotY","View$1","hints_","animations_","updateAnimationKey_","projection_","viewportSize_","targetCenter_","targetResolution_","targetRotation_","nextCenter_","nextResolution_","nextRotation_","cancelAnchor_","disableCoordinateWarning","applyOptions_","resolutionConstraintInfo","resolutionConstraint","defaultMaxZoom","defaultZoomFactor","multiWorld","smoothResolutionConstraint","projExtent","constrainOnlyCenter","constrainResolution","capped","createSnapToResolutions","defaultMaxResolution","defaultMinResolution","power","minZoomLevel","cappedZoomLevel","zoomLevel","createSnapToPower","constraint","createResolutionConstraint","maxResolution_","minResolution_","padding_","padding","minZoom_","centerConstraint","smoothExtentConstraint","centerNone","createCenterConstraint","rotationConstraint","enableRotation","constrainRotation","rotationNone","theta","createSnapToN","createRotationConstraint","constraints_","setRotation","setCenterInternal","setResolution","setZoom","oldPadding","getCenterInternal","newPadding","offsetX","offsetY","getUpdatedOptions_","newOptions","getZoom","getRotation","animate","var_args","isDef","getAnimating","resolveConstraints","animateInternal","animationCount","Date","now","series","complete","duration","easing","getResolutionForZoom","setHint","updateAnimations_","getInteracting","cancelAnimations","cancelAnimationFrame","more","seriesComplete","elapsed","fraction","progress","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","currentCenter","rotateCoordinate","currentResolution","w","h","setViewportSize","getConstraints","getConstrainResolution","getHints","hints","calculateExtent","toUserExtent","calculateExtentInternal","getViewportSizeMinusPadding_","getForViewAndSize","getZoomForResolution","setConstrainResolution","enabled","getResolutionForExtent","getResolutionForExtentInternal","getResolutionForValueFunction","getConstrainedResolution","getValueForResolutionFunction","logPower","reducedSize","nextCenter","nextResolution","nextRotation","getViewStateAndExtent","viewState","nearest","baseLevel","fit","geometryOrExtent","geometry","polygonFromExtent","fitInternal","rotatedExtentForGeometry","coords","minRotX","minRotY","maxRotX","maxRotY","rotatedExtent","centerRot","centerX","centerY","getConstrainedCenter","centerOn","centerOnInternal","calculateCenterShift","shiftedCenter","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","adjustResolutionInternal","newResolution","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","doNotCancelAnims","forceMoving","newCenter","resolutionDirection","beginInteraction","endInteraction","endInteractionInternal","getConstrainedZoom","targetZoom","targetRes","Layer$1","BaseLayer","baseOptions","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","sourceReady_","rendered","handleSourcePropertyChange_","setSource","getSource","getRenderSource","handleSourceChange_","getFeatures","pixel","getData","isVisible","view","View","layerExtent","layerState","inView","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","setMapInternal","getMapInternal","layerStatesArray","some","arrayLayerState","createRenderer","hasRenderer","TileProperty","BaseTileLayer$1","Layer","preload","useInterimTilesOnError","setPreload","setUseInterimTilesOnError","getPreload","getUseInterimTilesOnError","LayerRenderer$1","ready","boundHandleImageChange_","handleImageChange_","layer_","declutterExecutorGroup","loadedTileCallback","tiles","createLoadedTileFinder","forEachFeatureAtCoordinate","hitTolerance","matches","getLayer","handleFontsChanged","renderIfReadyAndVisible","loadImage","imageState","RenderEvent$1","inversePixelTransform","HEX_COLOR_RE_","NAMED_COLOR_RE_","fromString","s","color","g","el","body","rgb","getComputedStyle","fromNamed","hasAlpha","startsWith","normalize","fromStringInternal_","asArray","pixelContext","CanvasLayerRenderer$1","LayerRenderer","container","renderedResolution","tempTransform","pixelTransform","containerReused","pixelContext_","col","row","willReadFrequently","err","useContainer","backgroundColor","layerClassName","firstElementChild","HTMLCanvasElement","left","transformOrigin","clipUnrotated","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","dispatchRenderEvent_","RenderEvent","preRender","postRender","getRenderTransform","CanvasTileLayerRenderer$1","CanvasLayerRenderer","tileLayer","extentChanged","renderedExtent_","renderedPixelRatio","renderedProjection","renderedRevision","renderedTiles","newTiles_","tmpExtent","tmpTileRange_","isDrawableTile","pixelToCoordinateTransform","tileOrigin","layerIndex","viewResolution","viewCenter","tileSource","sourceRevision","canvasExtent","tilesToDrawByZ","findLoadedTiles","tmpTileRange","childTileRange","canvasScale","canvasTransform","transformString","toTransformString","det","makeInverse","clips","clipZs","currentClip","zs","reverse","currentZ","currentTilePixelSize","currentScale","originTileCoord","originTileExtent","tileGutter","tilesToDraw","xIndex","nextX","yIndex","nextY","contextSaved","drawTileImage","unshift","updateUsedTiles","manageTilePyramid","scheduleExpireCache","getTileImage","alpha","alphaChanged","globalAlpha","postRenderFunction","tileSourceKey","postRenderFunctions","tileCallback","wantedTiles","tileQueue","isKeyQueued","enqueue","BaseTileLayer","CanvasTileLayerRenderer","util","escape","string","parseExtension","mimeType","WOFF","JPEG","woff","woff2","ttf","eot","png","jpg","jpeg","gif","tiff","svg","dataAsUrl","content","isDataUrl","search","canvasToBlob","toBlob","binaryString","atob","toDataURL","binaryArray","Uint8Array","Blob","resolveUrl","baseUrl","doc","implementation","createHTMLDocument","base","head","href","getAndEncode","TIMEOUT","domtoimage","impl","cacheBust","getTime","placeholder","request","XMLHttpRequest","onreadystatechange","done","ontimeout","timeout","responseType","useCredentials","withCredentials","open","send","imagePlaceholder","readyState","status","encoder","FileReader","onloadend","readAsDataURL","response","fail","fourRandomChars","random","delay","ms","arg","arrayLike","isChrome","escapeXhtml","makeImage","onload","onerror","leftBorder","px","rightBorder","scrollWidth","topBorder","bottomBorder","scrollHeight","styleProperty","getPropertyValue","parseFloat","newUtil","inliner","URL_REGEX","inlineAll","nothingToInline","readUrls","inline","shouldProcess","dataUrl","RegExp","urlAsRegex","newInliner","fontFaces","resolveAll","readAll","webFonts","all","webFont","cssStrings","styleSheets","cssRules","sheet","rule","CSSRule","FONT_FACE_RULE","rules","newWebFont","webFontRule","parentStyleSheet","cssText","newFontFaces","images","Element","inlineBackground","HTMLImageElement","newImage","childNodes","child","inlined","setProperty","getPropertyPriority","newImages","defaultOptions","toSvg","toPng","draw","toJpeg","quality","toPixelData","toCanvas","copyOptions","cloneNode","embedFonts","inlineImages","bgcolor","setAttribute","XMLSerializer","serializeToString","xhtml","foreignObject","makeSvgDataUri","domNode","newCanvas","sw","sh","dw","dh","root","original","children","tagName","baseVal","copyShadowChild","cloneChildrenInOrder","parent","childClone","cloneChildren","cloneStyle","clonePseudoElements","copyUserInput","fixSvg","copyStyle","copyProperties","font","marker","clonePseudoElement","currentClass","getAttribute","styleElement","formatPseudoElementStyle","selector","formatCssText","formatCssProperties","createTextNode","formatProperty","HTMLTextAreaElement","innerHTML","HTMLInputElement","SVGElement","SVGRectElement","attribute","processClone","styleNode","module","exports","attrs","elem","entries","append","nodeType","Pdf","addMapHelpers","async","mapElements","extraInfo","watermark","_config","_style","_addWatermark","compass","_form","_addCompass","description","_addDescription","scalebar","_addScaleBar","_addAttributions","_addUrl","date","_addDate","specs","_addSpecs","_processSvgImage","getSvgUrl","URL","createObjectURL","outerHTML","svgUrlToPng","svgUrl","svgImage","_i18n","errorImage","clientWidth","clientHeight","imgData","revokeObjectURL","svgToPng","_calculateOffsetByPosition","paperMargin","_pdf","_addRoundedBox","bkcolor","brcolor","setDrawColor","setFillColor","roundedRect","_addText","fontSize","align","str","setTextColor","setFontSize","text","_addTextByOffset","fixX","trim","txcolor","getTextDimensions","maxWidth","paddingBack","fontSizeSubtitle","back","acumulativeWidth","logo","imageSize","title","titleColor","setFont","subtitle","wSub","widthBack","subtitleColor","marginTop","addImage","toLocaleDateString","dateFormat","location","_scaleDenominator","toLocaleString","paper","format","toUpperCase","attributionsUl","querySelector","textContent","whiteSpaceWidth","querySelectorAll","sumWhiteSpaceWidth","from","attribution","textWithLink","log10","LOG10E","unit","unitConversionFactor","maxLength","metre","inch","mile","yard","unroundedLength","numberOfDigits","mapped","percentageMargin","fullSize","scaleBarX","scaleBarY","rect","imgSrc","rotationRadians","_view","addRotation","xCircle","yCircle","circle","rotatedCanvas","xImage","yImage","sizeImage","form","i18n","config","scaleResolution","create","orientation","_calculateScaleDenominator","_a","jspdf","jsPDF","addMapImage","savePdf","typeExport","filename","pdf","versionPdfJS","pdfjsLib","GlobalWorkerOptions","workerSrc","getDocument","promise","getPage","page","getViewport","myPragma","display","canvasContext","link","download","click","downloadURI","pixelsPerMapMillimeter","_getMeterPerPixel","_factory","_defaults","freeze","animateClass","animateInClass","appendTo","backdrop","keyboard","header","footer","buttons","headerClose","construct","backdropTransition","_buttons","deepFreeze","v","dialog","attr","class","alert","confirm","_templates","prop","prefix","elData","dataAttr","build","html","nodeName","getPath","nodes","Modal","EventEmitter","_baseTemplates","_baseButtons","_baseOptions","static","_options","question","_html","_events","_visible","_pointerInContent","_scrollbarWidth","inner","outerWidth","outer","visibility","offsetWidth","overflow","calcScrollbarWidth","_render","_mapDom","o","classList","_setHeader","_setContent","_setFooter","ineerHTML","button","_setEvents","keydownHandler","_handleKeydownEvent","mousedownHandler","_handleMousedownEvent","clickHandler","_handleClickEvent","resizeHandler","_handleResizeEvent","emit","hide","which","_resize","show","_checkScrollbar","_setScrollbar","scrollTop","_backdrop","toggle","modalIsOverflowing","documentElement","paddingLeft","bodyIsOverflowing","paddingRight","contCList","_removeEvents","originalBodyPad","innerWidth","basePadding","SettingsModal","printMap","_modal","printPdf","Content","Footer","modal","dataset","print","formData","FormData","actualScaleVal","opt_round","getMapScale","actualScale","current","scales","paperSizes","htmlFor","paperSize","selected","landscape","portrait","addNote","rows","checked","layersAttributions","mimeTypeExports","cancel","ProcessingModal","onEndPrint","printing","_setContentModal","_setFooterModal","pleaseWait","almostThere","close","CLASS_PRINT_MODE","deepObjectAssign","s_val","t_val","Control","opt_options","controlElement","language","ctrlBtnClass","onclick","showPrintSettingsModal","_init","_map","_mapTarget","getTargetElement","_settingsModal","_printMap","_processingModal","_onEndPrint","_initialized","_setMapSizForPrint","updateSize","_initialViewResolution","clearTimeout","_timeoutProcessing","_cancel","_prepareLoading","_disableLoading","_setFormatOptions","getLayers","TileWMS","FORMAT_OPTIONS","showLoading","_isCanceled","dim","find","widthPaper","heightPaper","mapSizeForPrint","_renderCompleteKey","hidePrintSettingsModal","createPdf","p"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,98]}